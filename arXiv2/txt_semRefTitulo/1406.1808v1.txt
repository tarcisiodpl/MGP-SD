
Consider a short theorem, i.e. one that can be written down using just a few
symbols. Can its shortest proof be arbitrarily long? We answer this question in
the negative. Inspired by arguments by Calude et al (1999) and Chaitin (1984)
that construct an upper bound on the first counterexample of a Π1 sentence as
a function of the sentence’s length, we present a similar argument about proof
length for arbitrary statements. As with the above, our bound is uncomputable,
since it uses a Busy Beaver oracle. Unlike the above, our result is not restricted
to any complexity class. Finally, we combine the above search procedures into an
automatic (albeit uncomputable) procedure for discovering Gödel sentences.

1 Introduction
Suppose you have a hypothesis of the form ∀x.φ(x), where x ∈ N+ and φ is a decidable predicate.
Statements of this form are known as a Π1 statements, and this class includes famous problems such
as the Goldbach conjecture (“all even numbers are sums of two primes”).
It is commonly taught that checking examples never suffices to establish the truth of a hypothesis,
no matter how many examples one has checked, and that this is why a proof is needed. However,
Chaitin (1984) has shown an upper bound on the smallest counterexample (should it exist), based
on the length used to encode the statement. This bound uses the Busy Beaver function, as shown in
the next section, in which we reproduce Chaitin’s argument.
This paper presents an analogous result about proofs. It is likewise commonly held that no matter
how hard you’ve tried and failed to prove a result, it is always possible that the proof is out there,
and you just haven’t found it yet. This note shows an upper bound on proof length, which essentially
says that if no proof can be found within a certain finite set of proof attempts, then no proof exists.
We conclude by combining the above two results into a brief discussion of Gödel statements and
when to introduce new axioms.
It is important now to remark that a Busy Beaver oracle is equivalent to a Halting oracle. As a result,
the bounds discussed here are uncomputable, and are likely to be unknown for any given hypothesis
that one might encode (and possibly unknowable by all axiom systems in current use). Therefore,
these results might only begin to be useful if we ever have estimates of BB for large enough integers.

2 Bounding the first counterexample
The following argument is due to Chaitin (1984) and Calude, Jürgensen & Legg (1999).
Let the program Ch be a checker: given as inputs a predicate φ over the positive natural numbers,
and a positive natural number x, Ch(φ, x) always halts with output telling us whether or not φ(x) is
true.
Let P (φ) be the program that returns the smallest x on which Ch(φ, x) returns false. It works by
counting up until it reaches a number for which Ch returns false.
1

function Ch(phi,x)
return phi(x)
end function

function phi(x)
...
end
function P(phi)
x <- 0
while (phi(x)==TRUE)
x <- x+1
end while
return x
end function
Thus, for any hypothesis ∀xφ(x), P (φ) either gives us the smallest counterexample (in case the
hypothesis is false) or it never halts (in case the hypothesis is true).
The size of this program is length(pφq) + length(pP q) 1 , where pf q refers to the implementation
of function f . Here, length(pP q) isn’t very large, since it fits in 5 lines of code.
Therefore, should a counterexample to ∀xφ(x) exist, the Kolmogorov complexity of the smallest
counterexample is ≤ length(pφq) + length(pP q).
Therefore, in order to decide the truth of the universal, we only need to check the numbers whose
Kolmogorov Complexity ≤ length(pφq) + length(pP q). The Busy Beaver function gives us an
upper bound [?]: we only need to check numbers up to BB(length(pφq) + length(pP q)): if no
counterexample is found, none exist.
That is, the smallest counterexample is ≤ BB(length(pφq) + length(pP q)).

3 Bounding the size of the smallest proof
Now we turn to our original result:
Let the program T P be a theorem pump (a breadth-first search over all proofs): given a sentence T ,
it will search until it finds a proof of T . T P (T ) will either halt with the shortest proof (if there is a
proof), or never halt (if there isn’t).
The size of T P (T ) is length(pT q) + length(pT P q). Thus the KC of the shortest proof is ≤
length(pT q) + length(pT P q). Given this KC, the Busy Beaver function gives us an upper bound
on the length of the shortest proof: BB(length(pT q) + length(pT P q)). So we only need to check
proofs up to that size: if none is found, none exist.

4 Conclusion
In systems that are sound and complete, one could use either approach to decide the truth for any
given Π1 sentence. However, in interesting theories (namely, those that express PA), it follows from
Gödel’s 2nd incompleteness theorem that there will be sentences that are true in PA but not provable
in the theory.
Together, the above two procedures (counterexample search and proof search) can be combined
into a procedure for discovering Π1 Gödel sentences for any given axiom set T , i.e. sentences
that are unprovable in T (since no proof was found within our bound) but true in PA (since no
counterexample was found within the Chaitin bound).
1

We are omitting the log term for brevity. See Li & Vitanyi for an explanation of why this is needed.

2

Acknowledgements
The author thanks Shane Legg for comments.

