

is a general-purpose shell for constructing
expert systems based on belief networks and de­
cision networks. Such networks serve as graphi­
cal representations for decision models, in which
the knowledge engineer must define clearly the al­
ternatives, states, preferences, and relationships
that constitute a decision basis. KNET contains
a knowledge-engineering core written in Object
Pascal and an interface that integrates Hyper­
Card, a hypertext authoring tool for the Apple
Macintosh computer, into an e.;cpert-system ar­
chitecture. Hypertext and hypermedia have be­
come increasingly sophisticated in their storage,
management, and retrieval of information. In
broad terms, hypermedia deliver heterogeneous
bits of information in dynamic, extensively cross­
referenced packages. The resulting KNET sys­
tem features a coherent probabilistic scheme for
managing uncertainty, an object-oriented graph­
ics editor for drawing and manipulating decision
networks, and HyperCard's potential for quickly
constructing flexible and friendly user interfaces.
We envision KNET as a useful prototyping tool for
ongoing research on a variety of Bayesian reason­
ing problems, including tractable representation,
inference, and explanation.

KNET

I
I
I
I
I
I
I
I
I
I
I
I
I
I

1
1.1

Figure 1:

THIS DECISION NETWORK CAPTURES GENERI C

KNOWLEDGE ABOUT A MEDICAL DECISION BASED ON THE
OUTCOME OF A LABORATORY TEST. AN ALGORITH:VI FOR
DECISION NETWORKS WOULD ANSWER THE QUESTION:
WHICH DECISION YIELDS THE HIGHEST EXPECTED VALUE
FOR THIS PATIENT?

rules must form tree-structured chains of inference. KEE
provides no facilities for the management of uncertainty.
KNET combines normative proba bilistic modeling tech­
niques with a front end that offers the flexibility and ex­
pressiveness of a hypertext system. Perhaps more im­
portant, KNET separates the design of a tailored, domain­
specific user interface from all other aspects of the system.
In addition, KNET strictly adheres to the Macintosh human­
interface guidelines. Buttons, icons, scrolling text fields,
color illustrations, menus, and mouse-sensitive screen ob­
jects can be applied to build knowledge-acquisition inter­
faces that facilitate the construction and validation of new
knowledge bases. HyperCard, an authoring tool for hy­
permedia, facilitates the design of intuitive user interfaces.
A custom-designed interprocess communications channel
transfers information from the object-oriented KNET core
(written in Object Pascal) to HyperCard and back.
The KNET environment runs on low-cost, general-purpose
hardware. Using HyperTalk (Goodman, 1987), Hyper­
Card's object-oriented authoring language, knowledge en­
gineers as well as relatively naive users can incorporate
sound, synthesized speech, videodisc images, and anima­
tion into their applications. Our experience has indicated
that we can prototype, debug, and refine substantially dif­
ferent user interfaces to a Bayesian model in a single ses­
sion. Other workers in the field [Buchanan, 1988) have
observed that powerful and understandable user interfaces
can absorb as much as 80% of a project's design and imple­
mentation cycle. We believe that KNET enables the devel­
opment of an appropriate expert-system interface interface
that takes much less of the development cycle than hereto­
fore possible.

Motivation
User Interfaces

Rowley et a/. observe that "advances in computer science
are often consolidated as programming systems that raise
the abstraction level and the vocabulary for expressing so­
lutions to new problems. vVe have seen little permanent
consolidation of this form in AI" (Rowley, 1987). The au­
thors note that some artificial intelligence (AI) systems
place too many restrictions on the admissible paradigms;
almost all insulate the AI kernel from the surrounding
programming environment; few support the inclusion of
facilities that were not coded within the original frame­
work. Our experience has illustrated shortcomings in many
of the available knowledge-engineering products, including
EMYCIN (Buchanan and Shortliffe, 1984), KEE [Intellicorp,
Inc., 1986], S-1 (Teknowledge, Inc., 1984), and Personal
Consultant Plus. Consultations with knowledge bases de­
veloped in EMYCIN and Personal Consultant Plus must con­
form to a rigidly specified, linear sequence of questions
and answers. The ce r t ai nty factor model of EMYCIN, Per­
sonal Consultant Plus, and S-1 implicitly assumes that
49

PATHOPHYSIOLOGICAL STATE of the patient, the presence

or absence of an underlying DISEASE, and the result of a

LABORATORY TEST ) represent uncertain states of the world.

Figure

2: A

NETWORK,

Diamond-shaped value nodes summarize the preferences of
the decision maker. In the example of Figure 1, the net
value might depend on life expectancy, quality of life, and
costs associated with diagnostic and treatment interven­
tion. The decision maker can use the network to determine
a course of action that maximizes expected value.
After drawing a decision network, the knowledge engi­
neer must quantitate the influences of parent nodes on
their children. Chance nodes without predecessors require
prior-probability distributions. Chance nodes with pre­
decessors require probability distributions conditioned on
their parents. Next, the knowledge engineer must encode
the decision maker's attitudes toward risk according to the
axioms of utility theory. Value nodes require the specifi­
cation of a function over all its parent decision and chance
nodes. An inference algorithm for belief networks will cal­
culate posterior odds, based on all the available evidence,
for each chance node of interest. An inference algorithm
for decision networks will determine the decisions with the
highest expected value.
Shachter has designed DAVID, a decision network pro­
cessing system that runs on the Macintosh and provides
operations for expected-value decision making and sen­
sitivity analysis [Shachter, 1986]. He observes that "the
criticisms of probabilistic models of uncertainty are over­
come by an intelligent graphical interface that explicitly
incorporates conditional independence" [Shachter, 1986].
Shachter's encouraging results show that students have
been able quickly to build and solve decision models with
DAVID. Henrion [Henrion, 1987] has demonstrated the fea­
sibility of constructing decision networks of moderate size
(with about 30 nodes) for diagnosing and treating plant
disease. MUNIN [Lauritzen and Spiegelhalter, 1988], an
expert system based on belief networks for electromyog­
raphy diagnosis, pursues a similar knowled2:e-en"'ineerino�
0
0
.
approach. Exper1ence suggests, therefore, that belief networks and decision networks can serve as effective represen­
tations for communication between people and machines.
The elicitation of those normative network models more­
over, entails a methodology that can assist in re ovino­
imprecise language, forcing clear explication of an expert'
model, and clarifying the interrelationships of causal influ­
ences.
Typically, the development of practical skills ' alo-o0
. hms, and software lags behind the theoretical discoverv
nt
of a new modeling paradigm. Shachter [Shachter, 1986]
proposes an architecture that integrates decision networks
and traditional expert systems. KNET is a step toward that
goal. KNET provides graphical tools, HyperCard templates
for defining user interfaces, a Bayesian decision-making
kernel, and an open architecture that encompasses Object
Pascal, HyperTalk, and in the near future, CornrnonLisp.
The target user never needs to observe the details of uncer­
tainty management in KNET, inasmuch as the hypermedia
interface hides the irrelevant details.
The architectural features that distinguish KNET from
other systems are as follows:

SMALL PORTION OF THE REFEREE BELIEF

AS DISPLAYED BY KNET. REFEREE ENCODES

KNOWLEDGE ABOUT THE INTERPRETATION OF RANDOM­
IZED CLINICAL TRIALS.

1.2

Belief networks and decision
networks

Belief networks and decision networks have been used as
tools for constructing coherent probabilistic representa­
tions of uncertain expert opinion [Henrion, 1987]. A de­
cision network is a type of influence diagram used for de­
cision making [Howard and Matheson, 1984]; we use the
term specifically to designate a well-formed decision influ­
ence diagram [Holtzman, 1988]. For more than a. decade
now, decision analysts have used decision networks to con­
struct formal descriptions of decision problems and to cap­
ture knowledge in a representation that people with vary­
ing degrees of technical proficiency can understand. Belief
networks are specialized decision networks that lack con­
tain only chance nodes. Belief networks are particularly
useful for diagnostic applications. Pearl [Pearl, 1986] has
proposed an elegant distributed algorithm for belief main­
tenance and updating in such networks.

�

Decision networks represent the alternatives states
'
preferences, and relationships that constitute a decisio
model [Howard and Matheson, 1984]. We define decision
networks as directed acyclic graphs with nodes that rep­
resent propositions or quantities of interest and arcs that
summarize the interactions between those nodes. Decision
networks provide a mapping between the expert's knowl­
edge and the internal computational formalism. Their in­
tuitive pictorial structure facilitates knowledge acquisition
and communication [Horvitz et al., 1988].

�

The simple network of Figure 1 encodes a generic prob­
lem in medical decision-making.
Rectangular decision
nodes represent actions under direct control of the decision
maker. In this case, the physician and the patient must de­
cide whether to undertake a course of treatment. Arcs that
enter a decision node represent the information available at
the time of action. Circular chance nodes (for instance, the

•

�

KNET allows chance nodes and decision nodes to be in­

stantiated to specific background values prior to per-

50

I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I

I
forming inference. By contrast, many other decision­
analysis systems, such as DAVID, explore the results
of many potential background states in order to gain
insight into the model. Those systems focus on the
problem of decision making; KNET supports diagnosis
as well as decision making.

I
I

•

I

•

I
I
I
I
I
I
I
I
I
I
I
I
I
I
I

J.gn9T.!:l.O.G.lL9..U..!2-�i.gnm�nt._.

_________

Did tne person admitting tne patient into tne study know before
making the assignment (to the treatment or the control group) the
group to which tne patient would actually be allocated?

envisions a multiplicity of target audiences that
require different interfaces. Hyptertext simplifies the
authoring of new interfaces.
KNET

specifies an open architecture for probabilistic
expert· systems. A distributed server that runs on fast
hardware could, for instance, perform updating of the
decision model. A networked implementation will al­
low the Macintosh to offer maximum responsiveness,
whereas superior number-crunching hardware will execute the inferencing algorithm.

Answers:

KNET

Edit

TOTAL-KNOWLEDGE EASILY­
BROKEN PROBABL

¥-NOT­

BROKEN USES-RANDOM-

Probabilities

)

·

2

Knowledge engineering of a
Bayesian model

Figure 3: A H YPER CARD
NETWORK.

In its present form, KNET uses Pearl's distributed updating
algorithm [Pearl, 1986] to maintain belief assignments in a
belief network; the specific implementation is described in
[Suermondt and Cooper, 1988]. The system accomodates
decision nodes by using a technique that transforms any
belief-network algorithm into a decision-network algorithm
[Cooper, 1988].
Design of a belief network follows the canonical prin­
ciples of decision analysis [Howard and Matheson, 1984].
First, the. knowledge engineer must extract the relevant
state variables and their admissible values. In certain do­
mains, such as clinical epidemiology, where few terms pos­
sess a unique denotation, the engineer must elicit detailed
descriptions that pass a clarity test. In other words, a clair­
voyant with access to all the relevant information could un­
ambiguously assign a value to each state variable without
requiring further clarification.
Second, the knowledge engineer and expert must group
the state variables into a directed acyclic graph by draw­
ing arcs that represent influences. Arcs may, but do not
necessarily, denote cause-and-effect relationships. The ab­
sence of an arc implies specific probabilistic statements of
conditional independence. Pearl [Pearl, 1986]" and Well­
man [Wellman, 1986] describe the implications of graph
connectivity in detail.
Anyone who has used standard Macintosh graphics soft­
ware can create decision networks and belief networks in
KNET. For example, after invoking a HyperCard stack en­
titled "Belief Networks, " the engineer presses a button la­
beled "New Knowledge Base." Two empty windows ap­
pear: One displays a palette of graphical shapes, and the
other contains a scrollable list of variable names. The en­
gineer clicks the mouse on the palette to select ellipses
for chance nodes, squares for decision nodes, diamonds for
value nodes, and arrows for influence arcs. Using mouse
gestures that the Macintosh design group has standard­
ized, the knowledge engineer creates a color picture of the
network (Figure 2).

VIEW OF

A CHANCE NODE,

IGNORANCE OF ASSIGNMENT, FROM THE REFEREE BELIEF

DIFFEREN T

KNOWLEDGE

BASES

MIGHT

PRESENT DOMAIN-SPECIFIC HYPERTEXT RENDITIONS OF
THEIR CONCEPTS.

ately to situate herself within a potentially large know ledge
base and to extract a view of any siice of the domain.
After drawing a network and rearranging its nodes for
maximum esthetic appeal, the engineer can double-click on
a node and thereby open that node for further definition
and inspection. A HyperCard corresponding to the node
appears on the screen (Figure 3). At present, KNET pro­
vides only one template for the knowledge engineer's view
of a node; we plan to offer several, inasmuch as the design
of a new format with different text fields, buttons, labels,
graphs, and illustrations takes only minutes, and presup­
poses no deep knowledge of HyperTalk programming.
The inferencing core for belief networks requires that
the HyperCard interface specify mutually exclusive and
collectively exhaustive values for each node, a prior belief
assignment for those nodes that have no incoming arcs,
and a conditional probability distribution over the values
of the parent nodes. We have extended HyperCard to share
hypertext fields with Pascal objects. The communication
mechanism, although complex at the implementation level,
presents aan interface that the HyperTalk script designer
can invoke with concise messages. In effect, the Hyper­
Card interface can create sophisticated views of the deci­
sion network's hidden structure. More important, the KNET
programmer can tailor those views to the requirements of
diverse knowledge engineers who are operating in differ­
ent domains. Difficult graphical programming in Pascal
or Lisp is never required; instead, the HyperTalk scripting
language and drawing tools make rapid prototyping and
refinement possible.
An example illustrates the key ideas. A prototypical Hy­
perCard view (Figure 4) into a chance node of the belief
network contains a scrolling text field labeled "QUESTION,"
a field labeled "LEGALVALUES," a NAME field at the top,
a button labeled "PROBABILITIES," and a return arrow at
the bottom. The return arrow contains a simple HyperTalk
script with the command "activate KNET"; when the user

KNET supports all the sophisticated

"

screen operations that Macintosh users expect, including
dragging, coloring, shading, naming, and resizing of nodes.
KNET's pop-up window scroller allows the engineer im medi-

51

"

I
clicks on that button, HyperCard returns control to the
knowledge-engineering core, and the belief network
(Figure 3) becomes the foremost window on the screen.
The "PROBABILITIES" button has a script that transfers
control to another HyperCard (not shown), one that gath­
ers numbers for the conditional probability distribution in­
cident upon that node. The probability-gathering card has
at its disposal all the computational, text-manipulation,
and painting capabilities of HyperTalk. The card need
only insert the new conditional probability distribution of
a node into an invisible hypertext field; the interface shares
-that field transparently with Object Pascal.
HyperCard provides a number of useful templates. One
of those prototype cards contains HyperTalk scripts that
produce histograms and pie charts corresponding to arbi­
trary numerical data. With 5 minutes of effort, the first au­
thor was able to paste the chart-drawing card into his KB
stack, to create a new button on the probability-gathering
card, and to write a five-line script that switches between
graphical and numeric views of the conditional probabil­
ity distribution. Such a facility would require a signifi­
cant amount of programming time; a requirement for user­
specified dimensions, labels, and background illustrations
could quickly turn into a tedious, lengthy task for the sys­
tem's programmer. With KNET and HyperCard working
together, however, the KNET designer need not anticipate
every possible feature required by every conceivable target
audience. KNET provides the templates and hooks; Hyper­
Card users, be they domain experts, knowledge engineers,
or application programmers, can do the rest.

I

KNET

3

Was the

randomi;z:ation exec ute d

in such a woy os

to assure lock of knowledge to the pctient end to

IISSigning II

a t ment assignment at
eli gi ble and

paUent to

the investigators of the tre

experimental

the time the pclient

admitted

or control
tre11tment
ensure t'hat the
person
responsible for
experimental

::: :

was

found

into the stud!.!?

procdedure cssure leek of prior knowledge of
treatment assignment ot the

time

the

assignment
w11s ignorant
of the
patient's

polient

was found eligible for the study?

Are the credentials involved in the article of high
enough Quality to ensure that the study was
performed as

reported?

subsequent

Figure 4: A

SCREEN VIEW FROM A CONSULTATION WITH

LIEF NETWORK AND THE HYPERCARD INTERFACE.

BY

CLICKING ON THE POINTING-HAND ICONS, THE USER CAN
FOCUS THE SYSTEM'S ATTENTION FROM IGNORANCE OF

ASSIGNMENT TO MORE SPECIFIC QUESTIONS ABOUT THE
RANDOMIZATION OF THE CLINICAL STUDY.

parts. Labeled scales translate mouse gestures into belief
updates. Buttons, when activated, reveal a node's current
belief assignment in either numerical or graphical form. By
pointing and double-clicking, the user can switch between
color views of the belief network and hypertext presenta­
tions of the equivalent information; users may choose to
have both displays available simultaneously. In short, the
current version ofKNET provides a consultation format that
fully exploits progress in the design of human interfaces. In
addition, KNET offers that generality and flexibility within
a normative Bayesian framework.

·

52

I
I

REFEREE SHOWS THE RELATIONSHIP BETWEEN THE BE­

4

I
I

Old the design of the treatment assignment

treatment

Using the model

A fully specified belief network enumerates the possible
values or discretized ranges for each state variable, the
relevant conditional probability distributions at each local
event group, and prior probabilities for the root nodes. A
single line of HyperTalk code, "command consult," tells
KNET to instantiate the belief network, to calculate evi­
dential and diagnostic support for each node, to compute
the current belief assignment, and to build a new consul­
tation object. We have extended the EMYCIN metaphor
of a decision session as a consultation with the expert's
knowledge base; in KNET, however-, the consultation can
use hypertext to improve the flow of information between
knowledge base and the user. We have enhanced Hyper­
Talk with commands that extract the belief assignment for
a given node and feed new observations into the belief net­
work. The KNET architecture hides the irrelevant details
of belief updating and propagation. From the user's point
of view, observations automatically propagate through the
network and make themselves apparent through graphical
interactions with the HyperCard interface.
The current consultation format (Figure 4), which was
designed and built in a few hours, allows the user to ex­
plore the belief network by pointing and clicking on the
obvious icons. Transition from one card to the next hap­
pens instantaneously; on-screen buttons provide helpful in­
formation, illustrate the user's context within the model,
and effect transitions among different levels of the model.
One button provides easy access to a dictionary of terms;
others break complicated queries. into more easily managed

.. IV

process of

Applications

REFEREE [Chavez and Lehmann, 1988] is an expert system
that incorporates into a belief network a biostatistician's
expert knowledge about the methodology of randomized
clinical trials (RCTs). An original EMYCIN prototype re­
vealed ambiguity in the goals of the project and in the
precise definition of state variables (also known as "param­
eters" in EMYCIN) . Perhaps more significant, the EMYCIN
implementation assigned conflicting interpretations to cer­
tainty factors, which simultaneously served as measures
of belief and as continuous measures of quality. In ad­
dition, EMYCIN's facilities for observing the interrelation­
ships among rules and for guiding the user through a con­
sultation with the expert's knowledge base were not ad­
equate. Without advanced tools for clarifying questions
and for providing the necessary contextual clues, experts
and knowledge engineers became confused about the un­
derlying structure and purpose of the system.
In parallel with the design and implementation of KNET
on the Macintosh, we drew the REFEREE belief network
and wrote scripts to transfer the old knowledge-base frames
(from a prototype implementation on the TI Explorer) into

I
I
I
I
I
I
I
I
I
I
I
I
I

I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I

that assumption. vVe shall measure the time required
for the transition to KNET and the construction of an
appropriate HyperCard consultation interface.

HyperCard. To date, we have found that we can act on the
team's suggestions and can demonstrate an en�
hanced version of the HyperCard interface within hours to
a few days. We have constructed a belief network that rep­
resents the REFEREE expert's subjective knowledge about
the interpretation of randomized, controlled studies that
measure the effect of a treatment intervention on mortal­
ity. We are now validating and adjusting the expert's nu­
merical assessments.
REFEREE

5

Only further experience will establish the efficacy of
Bayesian methods in the design of large-scale expert sys­
tems. KNET offers the software tools needed to design, de­
bug, and validate Bayesian models suitable for use by a
large and diverse target audience.

Acknowledgments

Future work

Harold Lehmann made essential contributions to the devel­
opment of KNET. Diana Forsythe, David Heckerman, Eric
Horvitz, Bruce Buchanan, and Lyn Dupre offered valuable
suggestions. Bill Brown and Dan Feldman devoted their
time and insight as domain experts.
This work wa.S supported by the National Library of
Medicine under Grant LM-04136, the National Institutes
of Health under a Medical Scientist Training Program
Grant GM-07365, and the National Science Foundation
under Grant IRI-8703710. Computing facilities were pro­
vided in part by the SUMEX-AIM resource under NIH
Grant RR-00785.

has begun to serve as our research group's vehicle
for investigating the design of large knowledge-intensive
systems with coherent schemes for managing uncertainty.
We have planned and initiated the following activities:
• The general Bayesian inferencing problem is NP-hard
[Cooper, 1987]. We are investigating randomized al­
gorithms that may yield significant time reductions
for networks with particular topologies. Inasmuch as
KNET hides the details of belief propagation, we can
develop, test, and incorporate new algorithms with­
out altering existing knowledge bases.
Research in progress [Chavez, 1988] suggests that
Monte Carlo area-estimation strategies, combined
with a rapidly convergent Markov chain that gener­
ates hypothetical scenarios, can (with high probabil­
ity) estimate all posterior distributions to within a
prespecified relative error.
• Belief networks can encode meta-knowledge about
how to manage and focus a user's interaction with a
Bayesian model [Horvitz, 1988]. KNET offers a gen­
eral facility for designing and verifying belief net­
works; we can then package and reference those net­
works through extensions to HyperTalk. In the com­
ing months, we will ·apply KNET to ongoing work on
belief networks for control reasoning.
• Our expert has suggested the use of color as an ex­
planation facility; nodes might be shaded or colored
according to their influence on the goal node. Inas­
much as HyperCard can control the presentation of
a decision network by setting red, green, blue tuples
in hypertext fields, the basic facilities already exist.
In consultation with our expert, we shall experiment
with various color-coded semantics for explanation.
• KNET presently uses a primitive custom database to
store large quantities of information, including numer­
ical data, network topology, color coding, shading,
and discretization. We are presently incorporating
a relational-database management system (DBMS)
into the KNET architecture [Barsalou and Wiederhold,
1988]. We shall access the DBMS from both Object
Pascal and HyperCard. The DBMS will store risk­
preference curves, probability distributions, pictorial
data, incremental revisions of the knowledge base, and
consultation histories.
• As a test ofKNET's flexibility and general utility, ·we are
converting the PATHFINDER knowledge base [Horvitz et
al., 1984] to KNET format. PATHFINDER presently as­
sumes conditional independence of evidence given dis­
eases; the KNET implementation will allow us to rela.x
KNET

