
We propose Coactive Learning as a model of
interaction between a learning system and a
human user, where both have the common
goal of providing results of maximum utility to the user. At each step, the system
(e.g. search engine) receives a context (e.g.
query) and predicts an object (e.g. ranking).
The user responds by correcting the system
if necessary, providing a slightly improved –
but not necessarily optimal – object as feedback. We argue that such feedback can often
be inferred from observable user behavior, for
example, from clicks in web-search. Evaluating predictions by their cardinal utility to
the user, we propose efficient learning algorithms that have O( √1T ) average regret, even
though the learning algorithm never observes
cardinal utility values as in conventional online learning. We demonstrate the applicability of our model and learning algorithms
on a movie recommendation task, as well as
ranking for web-search.

1. Introduction
In a wide range of systems in use today, the interaction between human and system takes the following
form. The user issues a command (e.g. query) and receives a – possibly structured – result in response (e.g.
ranking). The user then interacts with the results (e.g.
clicks), thereby providing implicit feedback about the
user’s utility function. Here are three examples of such
systems and their typical interaction patterns:
Web-search: In response to a query, a search engine
presents the ranking [A, B, C, D, ...] and observes
that the user clicks on documents B and D.
Appearing in Proceedings of the 29 th International Conference on Machine Learning, Edinburgh, Scotland, UK, 2012.
Copyright 2012 by the author(s)/owner(s).

pannaga@cs.cornell.edu
tj@cs.cornell.edu

Movie Recommendation: An online service recommends movie A to a user. However, the user rents
movie B after browsing the collection.
Machine Translation: An online machine translator is used to translate a wiki page from language
A to B. The system observes some corrections the
user makes to the translated text.
In all the above examples, the user provides some
feedback about the results of the system. However,
the feedback is only an incremental improvement, not
necessarily the optimal result. For example, from the
clicks on the web-search results we can infer that the
user would have preferred the ranking [B, D, A, C, ...]
over the one we presented. However, this is unlikely to
be the best possible ranking. Similarly in the recommendation example, movie B was preferred over movie
A, but there may have been even better movies that
the user did not find while browsing. In summary, the
algorithm typically receives a slightly improved result
from the user as feedback, but not necessarily the optimal prediction nor any cardinal utilities. We conjecture that many other applications fall into this schema,
ranging from news filtering to personal robotics.
Our key contributions in this paper are threefold.
First, we formalize Coactive Learning as a model of
interaction between a learning system and its user,
define a suitable notion of regret, and validate the
key modeling assumption – namely whether observable user behavior can provide valid feedback in our
model – in a web-search user study. Second, we derive
learning algorithms for the Coactive Learning Model,
including the cases of linear utility
√ models and convex
cost functions, and show O(1/ T ) regret bounds in
either case with a matching lower bound. The learning algorithms perform structured output prediction
(see (Bakir et al., 2007)) and thus can be applied in
a wide variety of problems. Several extensions of the
model and the algorithm are discussed as well. Third,
we provide extensive empirical evaluations of our algorithms on a movie recommendation and a web-search
task, showing that the algorithms are highly efficient
and effective in practical settings.

Coactive Learning

2. Related Work
The Coactive Learning Model bridges the gap between
two forms of feedback that have been well studied
in online learning. On one side there is the multiarmed bandit model (Auer et al., 2002b;a), where an
algorithm chooses an action and observes the utility of (only) that action. On the other side, utilities of all possible actions are revealed in the case of
learning with expert advice (Cesa-Bianchi & Lugosi,
2006). Online convex optimization (Zinkevich, 2003)
and online convex optimization in the bandit setting
(Flaxman et al., 2005) are continuous relaxations of
the expert and the bandit problems respectively. Our
model, where information about two arms is revealed
at each iteration sits between the expert and the bandit setting. Most closely related to Coactive Learning is the dueling bandits setting (Yue et al., 2009;
Yue & Joachims, 2009). The key difference is that
both arms are chosen by the algorithm in the dueling bandits setting, whereas one of the arms is chosen
by the user in the Coactive Learning setting.
While feedback in Coactive Learning takes the form
of a preference, it is different from ordinal regression
and ranking. Ordinal regression (Crammer & Singer,
2001) assumes training examples (x, y), where y is a
rank. In the Coactive Learning model, absolute ranks
are never revealed. Closely related is learning with
pairs of examples (Herbrich et al., 2000; Freund et al.,
2003; Chu & Ghahramani, 2005) where absolute ranks
are not needed; however, existing approaches require
an iid assumption and typically perform batch learning. There is also a large body of work on ranking
(see (Liu, 2009)). These approaches are different from
Coactive Learning; they require training data (x, y)
where y is the optimal ranking for query x.

3. Coactive Learning Model
We now introduce coactive learning as a model of interaction (in rounds) between a learning system (e.g.
search engine) and a human (e.g. search user) where
both the human and learning algorithm have the same
goal (of obtaining good results). At each round t, the
learning algorithm observes a context xt ∈ X (e.g. a
search query) and presents a structured object yt ∈ Y
(e.g. a ranked list of URLs). The utility of yt ∈ Y to
the user for context xt ∈ X is described by a utility
function U (xt , yt ), which is unknown to the learning
algorithm. As feedback the user returns an improved
object ȳt ∈ Y (e.g. reordered list of URLs), i.e.,
U (xt , ȳt ) > U (xt , yt ),

(1)

when such an object ȳt exists. In fact, we will also
allow violations of (1) when we formally model user
feedback in Section 3.1. The process by which the
user generates the feedback ȳt can be understood as
an approximate utility-maximizing search, but over a
user-defined subset Ȳt of all possible Y. This models an approximately and boundedly rational user that
may employ various tools (e.g., query reformulations,
browsing) to perform this search. Importantly, however, the feedback ȳt is typically not the optimal label
yt∗ := argmaxy∈Y U (xt , y).

(2)

In this way, Coactive Learning covers settings where
the user cannot manually optimize the argmax over the
full Y (e.g. produce the best possible ranking in websearch), or has difficulty expressing a bandit-style cardinal rating for yt in a consistent manner. This puts
our preference feedback ȳt in stark contrast to supervised learning approaches which require (xt , yt∗ ). But
even more importantly, our model implies that reliable
preference feedback (1) can be derived from observable
user behavior (i.e., clicks), as we will demonstrate in
Section 3.2 for web-search. We conjecture that similar feedback strategies also exist for other applications,
where users can be assumed to act approximately and
boundedly rational according to U .
Despite the weak preference feedback, the aim of a
coactive learning algorithm is to still present objects
with utility close to that of the optimal yt∗ . Whenever,
the algorithm presents an object yt under context xt ,
we say that it suffers a regret U (xt , yt∗ ) − U (xt , yt ) at
time step t. Formally, we consider the average regret
suffered by an algorithm over T steps as follows:
T
1 X
(U (xt , yt∗ ) − U (xt , yt )) .
REGT =
T t=1

(3)

The goal of the learning algorithm is to minimize
REGT , thereby providing the human with predictions
yt of high utility. Note, however, that a cardinal value
of U is never observed by the learning algorithm, but
U is only revealed ordinally through preferences (1).
3.1. Quantifying Preference Feedback Quality
To provide any theoretical guarantees about the regret
of a learning algorithm in the coactive setting, we need
to quantify the quality of the user feedback. Note that
this quantification is a tool for theoretical analysis,
not a prerequisite or parameter to the algorithm. We
quantify feedback quality by how much improvement
ȳ provides in utility space. In the simplest case, we
say that user feedback is strictly α-informative when

Cumulative Distribution Function

Coactive Learning
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0

asked to answer 10 questions – 5 informational, 5 navigational – using the Google search engine. All queries,
result lists, and clicks were recorded. For each subject,
queries were grouped into query chains by question2 .
On average, each query chain contained 2.2 queries
and 1.8 clicks in the result lists.

Normal Condition
Swapped Condition
Reversed Condition
All Conditions
-5

-4

-3

-2

-1
0
1
DCG(x,ybar)-DCG(x,y)

2

3

4

5

Figure 1. Cumulative distribution of utility differences between presented ranking y and click-feedback ranking ȳ in
terms of DCG@10 for three experimental conditions and
overall.

the following inequality is satisfied:
U (xt , ȳt ) − U (xt , yt ) ≥ α(U (xt , yt∗ ) − U (xt , yt )). (4)
In the above inequality, α ∈ (0, 1] is an unknown parameter. Feedback is such that utility of ȳt is higher
than that of yt by a fraction α of the maximum possible utility range U (xt , yt∗ ) − U (xt , yt ). Violations of
the above feedback model are allowed by introducing
slack variables ξt ≥ 0:1
U (xt , ȳt )−U (xt , yt ) ≥ α(U (xt ,yt∗ )−U (xt ,yt ))−ξt . (5)
We refer to the above feedback model as α-informative
feedback. Note also that it is possible to express feedback of any quality using (5) with an appropriate value
of ξt . Our regret bounds will contain ξt , quantifying
to what extent the strict α-informative modeling assumption is violated.
Finally, we will also consider an even weaker feedback
model where a positive utility gain is only achieved in
expectation over user actions:
Et [U(xt ,ȳt)−U(xt ,yt)] ≥ α(U(xt ,yt∗)−U(xt ,yt))− ξ̄t . (6)
We refer to the above feedback as expected αinformative feedback. In the above equation, the expectation is over the user’s choice of ȳt given yt under
context xt (i.e., under a distribution Pxt [ȳt |yt ] which
is dependent on xt ).
3.2. User Study: Preferences from Clicks
We now validate that reliable preferences as specified
in Equation (1) can indeed be inferred from implicit
user behavior. In particular, we focus on preference
feedback from clicks in web-search and draw upon
data from a user study (Joachims et al., 2007). In this
study, subjects (undergraduate students, n = 16) were

We use the following strategy to infer a ranking ȳ from
the user’s clicks: prepend to the ranking y from the
first query of the chain all results that the user clicked
throughout the whole query chain. To assess whether
U (x, ȳ) is indeed larger than U (x, y) as assumed in
our learning model, we measure utility in terms of a
standard measure of retrieval quality from Information
P10 r(x,y[i])
Retrieval. We use DCG@10(x, y) =
i=1 log i+1 ,
where r(x, y[i]) is the relevance score of the i-th document in ranking y (see e.g. (Manning et al., 2008)).
To get ground-truth relevance assessments r(x, d), five
human assessors were asked to manually rank the set
of results encountered during each query chain. We
then linearly normalize the resulting ranks to a relative relevance score r(x, d) ∈ [0..5] for each document.
We can now evaluate whether the feedback ranking ȳ
is indeed better than the ranking y that was originally
presented, i.e. DCG@10(x, ȳ) > DCG@10(x, y).
Figure 1 plots the Cumulative Distribution functions
(CDFs) of DCG@10(x, ȳ) − DCG@10(x, y) for three
experimental conditions, as well as the average over
all conditions. All CDFs are shifted far to the right of
0, showing that preference feedback from our strategy
is highly accurate and informative. Focusing first on
the average over all conditions, the utility difference is
strictly positive on ∼ 60% of all queries, and strictly
negative on only ∼ 10%. This imbalance is significant
(binomial sign test, p < 0.0001). Among the remaining ∼ 30% of cases where the DCG@10 difference is
zero, 88% are due to ȳ = y (i.e. click only on top 1
or no click). Note that a learning algorithm can easily
detect those cases and may explicitly eliminate them
as feedback. Overall, this shows that implicit feedback
can indeed produce accurate preferences.
What remains to be shown is whether the reliability
of the feedback is affected by the quality of the current prediction, i.e., U (xt , yt ). In the user study, some
users actually received results for which retrieval quality was degraded on purpose. In particular, about one
third of the subjects received Google’s top 10 results in
reverse order (condition “reversed”) and another third
received rankings with the top two positions swapped
(condition “swapped”). As Figure 1 shows, we find
that users provide accurate preferences across this sub-

1

Strictly speaking, the value of the slack variable depends on the choice of α and the definition of utility. However, for brevity, we do not explicitly show this dependence.

2
This was done manually, but can be automated with
high accuracy (Jones & Klinkner, 2008).

Coactive Learning

Proof First, consider kwT +1 k2 , we have,

Algorithm 1 Preference Perceptron.
Initialize w1 ← 0
for t = 1 to T do
Observe xt
Present yt ← argmaxy∈Y wt⊤ φ(xt , y)
Obtain feedback ȳt
Update: wt+1 ← wt + φ(xt , ȳt ) − φ(xt , yt )
end for

wT⊤+1 wT +1 = wT⊤ wT + 2wT⊤ (φ(xT , ȳT ) − φ(xT , yT ))
+ (φ(xT , ȳT ) − φ(xT , yT ))⊤ (φ(xT , ȳT ) − φ(xT , yT )
≤ wT⊤ wT + 4R2 ≤ 4R2 T.

stantial range of retrieval quality. Intuitively, a worse
retrieval system may make it harder to find good results, but it also makes an easier baseline to improve
upon. This intuition is formally captured in our definition of α-informative feedback. The optimal value
of the α vs. ξ trade-off, however, will likely depend
on many application-specific factors, like user motivation, corpus properties, and query difficulty. In the
following, we therefore present algorithms that do not
require knowledge of α, theoretical bounds that hold
for any value of α, and experiments that explore a
large range of α.

In this section, we present algorithms for minimizing
regret in the coactive learning model. In the rest of this
paper, we use a linear model for the utility function,

T
X
t=1

(U (xt , ȳt ) − U (xt , yt )) .

(9)

We now use the fact that wT⊤+1 w∗ ≤ kw∗ kkwT +1 k
(Cauchy-Schwarz inequality), which implies
T
X
t=1

√
(U (xt , ȳt ) − U (xt , yt )) ≤ 2R T kw∗ k.

α

T
X
t=1

(U (xt , yt∗ ) − U (xt , yt )) −

T
X
t=1

√
ξt ≤ 2R T kw∗ k,

from which the claimed result follows.

We start by presenting and analyzing the most basic algorithm for the coactive learning model, which
we call the Preference Perceptron (Algorithm 1). The
Preference Perceptron maintains a weight vector wt
which is initialized to 0. At each time step t, the algorithm observes the context xt and presents an object y
that maximizes wt⊤ φ(xt , y). The algorithm then observes user feedback ȳt and the weight vector wt is
updated in the direction φ(xt , ȳt ) − φ(xt , yt ).
Theorem 1 The average regret of the preference perceptron algorithm can be upper bounded, for any α ∈
(0, 1] and for any w∗ as follows:
T

2Rkw∗ k
1 X
√
.
ξt +
αT t=1
α T

=

(7)

where w∗ ∈ RN is an unknown parameter vector and
φ : X × Y → RN is a joint feature map such that
kφ(x, y)kℓ2 ≤ R for any x ∈ X and y ∈ Y. Note that
both x and y can be structured objects.

REGT ≤

wT⊤+1 w∗ = wT⊤ w∗ + (φ(xT , ȳT ) − φ(xT , yT ))⊤ w∗

From the α-informative modeling of the user feedback
in (5), we have

4. Coactive Learning Algorithms

U (x, y) = w∗⊤ φ(x, y),

On line one, we simply used our update rule from
algorithm 1. On line two, we used the fact that
wT⊤ (φ(xT , ȳT ) − φ(xT , yT )) ≤ 0 from the choice of
yT in Algorithm 1 and that kφ(x, y)k ≤ R. Further,
from the update rule in algorithm 1, we have,

(8)

The first term in the regret bound denotes the quality of feedback in terms of violation of the strict αinformative feedback. In particular, if the user feedback is strictly α-informative, then
√ all slack variables
in (8) vanish and REGT = O(1/ T ).
Though user feedback is modeled via α-informative
feedback, the algorithm itself does not require the
knowledge of α; α plays a role only in the analysis.
Although the preference perceptron appears similar to
the standard perceptron for multi-class classification
problems, there are key differences. First, the standard perceptron algorithm requires the true label y∗
as feedback, whereas much weaker feedback ȳ suffices
for our algorithm. Second, the standard analysis of
the perceptron bounds the number of mistakes made
by the algorithm based on margin and the radius of the
examples. In contrast, our analysis bounds a different
regret that captures a graded notion of utility.
An appealing aspect of our learning model is that several interesting extensions are possible. We discuss
some of them in the rest of this section.

Coactive Learning

4.1. Lower Bound
We now show that the upper bound in Theorem 1
cannot be improved in general.
Lemma 2 For any coactive learning algorithm A with
linear utility, there exist xt , objects
√ Y and w∗ such that
REGT of A in T steps is Ω(1/ T ).
Proof Consider a problem where Y = {−1, +1}, X =
{x ∈ RT : kxk = 1}. Define the joint feature map
as φ(x, y) = yx. Consider T contexts e1 , . . . , eT such
that ej has only the j th component equal to one and
all the others equal to zero. Let y1 , . . . yT be the sequence of outputs of
e1 , . . . ,√
eT . Con√ A on contexts
√
struct w∗ = [−y1 / T − y2 / T · · · − yT / T ]⊤ , we
have for this construction kw∗ k = 1. Let the user
feedback on the tth step be −yt . With these choices,
the user feedback is always α-informative with α = 1
since yt∗ = −yt . Yet, the regret of the algorithm is
1 PT
⊤
∗
⊤
√1
t=1 (w∗ φ(et , yt ) − w∗ φ(et , yt )) = Ω( T ).
T
4.2. Batch Update
In some applications, due to high volumes of feedback,
it might not be possible to do an update after every
round. For such scenarios, it is natural to consider a
variant of Algorithm 1 that makes an update every k
iterations; the algorithm simply uses wt obtained from
the previous update until the next update. It is easy
to show the following regret bound for batch updates:
√
T
2Rkw∗ k k
1 X
√
.
ξt +
REGT ≤
αT t=1
α T
4.3. Expected α-Informative Feedback
So far, we have characterized user behavior in terms
of deterministic feedback actions. However, if a bound
on the expected regret suffices, the weaker model of
Expected α-Informative Feedback from Equation (6)
is applicable.
Corollary 3 Under expected α-informative feedback
model, the expected regret (over user behavior distribution) of the preference perceptron algorithm can be
upper bounded as follows:
T

E[REGT ] ≤

2Rkw∗ k
1 X¯
√
ξt +
.
αT t=1
α T

(10)

The above corollary can be proved by following the
argument of Theorem 1, but taking expectations
over user feedback: E[wT⊤+1 wT +1 ] = E[wT⊤ wT ] +

Algorithm 2 Convex Preference Perceptron.
Initialize w1 ← 0
for t = 1 to T do
Set ηt ← √1t
Observe xt
Present yt ← argmaxy∈Y wt⊤ φ(xt , y)
Obtain feedback ȳt
Update: w̄t+1 ← wt + ηt G(φ(xt , ȳt ) − φ(xt , yt ))
Project: wt+1 ← arg minu∈B ku − w̄t+1 k2
end for

E[2wT⊤ (φ(xT , ȳT ) − φ(xT , yT ))] + ET [(φ(xT , ȳT ) −
φ(xT , yT ))⊤ (φ(xT , ȳT ) − φ(xT , yT )] ≤ E[wT⊤ wT ] +
4R2 . In the above, E denotes expectation over all user
feedback ȳt given yt under the context xt . It follows
that E[wT⊤+1 wT +1 ] ≤ 4T R2 .
Applying
√ Jensen’s inequality on the concave function q·, we get: E[wT⊤ w∗ ] ≤ kw∗ kE[kwT k] ≤

kw∗ k E[wT⊤ wT ]. The corollary follows from the definition of expected α-informative feedback.
4.4. Convex Loss Minimization

We now generalize our results to minimize convex
losses defined on the linear utility differences. We assume that at every time step t, there is an (unknown)
convex loss function ct : R → R which determines the
loss ct (U (xt , yt ) − U (xt , yt∗ )) at time t. The functions
ct are assumed to be non-increasing. Further, subderivatives of the ct ’s are assumed to be bounded (i.e.,
c′t (θ) ∈ [−G, 0] for all t and for all θ ∈ R). The vector
w∗ which determines the utility of yt under context
xt is assumed from a closed and bounded convex set
B whose diameter is denoted as |B|.
Algorithm 2 minimizes the average convex loss. There
are two differences between this algorithm and Algorithm 1. Firstly, there is a rate ηt associated with the
update at time t. Moreover, after every update, the resulting vector w̄t+1 is projected back to the set B. We
have the following result for Algorithm 2, a proof of
which is provided in an extended version of this paper
(Shivaswamy & Joachims, 2012).
Theorem 4 For the convex preference perceptron, we
have, for any α ∈ (0, 1] and any w∗ ∈ B,
T
T
1 X
1 X
ct (U (xt , yt ) − U (xt , yt∗ )) ≤
ct (0)
T t=1
T t=1


T
2G X
1 |B|G |B|G 4R2 G
√ +
. (11)
+ √
+
ξt +
αT t=1
α 2 T
T
T

Coactive Learning

In the bound (11), ct (0) is the minimum possible
convex loss since U (xt , yt ) − U (xt , yt∗ ) can never be
greater than zero by definition of yt∗ . Thus the theorem upper bounds the average convex loss via the
minimum achievable loss and the quality of feedback.
Like the previous result (Theorem 1), under strict αinformative feedback, the average
loss approaches the
√
best achievable loss at O(1/ T ) albeit with larger constant factors.

5.1.1. Strong Vs Weak Feedback
The goal of the first experiment was to see how the
regret of the algorithm changes with feedback quality.
To get feedback at different quality levels α, we used
the following mechanism. Given the predicted ranking
yt , the user would go down the list until she found
five URLs such that, when placed at the top of the
list, the resulting ȳt satisfied the strictly α-informative
feedback condition w.r.t. the optimal w∗ .

5. Experiments

α = 0.1
α = 1.0

We empirically evaluated the Preference Perceptron
algorithm on two datasets. The two experiments differed in the nature of prediction and feedback. While
the algorithm operated on structured objects (rankings) in one experiment, atomic items (movies) were
presented and received as feedback in the other.

avg. util regret

1.5

1

0.5

0 0
10

1

10

2

3

10

10

4

10

t

5.1. Structured Feedback: Learning to Rank

Figure 2. Regret based on strictly α-informative feedback.

We evaluated our Preference Perceptron algorithm on the Yahoo!
learning to rank dataset
(Chapelle & Chang, 2011). This dataset consists of
query-url feature vectors (denoted as xqi for query q
and URL i), each with a relevance rating riq that ranges
from zero (irrelevant) to four (perfectly relevant). To
pose ranking as a structured prediction problem, we
defined our joint feature map as follows:

Figure 2 shows the results for this experiment for
two different α values. As expected, the regret with
α = 1.0 is lower compared to the regret with respect
α = 0.1. Note, however, that the difference between
the two curves is much smaller than a factor of ten.
This is because strictly α-informative feedback is also
strictly β-informative feedback for any β ≤ α. So,
there could be several instances where user feedback
was much stronger than what was required. As expected from the theoretical bounds, since the user
feedback is based on a linear model with no noise, utility regret approaches zero.

w⊤ φ(q, y) =

5
X
w⊤ xqyi
.
log(i + 1)
i=1

(12)

In the above equation, y denotes a ranking such that
yi is the index of the URL which is placed at position
i in the ranking. Thus, the above measure considers
the top five URLs for a query q and computes a score
based on a graded relevance. Note that the above utility function defined via the feature-map is analogous to
DCG@5 (see e.g. (Manning et al., 2008)) after replacing the relevance label with a linear prediction based
on the features.
For query qt at time step t, the Preference Perceptron algorithm presents the ranking ytq that maximizes
wt⊤ φ(qt , y). Note that this merely amounts to sorting documents by the scores wt⊤ xqi t , which can be
done very efficiently. The utility regret in Eqn. (3),
based on the definition of utility in (12), is given by
PT
1
⊤
qt ∗
)−φ(qt , yqt )). Here yqt ∗ denotes
t=1 w∗ (φ(qt , y
T
the optimal ranking with respect to w∗ , which is the
best least squares fit to the relevance labels from the
features using the entire dataset. Query ordering was
randomly permuted twenty times and we report average and standard error of the results.

5.1.2. Noisy Feedback
In the previous experiment, user feedback was based
on actual utility values computed from the optimal
w∗ . We next make use of the actual relevance labels
provided in the dataset for user feedback. Now, given
a ranking for a query, the user would go down the list
inspecting the top 10 URLs (or all the URLs if the
list is shorter) as before. Five URLs with the highest
relevance labels (riq ) are placed at the top five locations
in the user feedback. Note that this produces noisy
feedback since no linear model can perfectly fit the
relevance labels on this dataset.
As a baseline, we repeatedly trained a conventional
Ranking SVM3 . At each iteration, the previous SVM
model was used to present a ranking to the user. The
user returned a ranking based on the relevance laqt
) and
bels as above. The pairs of examples (qt , ysvm
qt
(qt , ȳsvm ) were used as training pairs for the ranking
3

http://svmlight.joachims.org

Coactive Learning

SVMs. Note that training a ranking SVM after each
iteration would be prohibitive, since it involves solving a quadratic program and cross-validating the regularization parameter C. Thus, we retrained the SVM
whenever 10% more examples were added to the training set. The first training was after the first iteration
with just one pair of examples (starting with a random
yq1 ), and the C value was fixed at 100 until there were
50 pairs of examples, when reliable cross-validation became possible. After there were more than 50 pairs in
the training set, the C value was obtained via five-fold
cross-validation. Once the C value was determined,
the SVM was trained on all the training examples
available at that time. The same SVM model was then
used to present rankings until the next retraining.
1.6

SVM
Pref. Perceptron

avg. util regret

1.4
1.2
1
0.8

(15)). The dimensionality of the feature vectors and
the regularization parameters were chosen to optimize
cross-validation accuracy on the first dataset in terms
of squared error. For the second set of users, we then
considered the problem of recommending movies based
on the movie features mj . This experiment setup simulates the task of recommending movies to a new user
based on movie features from old users.
For each user i in the second set, we found the best
T
mj to the user’s utilleast squares approximation wi∗
ity functions on the available ratings. This enables us
to impute utility values for movies that were not explicitly rated by this user. Furthermore,
it allows us to
PT
⊤
(mt∗ −mt ),
measure regret for each user as T1 t=1 wi∗
which is the average difference in utility between the
recommended movie mt and the best available movie
mt∗ . We denote the best available movie at time t
by mt∗ , since in this experiment, once a user gave a
particular movie as feedback, both the recommended
movie and the feedback movie were removed from the
set of candidates for subsequent recommendations.

0.6
0.4 0
10

1

10

2

3

10

10

4

10

5.2.1. Strong Vs Weak Feedback

t

Figure 3. Regret vs time based on noisy feedback.

Results of this experiment are presented in Figure 3.
Since the feedback is now based on noisy relevance labels, the utility regret converges to a non-zero value
as predicted by our theoretical results. Over most
of the range, the Preference Perceptron performs significantly4 better than the SVM. Moreover, the perceptron experiment took around 30 minutes to run,
whereas the SVM experiment took about 20 hours on
the same machine. We conjecture that the regret values for both the algorithms can be improved with better features or kernels, but these extensions are orthogonal to the main focus of this paper.

Analogous to the web-search experiments, we first explore how the performance of the Preference Perceptron changes with feedback quality α. In particular, we
recommended a movie with maximum utility according to the current wt of the algorithm, and the user
returns as feedback a movie with the smallest utility
that still satisfied strictly α-informative feedback according to wi∗ . For every user in the second set, the
algorithm iteratively recommended 1500 movies in this
way. Regret was calculated after each iteration and
separately for each user, and all regrets were averaged
over all the users in the second set.
6

α = 0.1
α = 0.5
α = 1.0

5.2. Item Feedback: Movie Recommendation
In contrast to the structured prediction problem in
the previous section, we now evaluate the Preference
Perceptron on a task with atomic predictions, namely
movie recommendation. In each iteration a movie is
presented to the user, and the feedback consists of a
movie as well. We use the MovieLens dataset, which
consists of a million ratings over 3090 movies rated by
6040 users. The movie ratings ranged from one to five.
We randomly divided users into two equally sized sets.
The first set was used to obtain a feature vector mj for
each movie j using the “SVD embedding” method for
collaborative filtering (see (Bell & Koren, 2007), Eqn.
4

The error bars are extremely tiny at higher iterations.

avg. util regret

5
4
3
2
1
0 0
10

1

2

10

10

3

10

t

Figure 4. Regret for strictly α-informative feedback.

Figure 4 shows the results for this experiment. Since
the feedback in this case is strictly α-informative, the
average regret in all the cases decreases towards zero
as expected. Note that even for a moderate value of
α, regret is already substantially reduced after 10’s of
iterations. With higher α values, the regret converges
to zero at a much faster rate than with lower α values.

Coactive Learning

5.2.2. Noisy Feedback
We now consider noisy feedback, where the user feedback does not necessarily match the linear utility
model used by the algorithm. In particular, feedback is
now given based on the actual ratings when available,
or the score u⊤
i∗ mj rounded to the nearest allowed rating value. In every iteration, the user returned a movie
with one rating higher than the one presented to her.
If the algorithm already presented a movie with the
highest rating, it was assumed that the user gave the
same movie as feedback.
6

SVM
Pref. Perceptron

avg. util regret

5

The non-stochastic multi-armed bandit problem. SIAM
Journal on Computing, 32(1):48–77, 2002b.
Bakir, G.H., Hofmann, T., Schölkopf, B., Smola, A.J.,
Taskar, B., and Vishwanathan, S.V.N. (eds.). Predicting
Structured Data. The MIT Press, 2007.
Bell, R. M. and Koren, Y. Scalable collaborative filtering
with jointly derived neighborhood interpolation weights.
In ICDM, 2007.
Cesa-Bianchi, N. and Lugosi, G. Prediction, learning, and
games. Cambridge University Press, 2006.
Chapelle, O. and Chang, Y. Yahoo! learning to rank
challenge overview. JMLR - Proceedings Track, 14:1–
24, 2011.
Chu, W. and Ghahramani, Z. Preference learning with
gaussian processes. In ICML, 2005.

4
3

Crammer, K. and Singer, Y. Pranking with ranking. In
NIPS, 2001.

2
1
0 0
10

1

2

10

10

3

10

t

Figure 5. Regret based on noisy feedback.

As a baseline, we again ran a ranking SVM. Like in
the web-search experiment, it was retrained whenever
10% more training data was added. The results for
this experiment are shown in Figure 5. The regret of
the Preference Perceptron is again significantly lower
than that of the SVM, and at a small fraction of the
computational cost.

6. Conclusions
We proposed a new model of online learning where
preference feedback is observed but cardinal feedback
is never observed. We proposed a suitable notion of
regret and showed that it can be minimized under
our feedback model. Further, we provided several extensions of the model and algorithms. Furthermore,
experiments demonstrated its effectiveness for websearch ranking and a movie recommendation task. A
future direction is to consider λ-strongly convex functions, and we conjecture it is possible to derive algorithms with O(log(T )/T ) regret in this case.

Flaxman, A., Kalai, A. T., and McMahan, H. B. Online
convex optimization in the bandit setting: gradient descent without a gradient. In SODA, 2005.
Freund, Y., Iyer, R. D., Schapire, R. E., and Singer, Y. An
efficient boosting algorithm for combining preferences.
Journal of Machine Learning Research, 4:933–969, 2003.
Herbrich, R., Graepel, T., and Obermayer, K. Large margin rank boundaries for ordinal regression. In Advances
in Large Margin Classifiers. MIT Press, 2000.
Joachims, T., Granka, L., Pan, Bing, Hembrooke, H.,
Radlinski, F., and Gay, G. Evaluating the accuracy of
implicit feedback from clicks and query reformulations in
web search. ACM Transactions on Information Systems
(TOIS), 25(2), April 2007.
Jones, R. and Klinkner, K. Beyond the session timeout:
automatic hierarchical segmentation of search topics in
query logs. In CIKM, 2008.
Liu, T-Y. Learning to rank for information retrieval. Foundations and Trends in Information Retrieval, 3, March
2009.
Manning, C., Raghavan, P., and Schütze, H. Introduction
to Information Retrieval. Cambridge University Press,
2008.
Shivaswamy, P. and Joachims, T. Online structured prediction via coactive learning. arXiv:1205.4213, 2012.

Acknowledgements We thank Peter Frazier,
Bobby Kleinberg, Karthik Raman and Yisong Yue
for helpful discussions. This work was funded in part
under NSF awards IIS-0905467 and IIS-1142251.

Yue, Y. and Joachims, T. Interactively optimizing information retrieval systems as a dueling bandits problem.
In ICML, 2009.

