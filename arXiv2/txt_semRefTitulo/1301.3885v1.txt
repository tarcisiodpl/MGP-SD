
The growth of Internet commerce has stimulated
the use of collaborative filtering (CF) algorithms
as recommender systems. Such systems lever­
age knowledge about the known preferences of
multiple users to recommend items of interest to
other users. CF methods have been harnessed
to make recommendations about such items as
web pages, movies, books, and toys. Researchers
have proposed and evaluated many approaches
for generating recommendations. We describe
and evaluate a new method called personality
diagnosis (PD). Given a user's preferences for
some items, we compute the probability that he
or she is of the same "personality type" as other
users, and, in tum, the probability that he or she
will like new items. PD retains some of the ad­
vantages of traditional similarity-weighting tech­
niques in that all data is brought to bear on each
prediction and new data can be added easily and
incrementally. Additionally, PD has a mean­
ingful probabilistic interpretation, which may be
leveraged to justify, explain, and augment results.
We report empirical results on the EachMovie
database of movie ratings, and on user profile
data collected from the CiteSeer digital library
of Computer Science research papers. The prob­
abilistic framework naturally supports a variety
of descriptive measurements-in particular, we
consider the applicability of a value of informa­
tion (VOl) computation.

1

IN TRODUC TION

The goal of collaborative filtering (CF) is to predict the
preferences of one user, referred to as the active user, based
on the preferences of a group of users. For example, given
the active user's ratings for several movies and a database
of other users' ratings, the system predicts how the ac-

tive user would rate unseen movies. The key idea is that
the active user will prefer those items that like-minded
people prefer, or even that dissimilar people don't prefer.
The effectiveness of any CF algorithm is ultimately predi­
cated on the underlying assumption that human preferences
are correlated-if they were not, then informed prediction
would not be possible. There does not seem to be a sin­
gle, obvious way to predict preferences, nor to evaluate
effectiveness, and many different algorithms and evalua­
tion criteria have been proposed and tested. Most compar­
isons to date have been empirical or qualitative in nature
[Billsus and Pazzani, 1998; Breese et a!., 1998; Konstan
and Herlocker, 1997; Resnick and Varian, 1997; Resnick
et al., 1994; Shardanand and Maes, 1995], though some
worst-case performance bounds have been derived [Freund
et al., 1998; Nakamura and Abe, 1998], some general prin­
ciples advocated [Freund et al., 1998], and some funda­
mental limitations explicated [Pennock et al., 2000]. Initial
methods were statistical, though several researchers have
recently cast CF as a machine learning problem [Basu et
al., 1998; Billsus and Pazzani, 1998; Nakamura and Abe
1998] or as a list-ranking problem [Cohen et al., 1999; Fre­
und et al., 1998].
Breese et al. [1998] identify two major classes of pre­
diction algorithms. Memory-based algorithms maintain a
database of all users' known preferences for all items, and,
for each prediction, perform some computation across the
entire database. On the other hand, model-based algo­
rithms first compile the users' preferences into a descriptive
model of users, items, and/or ratings; recommendations are
then generated by appealing to the model. Memory-based
methods are simpler, seem to work reasonably well in prac­
tice, and new data can be added easily and incrementally.
However, this approach can become computationally ex­
pensive, in terms of both time and space complexity, as
the size of the database grows. Additionally, these meth­
ods generally cannot provide explanations of predictions or
further insights into the data. For model-based algorithms,
the model itself may offer added value beyond its predic­
tive capabilities by highlighting certain correlations in the
data, offering an intuitive rationale for recommendations,

UNCERTAINTY IN ARTIFICIAL INTELLIGENCE PROCEEDINGS 2000

474

or simply making assumptions more explicit. Memory re­
quirements for the model are generally less than for stor­
ing the full database. Predictions can be calculated quickly
once the model is generated, though the time complexity
to compile the data into a model may be prohibitive, and
adding one new data point may require a full recompila­
tion.
In this paper, we propose and evaluate a CF method called
personality diagnosis (PD) that can be seen as a hybrid be­
tween memory- and model-based approaches. All data is
maintained throughout the process, new data can be added
incrementally, and predictions have meaningful probabilis­
tic semantics. Each user's reported preferences are inter­
preted as a manifestation of their underlying personality
type. For our purposes, personality type is encoded sim­
ply as a vector of the user's "true" ratings for titles in the
database. It is assumed that users report ratings with Gaus­
sian error. Given the active user's known ratings of items,
we compute the probability that he or she has the same
personality type as every other user, and then compute the
probability that he or she will like some new item. The full
details of the algorithm are given in Section 3.
PD retains some of the advantages of both memory- and
model-based algorithms, namely simplicity, extensibility,
normative grounding, and explanatory power. In Sec­
tion 4, we evaluate PD's predictive accuracy on the Each­
Movie ratings data set, and on data gathered from the
CiteSeer digital library's access logs. For large amounts
of data, a straightforward application of PD suffers from
the same time and space complexity concerns as memory­
based methods. In Section 5, we describe how the prob­
abilistic formalism naturally supports an expected value
of information (VOl) computation. An interactive recom­
mender could use VOl to favorably order queries for rat­
ings, thereby mollifying what could otherwise be a tedious
and frustrating process. VOl could also serve as a guide
for pruning entries from the database with minimal loss of
accuracy.

2

BACKGROUND AND NOTATION

Subsection 2.1 discusses previous research on collabora­
tive filtering and recommender systems. Subsection 2.2 de­
scribes a general mathematical formulation of the CF prob­
lem and introduces any necessary notation.
2.1

COLLABORATIVE FILTERING
APPROACHES

A variety of collaborative filters or recommender systems
have been designed and deployed. The Tapestry system
relied on each user to identify like-minded users manu­
ally [Goldberg et al., 1992]. GroupLens [Resnick et al.,
1994] and Ringo [Shardanand and Maes, 1995], devel-

oped independently, were the first CF algorithms to auto­
mate prediction. Both are examples of the more general
class of memory-based approaches, where for each predic­
tion, some measure is calculated over the entire database of
users' ratings. Typically, a similarity score between the ac­
tive user and every other user is calculated. Predictions are
generated by weighting each user's ratings proportionally
to his or her similarity to the active user. A variety of sim­
ilarity metrics are possible. Resnick et al. [1994] employ
the Pearson correlation coefficient. Shardanand and Maes
[1995] test a few metrics, including correlation and mean
squared difference. Breese et al. [ 1998] propose the use
of vector similarity, based on the vector cosine measure of­
ten employed in information retrieval. All of the memory­
based algorithms cited predict the active user's rating as a
similarity-weighted sum of the others users' ratings, though
other combination methods, such as a weighted product,
are equally plausible. Basu et al. [1998] explore the use of
additional sources of information (for example, the age or
sex of users, or the genre of movies) to aid prediction.
Breese et al. [ 1998] identify a second general class of
CF algorithms called model-based algorithms. In this ap­
proach, an underlying model of user preferences is first
constructed, from which predictions are inferred. The au­
thors describe and evaluate two probabilistic models, which
they term the Bayesian clustering and Bayesian network
models. In the first model, like-minded users are clus­
tered together into classes. Given his or her class member­
ship, a user's ratings are assumed to be independent (i.e.,
the model structure is that of a naive Bayesian network).
The number of classes and the parameters of the model are
learned from the data. The second model also employs a
Bayesian network, but of a different form. Variables in the
network are titles and their values are the allowable rat­
ings. Both the structure of the network, which encodes the
dependencies between titles, and the conditional probabil­
ities are learned from the data. See [Breese et al., 1998]
for the full description of these two models. Ungar and
Foster [1998] also suggest clustering as a natural prepro­
cessing step for CF. Both users and titles are classified into
groups; for each category of users, the probability that they
like each category of titles is estimated. The authors com­
pare the results of several statistical techniques for clus­
tering and model estimation, using both synthetic and real
data.
CF technology is in current use in several Internet com­
merce applications [Schafer et al., 1999]. For example, the
University of Minnesota's GroupLens and MovieLens1 re­
search projects spawned Net Perceptions,2 a successful In­
ternet startup offering personalization and recommendation
services. Alexa3 is a web browser plug-in that recommends

1http://movielens.umn.edu/
2http://www.netperceptions.com/
3http://www.alexa.com/

475

UNCERTAINTY IN ARTIFICIAL INTELLIGENCE PROCEEDINGS 2000

related links based in part on other people's web surfing
habits. A growing number of online retailers, including
Amazon.com, CDNow.com, and Levis.com, employ CF
methods to recommend items to their customers [Schafer
et al., 1999]. CF tools originally developed at Microsoft
Research are now included with the Commerce Edition of
Microsoft's SiteServer,4 and are currently in use at multiple
sites.
2.2

FORMAL FRAMEWORK AND NOTATION

A CF algorithm recommends items or titles to the active
user based on the ratings of other users. Let n be the num­
ber of users, T the set of all titles, and m = ITI the total
number of titles. Denote then x m matrix of all users' rat­
ings for all titles as R. More specifically, the rating of user
i for title j is Rij, where each Rij E � U { l.} is either a
real number or .l, the symbol for "no rating". We overload
notation slightly and use Ri to denote the ith row of R, or
the vector of all of user i's ratings. Distinguish one user
a E {1, 2, . . . , n} as the active user. Define NR E T to
be the subset of titles that the active user has not rated, and
thus for which we would like to provide predictions. That
is, title j is in the set NR if and only if Raj= l..
In general terms, a collaborative filter is a function f that
takes as input all ratings for all users, and replaces some or
all of the "no rating" symbols with predicted ratings. Call
this new matrix P.
if Raj =J l.
if Raj= l.

3

COLLABORATIVE FILTERING BY
PERSONALITY DIAGNOSIS

Traditional memory-based CF algorithms (e.g., similarity­
weighted summations like GroupLens and Ringo) work
reasonably well in practice, especially when the active user
has rated a significant number of titles [Breese et al., 1998].
These algorithms are designed for, and evaluated on, pre­
dictive accuracy. Little else can be gleaned from their re­
sults, and the outcome of comparative experiments can de­
pend to an unquantifiable extent on the chosen data set
and/or evaluation criteria. In an effort to explore more se­
mantically meaningful approaches, we propose a simple
model of how people rate titles, and describe an associ­
ated personality diagnosis (PD) algorithm to generate pre­
dictions. One benefit of this approach is that the model­
ing assumptions are made explicit and are thus amenable
to scrutiny, modification, and even empirical validation.
Our model posits that user i's personality type can be de­
scribed as a vector R}rue = (R}fue,Rgue , ...,R}�e ) of

4http://www.microsoft.com/DirectAccess/
products/sscommerce

"true" ratings for all seen titles. These encode his or her
underlying, internal preferences for titles, and are not di­
rectly accessible by the designer of a CF system. We as­
sume that users report ratings for titles they've seen with
Gaussian noise. That is, user i's reported rating for title j is
drawn from an independent normal distribution with mean
R}jue. Specifically,

where a is a free parameter. Thus the same user may report
different ratings on different occasions, perhaps depending
on the context of any other titles rated in the same session,
on his or her mood, or on other external factors. All factors
are summarized here as Gaussian noise. Given the user's
personality type, his or her ratings are assumed indepen­
dent. (If y
l. in Equation 1, then we assign a uniform
distribution over ratings.)
=

We further assume that the distribution of personality types
or ratings vectors in the database is representative of the
distribution of personalities in the target population of
users. That is, the prior probability Pr(R�ue = v ) that
the active user rates items according to a vector v is given
by the frequency that other users rate according to v. In­
stead of explicitly counting occurrences, we simply define
R�rue to be a random variable that can take on one of n
values-RI, R2, . . . , Rn-each with probability 1/n.

Pr(R�rue =Ri) =

�

(2)

From Equations 1 and 2, and given the active user's ratings,
we can compute the probability that the active user is of the
same personality type as any other user, by applying Bayes'
rule.

Pr(R�ue =RiiRai =XI, ...,Ram =Xm)
Pr(Rai =XIIR�ru
<X
i e =Rii )
Pr(Ram =XmiR��e =Rim)
Pr(R�rue =Ri)
·

· ·

·

(3)

Once we compute this quantity for each user i, we can com­
pute a probability distribution for the active user's rating of
an unseen title j.

Pr(Raj=XjiRai = XI, ...,Ram= Xm)
n

L Pr(Raj=XjIR�rue =Ri)
i=I

where j E NR. The algorithm has time and space
complexity O(nm), as do the memory-based methods de­
scribed in Section 2.1. The model is depicted as a nai"ve
Bayesian network in Figure I. It has the same structure as
a classical diagnostic model, and indeed the analogy is apt.

476

UNCERTAINTY IN ARTIFICIAL INTELLIGENCE PROCEEDINGS

2000

Table 1: Average absolute deviation scores on the Each­
Movie data for PD and the four algorithms tested in Breese
et al. [1998]. Lower scores are better. Correlation and
vector similarity are memory-based algorithms; Bayesian
clustering and Bayesian network are model-based. PD
performed best under all conditions. Bayesian clustering
and Bayesian network scores are transcribed directly from
Breese et al. [1998].

Algorithm
All But 1

Figure 1: Naive Bayesian network semantics for the PD
model. Actual ratings are independent and normally dis­
tributed given the underlying "true" personality type.

We observe ratings ("symptoms") and compute the prob­
ability that each personality type ("disease") is the cause
using Equation 3. We can then compute the probability of
rating values for an unseen title j using Equation 4. We
return the most probable rating as our prediction.
An alternative but equivalent interpretation of this model
is as follows. The active user is assumed to be "generated"
by choosing one of the other users uniformly at random and
adding Gaussian noise to his or her ratings. Given the ac­
tive user's known ratings, we infer the probability that he
or she is actually one of the other users, and then compute
the probabilities for ratings of other items. PD can also be
thought of as a clustering method [Breese et al., 1998; Un­
gar and Foster, 1998] with exactly one user per cluster. The
general approach of casting CF as a classification problem
has been advocated and examined previously [Basu et al.,
1998; Billsus and Pazzani, 1998; Cohen et al., 1999; Fre­
und et al., 1998; Nakamura and Abe 1998]. Note that in the
PD model, the only free parameter is a.

4

EMPIRICAL RESULTS

We have evaluated the PD algorithm on two datasets: a
subset of the EachMovie database, available from the Dig­
ital Equipment Research Center, and user profile data from
the CiteSeer digital library of Computer Science research
papers.

4.1

EACHMOVIE

The EachMovie data contains many thousands of users' rat­
ings for various movies, elicited on a scale from 0 to 5. We
used the same subset of the data as Breese et al. [1998],

PD
Correl.
V. Sim.
B. Clust.
B. Net.

0.965
0.999
1.000
1.103
1.066

Protocol
Given 10 Given 5
0.986
1.069
1.029
1.138
1.139

1.016
1.145
1.073
1.144
1.154

Given 2
1.040
1.296
1.114
1.127
1.143

consisting of 1623 titles, 381,862 ratings, 5000 users in the
training set, and 4119 users in the test set. On average, each
user rated about 46.3 movies. To carry out testing, we with­
hold some of the ratings of users in the test set and attempt
to predict them using a CF algorithm. Again following the
methodology of Breese et al. [1998], we employ four dif­
ferent protocols. Under the first protocol, called all but one,
we withhold for prediction only one rating for each user in
the test set; all other ratings are used as input for the CF al­
gorithm. In the other three protocols, given ten, given five,
and given two, we retain the given number of ratings for
each user for input to the algorithm, and try to predict the
rest. Each protocol admits less information than the pre­
vious, and we should expect a corresponding decrease in
accuracy. If a user does not rate enough movies to satisfy a
particular protocol, then he or she is dropped from that ex­
periment. The parameter a was set initially to correspond
with the variance in the ratings data, and then hand-tuned
during the training phase to a value of 2.5.
Breese et al. [1998] propose two evaluation criteria to mea­
sure accuracy: rank scoring and average absolute deviation.
We consider here only the latter. Let p be the total number
of predictions made for all users in the test set. Then the
average absolute deviation is simply 1/p E I Paj - Raj I·
The results are summarized in Table 1.
Scores for
the two model-based methods-Bayesian clustering and
Bayesian network-are transcribed directly from Breese et
al. [1998]; we did not replicate these experiments. We did
however reimplement and retest the memory-based algo­
rithms of correlation and vector similarity. Our results for
correlation match fairly well with those reported in Breese
et al. [1998], though vector similarity performed much bet­
ter in our tests. We are not sure of the source of the dis­
crepancy. Due to randomization, we almost certainly did

477

UNCERTAINTY IN ARTIFICIAL INTELLIGENCE PROCEEDINGS 2000

Table 2: Average absolute deviation scores for PD, cor­
relation, and vector similarity on the EachMovie data for
extreme ratings 0.5 above or 0.5 below the overall average
rating.

Algorithm
All But 1
PD
Correl.
V. Sim.

1.030
1.130
1.108

Protocol
Given 10 Given 5
1.087
1.211
1.127

1.129
1.282
1.167

Given 2
1.163
1.424
1.189

not withhold exactly the same titles for prediction as those
authors. PD performed better than each of the other four
algorithms under all four protocols. In fact, PD under the
given-ten protocol outperformed correlation under the all­
but-one protocol, which was the previous best score. Note
that, among the other four algorithms, none was a strict
winner.
Shardanand and Maes [1995] argue that CF accuracy is
most crucial when predicting extreme (very high or very
low) ratings for titles. Intuitively, since the end goal is typ­
ically to provide recommendations or warnings, high accu­
racy on the best and worst titles is most important, while
poor performance on mediocre titles is acceptable. Table 2
displays the average absolute deviation of PD, correlation,
and vector similarity on titles for which the true score is
0.5 above the average or 0.5 below the average. In other
words, deviations were computed only when the withheld
rating Rij was less than R
0.5 or greater than R + 0.5,
where R is the overall average rating in the data set. PD
outperformed correlation and vector similarity when pre­
dicting these extreme ratings.
-

Table 3 summarizes the statistical significance of the
EachMovie results. We employed the randomization test
[Fisher, 1966; Noreen, I989] to compute significance levels
for the differences in absolute average deviation between
PD and correlation, and between PD and vector similarity.
We proceeded by randomly shuffling together the deviation
scores of the two competing algorithms in IOO,OOO differ­
ent permutations, and, for each permutation, computing the
difference in average absolute deviation between the two
(now randomized) subsets. Table 3 reports the probability
that a random difference is greater than or equal to the true
difference. Low numbers indicate that the reported differ­
ences between algorithms are unlikely to be coincidental.
These low significance levels effectively rule of the null
hypothesis that the algorithms' deviation scores arise from
the same distribution.

Table 3: Significance levels of the differences in scores
between PD and correlation, and between PD and vector
similarity, computed using the randomization test on Each­
Movie data. Low significance levels indicate that differ­
ences in results are unlikely to be coincidental.

All But I
All But I (extreme)
Given 10
Given IO (extreme)
Given 5
Given 5 (extreme)
Given 2
Given 2 (extreme)

4.2

PD vs. Correl.

PD vs. V. Sim.

0.0842
5
4 xl05
w
w -5
w-5
w-5
w -5
w -5

0.0803
l .OI xl0-3
5
2 xl03.4 x to 4
w-5
6.1 xl0-4
w-5
0.0335

CITESEER

CiteSeer creates digital libraries of scientific litera­
ture [Lawrence et al., I999].
A CiteSeer service
that indexes computer science literature is available at
http: I I csindex. com/, and currently indexes about
270,000 articles. CiteSeer uses explicit and implicit feed­
back in order to maintain user profiles that are used to rec­
ommend new documents to users [Bollacker et al., 1999].
The system logs a number of user actions that we use to cre­
ate ratings for each document. User actions include view­
ing the details of a document, downloading a document,
viewing related documents, and explicitly adding a docu­
ment to a user's profile. We assigned a weight to each of
the actions, as shown in Table 4, and computed a rating
for each user-document pair as the sum of the respective
weights for all actions that the user performed on the spe­
cific document (rounded to integers), resulting in a range
of ratings from 0 to 6. The weights were chosen to cor­
respond roughly to our intuition of what actions are most
indicative of user preferences; we did not attempt to opti­
mize the weights through any formal procedure.
The raw CitesSeer data is sparse; most users share docu­
ments with only one or two others users, and users must
share at least two documents for any meaningful testing
of the memory-based algorithms. Thus for the purpose of
these experiments, we only included documents that were
rated by I5 or more users (I575 documents), and we only
included users that rated 2 or more of these popular docu­
ments (8244 users). There were a total of 32,736 ratings, or
3.97 ratings per user on average. The users were split into
two equal subsets for training and testing. As more users
access CiteSeer, and as we increase the amount of user pro­
file information recorded, we expect the ratings matrix to
fill in.
Results for PD, correlation, and vector similarity are sum-

UNCERTAINTY IN ARTIFICIAL INTELLIGENCE PROCEEDINGS 2000

478

Table 4: User actions for documents in CiteSeer, along with
the weights assigned to each action.
Action

Weight

Add document to profile
Download document
View document details
View bibliography
View page image
Ignore recommendation
View documents from the same source
View document overlap
Correct document details
View citation context
View related documents

2
1
0.5
0.5
0.5
-1.0
0.5
1
1
0.5

Table 6: Average absolute deviation scores for PD, correla­
tion, and vector similarity on the CiteSeer data for extreme
ratings 0.5 above or 0.5 below the overall average rating.
Algorithm
PD
Correl.
V. Sim.

Protocol
All But 1 Given 2
0.535
0.912
1.084

Table 7: Significance levels of the differences in scores be­
tween PD and correlation, and between PD and vector sim­
ilarity, on CiteSeer data. Low numbers indicate high confi­
dence that the differences are real.
PD vs. Correl.

Table 5: Average absolute deviation scores for PD, correla­
tion, and vector similarity on the CiteSeer data.
Algorithm
PD
Correl.
V. Sim.

I

Protocol
All But 1
Given 2
0.562
0.708
0.647

0.589
0.795
0.668

marized in Table 5. Due to the limited number of titles
rated by each user, there was a reasonable amount of data
only for the all but one and given two protocols. PD's pre­
dictions resulted in the smallest average absolute deviation
under both protocols. Table 6 displays the three algorithms'
average absolute deviation on "extreme" titles, for which
the true score is 0.5 above the average or 0.5 below the
average. Again, PD outperformed the two memory-based
methods that we implemented. Table 7 reports the statis­
tical significance of these results. These comparisons sug­
gest that it is very unlikely that the reported differences be­
tween PD and the other two algorithms are spurious.

5

HARNESSING VALUE OF
INFORMATION IN RECOMMENDER
SYSTEMS

Formulating collaborative filtering as the diagnosis of per­
sonality under uncertainty provides opportunities for lever­
aging information- and decision-theoretic methods to pro­
vide functionalities beyond the core prediction service. We
have been exploring the use of the expected value of in­
formation (VOl) in conjunction with CF. VOl computation
identifies, via a cost-benefit analysis, the most valuable new
information to acquire in the context of a current probabil­
ity distribution over states of interest [Howard, 1968]. In

0.606
0.957
1.111

All But 1
All But 1 (extreme)
Given 2
Given 2 (extreme)

3.7

10 -4
10-5
10-5
10-5
X

PD vs. V. Sim.
0.114
10-5
0.101
10-5

the current context, a VOl analysis can be used to drive
a hypothetico-deductive cycle [Horvitz et al., 1988] that
identifies at each step the most valuable ratings informa­
tion to seek next from a user, so as to maximize the quality
of recommendations.
Recommender systems in real-world applications have
been designed to acquire information by explicitly asking
users to rate a set of titles or by implicitly watching the
browsing or purchasing behavior of users. Employing a
VOl analysis makes feasible an optional service that could
be used in an initial phase of information gathering or in an
ongoing manner as an adjunct to implicit observation of a
user's interests. VOI-based queries can minimize the num­
ber of explicit ratings asked of users while maximizing the
accuracy of the personality diagnosis. The use of general
formulations of expected value of information as well as
simpler information-theoretic approximations to VOl hold
opportunity for endowing recommender systems with in­
telligence about evidence gathering. Information-theoretic
approximations employ measures of the expected change
in the information content with observation, such as rela­
tive entropy [Bassat, 1978]. Such methods have been used
with success in several Bayesian diagnostic systems [Heck­
erman et al., 1992].
Building a VOl service requires the added specification of
utility functions that captures the cost of querying a user
for his or her ratings. A reasonable class of utility models
includes functions that cast cost as a monotonic function
of the number of items that a user has been asked to evalu­
ate. Such models reflect the increasing frustration that users

UNCERTAINTY IN ARTIFICIAL INTELLIGENCE PROCEEDINGS 2000

may have with each additional rating task. In an explicit
service guided by such a cost function, users are queried
about titles in decreasing VOl order, until the expected cost
of additional requests outweighs the expected benefit of im­
proved accuracy.
Beyond the use of VOl to guide the gathering of prefer­
ence information, we are pursuing the offline use of VOl
to compress the amount of data required to produce good
recommendations. We can compute the average informa­
tion gain of titles and/or users in the data set and eliminate
those of low value accordingly. Such an approach can pro­
vide a means for both alleviating memory requirements and
improving the running time of recommender systems with
as little impact on accuracy as possible.

6

CONCLUSION

We have described a new algorithm for collaborative fil­
tering (CF) called personality diagnosis (PD), which can
be thought of as a hybrid between existing memory- and
model-based algorithms. Like memory-based methods, PD
is fairly straightforward, maintains all data, and does not
require a compilation step to incorporate new data. Most
memory-based algorithms operate as a "black box": effi­
cacy is evaluated by examining only the accuracy of the
output. Since results do not have a meaningful interpreta­
tion, the reason for success or failure is often hard to ex­
plain, and the search for improvements becomes largely a
trial-and-error process. The PD algorithm is based on a
simple and reasonable probabilistic model of how people
rate titles. Like other model-based approaches, its assump­
tions are explicit, and its results have a meaningful prob­
abilistic interpretation. According to absolute deviation,
on movie ratings data, PD makes better predictions than
four other algorithms-two memory-based and two model­
based-under four conditions of varying information about
the active user. PD also outperforms the two memory-based
algorithms on a subset of research paper ratings data ex­
tracted from the CiteSeer digital library. Most results are
highly statistically significant. Finally, we discussed how
value of information might be used in the context of an in­
teractive CF algorithm or a data compression scheme.
We plan to extend the PD framework to incorporate user
and title information beyond ratings-for example, user
age groups or movie genres. We will also consider relaxing
some of the assumptions of the model, for example allow­
ing some conditional dependence among ratings, or letting
a vary across users. Future empirical tests will evaluate PD
against other CF algorithms, on additional data sets, and
according to other proposed evaluation metrics, including
Breese et al.'s rank scoring criteria [1998]. Perhaps the
ultimate gauge for CF algorithms, though, is user satisfac­
tion. We plan to employ PD and other CF algorithms to
recommend research papers to CiteSeer users and investi-

479

gate which algorithms generate the highest click-through
rates.
Acknowledgments

Thanks to Jack Breese, Carl Kadie, Frans Coetzee, and the
anonymous reviewers for suggestions, advice, comments,
and pointers to related work.
