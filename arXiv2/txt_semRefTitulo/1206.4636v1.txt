
We consider the problem of parameter estimation using weakly supervised datasets,
where a training sample consists of the input
and a partially specified annotation, which
we refer to as the output. The missing information in the annotation is modeled using
latent variables. Previous methods overburden a single distribution with two separate
tasks: (i) modeling the uncertainty in the latent variables during training; and (ii) making accurate predictions for the output and
the latent variables during testing. We propose a novel framework that separates the
demands of the two tasks using two distributions: (i) a conditional distribution to model
the uncertainty of the latent variables for a
given input-output pair; and (ii) a delta distribution to predict the output and the latent
variables for a given input. During learning,
we encourage agreement between the two distributions by minimizing a loss-based dissimilarity coefficient. Our approach generalizes
latent svm in two important ways: (i) it models the uncertainty over latent variables instead of relying on a pointwise estimate; and
(ii) it allows the use of loss functions that
depend on latent variables, which greatly increases its applicability. We demonstrate the
efficacy of our approach on two challenging problems—object detection and action
detection—using publicly available datasets.

1. Introduction
Latent variable models (lvms) provide an elegant formulation for learning with weakly supervised datasets.
Appearing in Proceedings of the 29 th International Conference on Machine Learning, Edinburgh, Scotland, UK, 2012.
Copyright 2012 by the author(s)/owner(s).

For example, in computer vision, we may wish to learn
a model for detecting an object such as ‘deer’ from images where the location of the deer is unknown, and
is therefore treated as a latent variable. In computational medicine, we may wish to diagnose a patient
based on the observed symptoms as well as other unknown factors, such as the family’s medical history,
which can be represented using latent variables.
Typically, an lvm employs a single distribution over
three types of variables: (i) the observed variables, or
input, whose values are known during both training
and testing; (ii) the unobserved variables, or output,
whose values are known only during training; and (iii)
the unknown latent variables. In this setting, a natural framework would be to model the uncertainty in
the value of the latent variables and learn an lvm
by marginalizing them out (for example, in the case
of the expectation-maximization, or em, algorithm).
However, such an approach is unsuited for applications
that require an accurate prediction of the latent variables during test time. For example, in the above deer
detection application, we would like to infer not only
whether an image contains a deer, but also the exact
location of the deer. Alternately, we can use a delta
distribution that provides a pointwise estimate of the
output and the latent variables (for example, in the
case of the latent support vector machines, or lsvm,
framework). However, discarding the uncertainty in
latent variables can make such an approach prone to
error due to noise (for example, background clutter
that can be confused with a deer in feature space).
The above argument illustrates the deficiency of using a single joint distribution over the output and the
latent variables to address two separate tasks: (i) modeling the uncertainty over latent variables during training; and (ii) making accurate predictions during testing. We address this deficiency by proposing a novel
framework that consists of two distributions: (i) a
conditional distribution to model the uncertainty of

Modeling Latent Variable Uncertainty for Loss-based Learning

the latent variables for a given input-output pair; and
(ii) a delta distribution to predict the output and the
latent variables for a given input. In order to learn
the distributions from a training dataset, we build on
the intuition that they should agree with each other,
that is, (i) the output predicted by the delta distribution should match the ground-truth output; and (ii)
the latent variables predicted by the delta distribution should have a high probability according to the
conditional distribution. Due to the limited representational power of any model we may not be able to
achieve complete agreement (that is, all outputs are
predicted correctly, and all predicted latent variables
have probability 1). In order to make the two distributions as similar as possible, we minimize a regularized upper bound on a loss-based dissimilarity measure (Rao, 1982) between the distributions.
Unlike previous loss-based learning frameworks for
lvms, such as lsvm, we consider a general loss function that not only depends on the output but also the
latent variables. Such a loss function is essential when
solving problems that require the accurate prediction
of latent variables (for example, the aforementioned
object detection problem). By not restricting the form
of the loss function, our framework greatly enhances
the applicability of loss-based learning with latent variables. In fact, our framework can be viewed as a strict
generalization of lsvm in the sense that, when the loss
function is independent of the true (unknown) value of
the latent variables, it reduces to an lsvm.
Throughout this paper, we will assume that the latent
variables are helpful in predicting the correct output
of a sample. For example, if we want to distinguish between images of deers and elephants, we would expect
that the background clutter to have similar appearance
for both categories, and an accurate object localization
to be essential for correct prediction. There may be
cases where this assumption does not hold. For example, images of deers and cars could be distinguished by
detecting roads, or other objects that are more commonly found in urban environments. However, even
in such cases, we may be able to learn to detect the
object by providing fully supervised annotations for
a small fraction of training images, which would help
guide the learner towards the correct object locations
in other weakly supervised training images.

2. Related Work
The most commonly used method for learning the
parameters of an lvm is the em algorithm (Dempster et al., 1977; Sundberg, 1974), or its many variants (Gelman et al., 1995). While the em algorithm

has an elegant probabilistic interpretation of maximizing the likelihood of the ground-truth output, it
marginalizes out the latent variables, which makes it
unsuited to problems that require the accurate prediction of latent variables. Furthermore, it does not
employ a user-specified loss function, which captures
the user’s assessment of the quality of the solution.
The most related works to our approach are
lsvm (Felzenszwalb et al., 2008; Yu & Joachims, 2009)
and its recently proposed generalization called maxmargin min-entropy models (or m3e for short) (Miller
et al., 2012). The parameters of an lsvm or an m3e
are learned by minimizing a regularized upper bound
of the training loss. However, the loss function is
restricted to be independent of the true (unknown)
value of the latent variables. While such loss functions are useful, and in fact have been successfully employed in practice (Blaschko et al., 2010; Felzenszwalb
et al., 2008; Kumar et al., 2010; Miller et al., 2012;
Yu & Joachims, 2009), they cannot model several important problems, including the two employed in our
experiments—object detection and action detection.
In contrast, our framework allows the use of a general
loss function. In section 4 we will show that, for loss
functions that are independent of the true value of the
latent variable, our framework reduces to an lsvm.
In our earlier work (Kumar et al., 2011), we proposed
an iterative lsvm strategy (or ilsvm for short) with
the aim of using a general loss function. In section 5,
we show that ilsvm corresponds to using delta functions to model the conditional distribution of the latent
variables given the input and the output. In our experiments, we show that using a non-delta conditional
distribution significantly outperforms ilsvm.

3. Preliminaries
Notation. We denote the input by x ∈ X , the output by y ∈ Y and the latent variables by h ∈ H. The
training dataset D = {si = (xi , yi ), i = 1, · · · , n} consists of n input-output pairs (or samples) si .
We denote the parameters of the delta distribution,
which predicts the output and the latent variables for
a given input, as w. The parameters of the conditional
distribution of the latent variables given the input and
the output are denoted by θ.
We assume that the user specifies a loss function
∆(y1 , h1 , y2 , h2 ) that measures the difference between
(y1 , h1 ) and (y2 , h2 ). Similar to previous approaches,
we assume that ∆(y1 , h1 , y2 , h2 ) = 0 if y1 = y2 and
h1 = h2 . Otherwise, ∆(y1 , h1 , y2 , h2 ) ≥ 0.

Modeling Latent Variable Uncertainty for Loss-based Learning

Rao’s Dissimilarity Coefficient. We provide a
brief description of the dissimilarity measure used in
our framework, which was first introduced by Rao
(1982). Given a loss function ∆(z1 , z2 ), where z1 , z2 ∈
Z, the diversity coefficient of two distributions Pi (z)
and Pj (z) is defined as the expected loss between two
samples drawn randomly from the two distributions
respectively, that is,
X X
H(Pi , Pj ) =
∆(z1 , z2 ) Pi (z1 ) Pj (z2 ). (1)
z1 ∈Z z2 ∈Z

Using the diversity coefficient, the dissimilarity coefficient between the two distributions can be defined as
the following Jensen difference:
D(Pi , Pj ) = H(Pi , Pj )−βH(Pi , Pi )−(1−β)H(Pj , Pj ),
(2)
where β ∈ (0, 1). Note that Rao (1982) fixed β = 0.5
in order to ensure that the dissimilarity coefficient is
symmetric for Pi and Pj . However, dissimilarity coefficients do not necessarily have to be symmetric (for example, the well-known Kullback-Liebler divergence is
non-symmetric); hence we use the more general version
shown in equation (2). Rao (1982) showed that the
above formulation generalizes other commonly used
dissimilarity coefficients such as the Mahalanobis distance and the Gini-Simpson index. We refer the reader
to (Rao, 1982) for details.

4. Loss-based Learning Framework
Using the above notation and definitions, we now provide the details of our learning framework. We begin
by describing the distributions represented by the lvm.
4.1. Distributions
We wish to address two separate tasks: (i) to accurately model the distribution of the latent variables for
a given input-output pair; and (ii) to accurately predict the output and latent variables for a given input
(where accuracy is measured by a user-defined loss).
Instead of addressing these two tasks with a single distribution as in previous works, we define two separate
distributions, each focused on a single task.

can also employ a non-linear kernel within our framework. Formally, the delta distribution is given by

1 if y = y(w), h = h(w),
Pw (y, h|x) =
(4)
0 otherwise.
As mentioned earlier, since the true value of the latent variables is unknown, we would like to model the
uncertainty in their values. To this end, we define a
separate conditional distribution parameterized by θ
such that


1
Pθ (hi |si ) =
exp θ ⊤ Φ(xi , yi , hi ) ,
(5)
Z(si ; θ)
where Z(si ; θ) is the partition function, which ensures
that the distribution sums to one and Φ(xi , yi , hi ) is a
joint feature vector of the input xi , the output yi and
the latent variables hi . This feature vector can be different than the joint feature vector used to specify the
delta distribution Pw (·). Once again, a log-linear distribution is used only to simplify the description. Our
framework is valid for any general form of the distribution Pθ (·). Using the above conditional distribution,
we also specify a joint distribution as follows:

Pθ (hi |si ) if y = yi ,
′
Pθ (y, hi |xi ) =
(6)
0
otherwise.
As will be seen shortly, this joint distribution would
allow us to employ Rao’s dissimilarity coefficient in
our learning framework.
4.2. The Learning Objective
Given a dataset D and a loss function ∆(·), we propose to learn the parameters w and θ such that it minimizes the corresponding dissimilarity coefficient over
all training samples. Before delving into the details,
we give a broad overview of our objective function.

(3)

For a fixed w, if the predicted output yi (w) is similar
to the ground-truth output yi , our objective encourages the probability of the corresponding latent variables, that is Pθ (hi (w)|si ), and other similar latent
variables, to be high. If the predicted output yi (w) is
dissimilar to the ground-truth output yi , our objective
encourages the diversity coefficient of the corresponding distribution, that is Pθ (·|si ), to be high. In other
words, for a correctly predicting sample, the conditional distribution is peaky, while for an incorrectly
predicted sample, the conditional distribution is flat.

Here, Ψ(x, y, h) is a joint feature vector of the input x,
the output y and the latent variables h. Note that, although for simplicity we defined a linear rule in w, we

For a fixed θ, our objective minimizes the expected loss
of the prediction (yi (w), hi (w))) over all the training
samples si . This is a key point of our formulation, as
the expected loss incorporates the uncertainty of the

Given an input x, we define a delta distribution parameterized by w that predicts the output and the
latent variables according to the following rule:
(y(w), h(w)) = argmax w⊤ Ψ(x, y, h).
(y,h)

Modeling Latent Variable Uncertainty for Loss-based Learning

latent variable values while learning the parameters
w. Formally, the expected loss of a pair of output and
latent variables (y, h) for the sample si , measured with
respect to Pθ (·|si ), is defined as
∆i (y, h; θ) =

X

∆(yi , hi , y, h) Pθ (hi |si ),

(7)

hi

that is, it is the expectation of the loss between (y, h)
and (yi , hi ), where the expectation is taken over the
distribution of the unknown latent variables hi .
We now provide a mathematical description of our
learning framework. However, throughout this section
and the next, we will reiterate the above intuition at
the appropriate places. Our training objective is the
sum of the dissimilarity coefficient between Pw (·) and
P′θ (·) over all training samples. Using the definition of
dissimilarity coefficient in equation (2), the objective
can be written in terms of expected loss as
!
n
1 X
Hi (w, θ) − βHi (θ) ,
D(w, θ) =
n i=1
Hi (w, θ) = ∆i (yi (w), hi (w); θ),
X
Hi (θ) =
Pθ (h′i |si )∆i (yi , h′i ; θ).

(8)

h′i

Note that the diversity coefficient of Pw (·) is 0 since it
is a delta distribution. Hence, the term Hi (w) vanishes
from the above objective.
Minimizing the objective (8) encourages two desirable
properties: (i) the predicted output yi (w) should be
similar to the ground-truth output yi ; and (ii) the predicted latent variable hi (w) should be similar to the
latent variables with high probabilities Pθ (hi |xi , yi ).
Importantly, the similarity (or, to be more precise, the
dissimilarity) of the outputs and the latent variables
is specified by the loss function ∆(·). Hence, during
learning, the parameters w and θ are tuned according
to the user’s domain knowledge regarding the quality
of a solution. This ability to learn loss-specific parameters is absent in traditional frameworks such as em
and its variants.
4.3. Upper Bound on the Learning Objective
While the objective (8) is smooth and differentiable in
θ, for most commonly used choices of the loss function
it is highly non-smooth in w. The non-smoothness of
the objective results in a difficult optimization problem, which makes the learner prone to bad local minimum solutions. In order to overcome this deficiency,
we minimize an upper bound on the objective, similar
to the lsvm formulation (Yu & Joachims, 2009).

Specifically, we upper bound the term Hi (w, θ), which
depends on w, using ξi (w, θ) defined as follows.

ξi (w, θ) ≤ maxy,h w⊤ Ψ(xi , y, h) + ∆i (y, h; θ)
− maxh w⊤ Ψ(xi , yi , h)
(9)
Using the above inequalities, the objective D(w, θ) can
be upper bounded as
!
n
1 X
U (w, θ) =
ξi (w, θ) − βHi (θ) .
(10)
n i=1
However, if we learn the parameters w and θ by minimizing the above upper bound (or indeed the original
objective function), we run the risk of overfitting to the
training data. In order to prevent this, we introduce
regularization terms for the parameters. For this work,
we use ℓ2 norms, though other norms may also be employed. To summarize, the parameters are learned by
solving the following optimization problem:
1
J
(w∗ , θ ∗ ) = argmin ||w||2 + ||θ||2 +CU (w, θ), (11)
2
2
(w,θ )
where the hyperparameters J and C are the relative weights for the regularization of θ and the upper bound of the dissimilarity coefficient respectively.
Note that the upper bound derivation and the resulting optimization problem are similar to the lsvm
framework. In fact, the problem can be shown to be a
strict generalization of lsvm.
Observation 1. When the loss function does not depend on the value of the latent variables, problem (11)
is equivalent to the problem of learning an lsvm.
This observation follows from the fact that, when the
loss function is independent
of the latent variables,
P
Hi (θ) = ∆i (yi ; θ) h′ Pθ (h′i |si ) = 0. Hence, the
i
optimization problem is equivalent to minimizing the
sum of the regularization of w and ξi (w, θ) (which are
equivalent to the slack variables that model the upper bound of the loss function for the sample si in
lsvm). In fact, even if the loss function does depend
on the predicted latent variable hi (w), the optimization problem (11) still generalizes lsvm. This follows
from the fact that, in this case, the lsvm problem is
equivalent to using delta distributions to model Pθ (·).
Formal proofs are omitted.

5. Optimization
While the upper bound derived in the previous section
still results in a non-smooth and non-convex optimization problem, we obtain an approximate solution using

Modeling Latent Variable Uncertainty for Loss-based Learning

block coordinate descent. Specifically, starting with
some initial estimate of parameters, we alternately fix
one of the two sets of parameters (either w or θ) while
optimizing problem (11) over the other set of parameters. The process is said to terminate when the decrease in the objective falls below Cǫ, where C is the
hyperparameter in problem (11) and ǫ is a user specified tolerance. The following subsections provide the
details of the optimization over each set of parameters.
5.1. Optimization over w
For a fixed θ, problem (11) can be interpreted as minimizing a regularized upper bound on the expected loss
induced by w, that is,
X
∆i (yi (w), hi (w); θ),
(12)
i

since the term Hi (θ) is a constant for all samples si .
The expected loss is an intuitive objective: it gives
more weight to the loss corresponding to the latent
variables that have a high probability and less weight
to those corresponding to the latent variables with low
probability. Formally, for a fixed θ, the optimization
problem (11) reduces to the following:
P
C
1
2
min
i ξi
2 ||w|| + n
w
 ⊤
s.t. ξi = maxy,h w Ψ(xi , y, h) + ∆i (y, h; θ)
− maxh w⊤ Ψ(xi , yi , h).
(13)
The following observation provides us with an efficient
algorithm for the above optimization problem.
Observation 2.
convex program.

Problem (13) is a difference-of-

The regularization term ||w||2 is convex. The term
ξi (w, θ) is a difference of two functions that are the
pointwise maximum of a set of linear functions. Since
the pointwise maximum of convex functions is convex,
the observation follows. Similar to lsvm, a local minimum or saddle point solution of problem (13) can be
found using the concave-convex procedure (cccp) (Yu
& Joachims, 2009). The main steps of cccp are outlined in Algorithm 1. It iteratively estimates the value
of the latent variables using the current estimate of
w, and updates the parameters by solving a convex
optimization problem (14). There are several efficient
algorithms for problem (14), for example (Joachims
et al., 2009; Shalev-Shwartz et al., 2009; Tsochantaridis et al., 2004). In this work, we use the 1-slack
reformulation method proposed by Joachims et al.
(2009). We can also solve problem (13) using the selfpaced learning algorithm (Kumar et al., 2010), which

can potentially improve the performance of our framework. However, in this paper, we restrict ourselves to
the simpler and more efficient cccp algorithm.
Algorithm 1 The cccp algorithm for optimizing w.
input Dataset D, initial estimate w0 , tolerance ǫ.
1: t ← 0.
2: repeat
3:
Update h∗i = argmaxhi wt⊤ Ψ(xi , yi , hi ).
4:
Estimate the updated parameter wt+1 by solving the following convex optimization problem:
P
C
1
2
min
i ξi
2 ||w|| + n
w

s.t. ξi ≥ w⊤ Ψ(xi , y, h) + ∆i (y, h; θ)
−w⊤ Ψ(xi , yi , h∗i ), ∀y, h.
(14)

5:
t ← t + 1.
6: until Objective cannot be decreased below Cǫ.

Problem (13) requires the computation of the expected
loss ∆i (y, h; θ) as defined in equation (7), which can
be found in O(|H|) time for each pair of (y, h) (where
H is the space of all latent variables). For a sufficiently small H this operation is computationally feasible. For a large latent variable space H, we have two
options. First, we can choose the joint feature vector
Φ(x, y, h) for the conditional distribution Pθ (·) to be
decomposable in such a manner as to facilitate efficient
computation of sufficient statistics (for example, a low
tree-width model). Note that this still allows us to
use a more complex joint feature vector Ψ(x, y, h) to
make predictions for a given test sample. Second, if the
problem requires a complex Φ(x, y, h) to encode the
conditional distribution, then we can resort to using
one of several inference techniques to compute the approximate sufficient statistics. However, we note that
several important problems in machine learning can be
formulated using latent variables whose space is sufficiently small to allow for exact computations of the
expected loss, including motif finding (Yu & Joachims,
2009), image classification (Kumar et al., 2010; Miller
et al., 2012), digit recognition (Kumar et al., 2010),
and the two problems used in our experiments, namely
object detection and action detection.
5.2. Optimization over θ
For a fixed w, problem (11) can be interpreted as a
regularized upper bound on the following
! objective
n
X
1
Hi (w, θ) − βHi (θ) ,
(15)
n i=1
where the divergence coefficients Hi (w, θ) and Hi (θ)
are defined in equation (8). To gain an understanding

Modeling Latent Variable Uncertainty for Loss-based Learning

of the above objective, let us consider a simple 0/1 loss
(that is, the loss is 0 if both the outputs are equal and
both the latent variables are equal, otherwise 1). If
yi (w) = yi , that is, w predicts the correct output for
the sample si , then the first term of the above objective dominates the second. In this case, the parameter
θ is encouraged to assign a high probability to the
predicted latent variables hi (w), and other similar latent variables, in order to minimize the objective. If
yi (w) 6= yi , the first term is a constant. Thus, the
parameter θ is encouraged to maximize the diversity
of the conditional distribution Pθ (·). In other words,
for a correct prediction of output, we learn a peaky distribution and for an incorrect prediction of output, we
learn a flat distribution. Formally, for a fixed w, the
optimization problem (11) reduces to the following:
J
min ||θ||2 + CU (w, θ),
θ 2

Observation 3. The first step of ilsvm minimizes
the objective (15) when Pθ (·) are restricted to be
delta distributions. The second step of ilsvm solves
an lsvm problem similar to the one described in the
previous subsection for optimizing over w.
The observation regarding the second step is straightforward. For the first step, it follows from the fact
that ilsvm minimizes Hi (w, θ). As the second divergence coefficient Hi (θ) vanishes when using delta
conditional distributions, ilsvm effectively minimizes
objective (15) for a fixed w. A formal proof is omitted.

(16)

6. Experiments

where U (w, θ) is defined in equation (10). We obtain
an approximate solution to the above problem using
stochastic subgradient descent (ssd). The main steps
of ssd are outlined in Algorithm 2.
Algorithm 2 The ssd algorithm for optimizing θ.
input Dataset D, initial estimate θ 0 , T > 0.
1: t ← 0. λ ← J/C.
2: repeat
3:
Choose a sample si randomly from D.
4:
Compute the stochastic subgradient gt as
gt = θ t + ∇θ Hi (w, θ) + ∇θ Hi (θ).

loss function is measured using the latent variables estimated in the first step instead of the true latent variables. The following observation shows that ilsvm is
a special case of our framework.

(17)

5:
t ← t + 1.
1
6:
Update θt+1 ← θ t − λt
gt .
7: until Number of iterations t = T .

Each iteration of ssd takes O(|H|2 ) time (since the
subgradient gt requires a quadratic sum to compute
Hi (θ)). Similar to the expected loss, this can be performed exactly for a sufficiently small space of latent
variables, or the appropriate choice of the joint feature
vector Φ(x, y, h). For a large latent variable space and
a complex joint feature vector, we would have to resort
to approximate inference.
5.3. Comparison with ilsvm
Our overall approach is similar in flavor to the ilsvm
algorithm (Kumar et al., 2011), which iterates over
the following two steps until convergence: (i) obtain
the value of the latent variables for all training samples using the current estimate of the parameters; (ii)
update the parameters by solving an lsvm, where the

We now demonstrate the efficacy of our framework
on two challenging machine learning applications: object detection and action detection. Specifically, we
show how our approach, which models the uncertainty
in the values of the latent variables during training,
outperforms the previous loss-based learning frameworks, namely lsvm and ilsvm, which only estimate
the most likely assignment of the latent variables. All
three methods used in our experiments share a common hyperparameter C (the relative weight for the
upper bounds ξi ), which we vary to take values from
the set {10−4 , 10−3 , · · · , 102 }. In addition, our framework introduces two more hyperparameters: J (the
relative weight for the regularization of θ) and β (the
hyperparameter for Rao’s dissimilarity coefficient). In
all our experiments, we set J = 0.1 and β = 0.1. However, we may obtain better results by carefully tuning
these hyperparameters. The tolerance value for all the
methods was set to ǫ = 10−3 .
6.1. Object Detection
Problem Formulation. The aim of this application
is to learn discriminative object models that predict
the category (for example, ‘deer’ or ‘elephant’) and
the location of the object present in an image. In a
fully supervised setting, we would be required to specify a tight bounding box around the object present
in each of the training samples. As the collection of
such annotations is onerous and expensive, we would
like to learn the object models using image-level labels (that is, labels indicating the presence or absence
of an object category in an image), which are considerably easier to obtain. Formally, for each sample, the
input x is an image. The output y ∈ {0, 1, · · · , c − 1},

Modeling Latent Variable Uncertainty for Loss-based Learning

where c is the number of object categories. The latent
variable h models the tight bounding box around the
object in the image. Similar to previous works (Kumar et al., 2010; Miller et al., 2012), the joint feature
vectors Ψ(x, y, h) and Φ(x, y, h) are defined using the
hog descriptor (Dalal & Triggs, 2005; Felzenszwalb
et al., 2008) extracted using the pixels of the bounding
box. In our experiments, we consider non-overlapping
putative bounding boxes that are 8 pixels apart, which
results in a maximum of 350 bounding boxes for each
image in our dataset. This allows us to compute the
exact expected loss and the exact subgradients during
learning. We employ two different loss functions, 0/1
loss and overlap loss, which are defined below.

0 if y1 = y2 , h1 = h2 ,
∆0/1 (y1 , h1 , y2 , h2 ) =
1 otherwise,

1 − O(h1 , h2 ) if y1 = y2 ,
∆O (y1 , h1 , y2 , h2 ) =
1
otherwise,
where O(h1 , h2 ) ∈ [0, 1] is the ratio of the area of
the intersection and the area of the union of the two
bounding boxes (Everingham et al., 2010). Both the
loss functions not only encourage the models to predict the right category but also the right location of
the object. We note that a similar experimental setup
was also used by Blaschko et al. (2010).

Specifically, for the 0/1 loss, the best test loss (over
all C values) for lsvm, ilsvm and our method is
64.82 ± 4.96, 68.53 ± 5.52 and 47.76 ± 2.53 respectively (where the loss has been scaled to lie between
0 and 100). For the overlap loss, the best test loss
is 44.93 ± 1.84, 47.26 ± 3.87 and 42.27 ± 3.64 respectively. While the improvement in the overlap loss is
not statistically significant according to paired t-test,
the improvement in the 0/1 loss is statistically significant with p < 10−4 .

Figure 1. The average test loss over five folds (y-axis) of
the object detection application for different values of C (xaxis, shown in log-scale). Left: 0/1 loss; Right: Overlap
loss. Our framework outperforms both lsvm and ilsvm
and provides statistically significant improvements for the
0/1 loss (see text for details).

6.2. Action Detection
Dataset. We use images of 6 different mammals (approximately 45 images per mammal) that have been
previously employed for image classification (Kumar
et al., 2010; Miller et al., 2012). We split the images
of each category into approximately 60% for training
and 40% for testing. We report results using 5 folds.
Results. Figure 1 shows the test loss for lsvm,
ilsvm and our method using the 7 different C values. The test loss is computed using the ground-truth
labels and bounding boxes for the test samples. Recall that, during training, only the ground-truth labels
were assumed to be known, while the bounding boxes
were modeled as latent variables.
While lsvm was initially proposed for loss functions
that do not depend on the value of the true latent variable, we adopted a similar approach to the cccp algorithm for lsvm to solve the object detection problem.
Briefly, we iterate over two steps: estimating the value
of the latent variables and solving a convex structured
svm problem until the objective function could not be
decreased below a user-specified tolerance. In our experiments, this approach provided similar results to
the ilsvm method.
By incorporating the uncertainty in latent variables,
our approach outperformed both lsvm and ilsvm.

Problem Formulation. The aim of this application
is to learn human action models that predict the action class (for example, ‘running’ or ‘jumping’) and the
location of the person present in an image. Similar to
object detection, a fully supervised dataset would require annotating each training image with the person
bounding box. Instead, we use image-level labels that
indicate which action is being performed by a person
in the image. Formally, for each sample, the input x
is an image. The output y ∈ {0, 1, · · · , c − 1}, where
c is the number of action classes. The latent variable
h models the tight bounding box around the person
in the image. The joint feature vectors are the Poselet
descriptor (Maji et al., 2011) of the bounding box. We
consider approximately 20 putative bounding boxes for
each image, which are obtained automatically using a
standard person detector (Felzenszwalb et al., 2008).
The small search space for the latent variables avoids
the need for approximate inference. Once again, we
report results using both 0/1 loss and overlap loss.
Dataset. We use the pascal voc 2011 ‘trainval’
dataset (Everingham et al., 2010), which consists
of approximately 2500 images of 10 different action
classes. We split the images of each class into approximately 60% for training and 40% for testing, and

Modeling Latent Variable Uncertainty for Loss-based Learning

report results using 5 folds. In addition to the detected persons, we introduce the largest ground-truth
bounding box into the latent variable space.
Results. Figure 2 shows the test loss for the three
methods, computed using ground-truth labels and
bounding boxes. For 0/1 loss, the best test loss
over all C values for lsvm, ilsvm and our method
is 93.18 ± 1.95, 92.89 ± 3.70 and 76.10 ± 0.71 respectively. For overlap loss, the best test loss is 70.66±0.76,
71.33±1.14 and 67.16±0.32 respectively. Our method
significantly outperforms both lsvm and ilsvm, as
confirmed by the paired t-test with p < 10−3 .

since the conditional distribution is not used during
testing, an approximate estimate of its parameters,
which is able to accurately model the uncertainty in
the latent variables, would suffice in practice.
Acknowledgments. This work is partially funded
by the European Research Council under the European
Community’s Seventh Framework Programme (FP7/20072013)/ERC Grant agreement number 259112, INRIAStanford associate team SPLENDID, NSF under grant IIS
0917151, MURI contract N000140710747, and the Boeing
company. We thank Michael Stark for proof-reading the
paper, Subhransu Maji for the Poselets data, and Daniel
Selsam and Andrej Karpathy for helpful discussions.

