
A major limitation of exact inference algorithms for probabilistic graphical models is
their extensive memory usage, which often
puts real-world problems out of their reach.
In this paper we show how we can extend inference algorithms, particularly Bucket Elimination, a special case of cluster (join) tree decomposition, to utilize disk memory. We provide the underlying ideas and show promising empirical results of exactly solving large
problems not solvable before.

1

Introduction

Exact inference algorithms for graphical models
broadly fall into two categories: 1) Inference-based
algorithms (e.g. Bucket Elimination (BE), Cluster
Tree Elimination (CTE)); and 2) Search-based (e.g.
best-rst, depth-rst branch and bound) [3, 4, 5, 2].
Inference-based algorithms are time exponential in
the induced width and also require space exponential in the induced-width. While brute force search
algorithms can work in linear space (e.g., depth
rst search), more advanced search schemes that use
and/or search spaces require memory exponential in
the induced-width as well. Consequently, both classes
of algorithms are feasible only when the induced-width
(or treewidth) is small due to memory limitations.
Not surprisingly, various algorithms have been proposed that can work with bounded memory at the expense of additional time [2, 8, 9, 10]. In this paper
we aim to push the boundary of memory-intensive algorithms further, allowing a more eective tradeo or
in some cases eliminating the compromise altogether.
To do so, we extend the memory available to the algorithm to include external (disk) memory.
In comparison to main/virtual memory, external mem-

ory is seemingly unlimited. So an algorithm that eectively utilizes external memory should, in principle, be
able to tackle problems with very large induced widths.
However, the additional space does not come without
cost, as access of disk memory is typically orders of
magnitude slower than main memory. Nonetheless, it
has been demonstrated in the context of (A*) heuristic search that algorithms can be designed to mitigate
such eects [6, 7], yielding powerful schemes that can
be applied to previously unsolvable problems.
To make the realm of problems solvable by inference
algorithms using external memory more concrete, consider a Bayesian network (BN) comprised of binary
variables (k = 2) and having induced width, w? = 20.
The largest table in this model has 219 = 524, 288
entries. Assuming that a double-precision oating
point number requires 8 bytes, this problem requires
about 4MB of memory and easily ts into main memory. However, if each variable in the model is ternary
(k = 3) rather than binary, the largest table requires
about 9GB of memory. While 9 GB is more main memory than most computers have, such a problem would
t comfortably into external disk, which can exceed
several Tera-bytes in size.
In the remainder of this paper, we describe how a specic inference-based algorithm, BE [3], can be modied
to use external memory. We demonstrate the performance of this new algorithm, named Bucket Elimination with External Memory (BEEM), for computing
the probability of evidence on a class of large networks
for which exact computations had not previously been
made, and otherwise show that it is faster then some
of the best algorithms that trade space for time.

2

Background

In this section we present some necessary preliminaries
on graphical models and Bucket Elimination.

Definition 1. Graphical Model - A Graphical
model R is a 4-tuple R = hX, D, F, ‚äói, where:

1. X = {X1 , ..., Xn } is a set of variables;
2. D = {D1 , ..., Dn } is the set of their respective nite domains of values;
3. F = {f1 , ..., fr } is a set of real valued functions
dened over a subset of variables Si ‚äÜ X . The
scope of function fi , denoted scope(fi ), is its set
of arguments, Si ;
Q
P
4. ‚äói fi ‚àà { i fi , i fi , ./i fi } is a combination operator.
The graphical model represents the combination of all
its functions: ‚äóri=1 fi .
The primal graph of a graphical model associates a
node with each variable and connect any two nodes
whose variables appear in the same scope.
Definition 2. Induced Width - An ordered graph
is a pair (G, d), where G is an undirected graph and
d = X(1) , ..., X(n) is an ordering of the nodes (X(i)
means the ith node in the ordering). The width of a
node is the number of the node's neighbors that precede it in the ordering. The width of an ordering d is
the maximum width over all nodes. The induced width
of an ordered graph w? (d) is the width obtained when
nodes are processed from last to rst, such that when
node X(i) is processed, all of its preceding neighbors
(X(j) for j < i) are connected. The induced width
of a graph, w? , is the minimal induced width over all
possible orderings.
Bucket Elimination (BE) is a special case of clus-

ter tree elimination in which the tree-structure upon
which messages are passed is determined by the variable elimination order used [3]. In BE terminology,
the nodes of the tree-structure are referred to as buckets and each bucket is associated with a variable to be
eliminated. Each bucket contains a set of functions,
either the original functions (e.g. Conditional Probability Tables (CPTs) in a BN), or functions generated
by the algorithm. Each bucket is processed by BE in
two steps. First, all functions in the bucket are combined (by multiplication in the case of BNs ). Then
the variable associated with the bucket is eliminated
from the combined function (by summation in case of
Belief Updating in BNs). The function resulting from
the combination and elimination steps is then passed
to the parent of the current bucket. Processing occurs
in this fashion, from the leaves of the tree to the root,
one node (bucket) at a time as illustrated in Figure
1. It is important to note that the bucket-tree induces

a partial order on the variables in which child nodes
(variables) are processed prior to their parents.

Formal denitions of BE data-structures are given next
for completeness. A formal description of the BE algorithm is also presented in Figure 2.

Definition

3. Bucket Let Bx1 , ..., Bxn be a set of
buckets, one for each variable and let d be ordering of
these variables. Each bucket Bxi contains those functions in F whose latest variable in d is Xi .
Definition 4. Bucket Tree Let G?d be the induced
graph along an ordering d of a reasoning problem
whose primal graph is G. The vertices of the buckettree are the n buckets, which are denoted by their respective variables. Each vertex BX points to BY (or,
BY is the parent of BX ) if Y is the latest neighbor of
X that appear before X in G?d . The degree of bucket
B , denoted degB , is the number of neighbors of bucket
B in the bucket-tree.
Definition 5. Input-Output Functions Given a
directed bucket-tree T , for any bucket B , the output
function of B is the function that B sends to its parent, and the input functions of B are functions that B
receives from its children.

Figure 1: Illustration of BE for the query P (a|e = 0)
given ordering d = {A, C, B, E, D}. Bucket D is processed rst. The CPT P (d|a, b) is placed in bucket
D and a function fD (a, b) is generated and passed to
bucket B. Next bucket E is processed fE (b, c) is sent to
bucket B. Then bucket B is processed by multiplying
P (b|a), fD (a, b) and fE (b, c) and eliminating variable
B. Processing on the bucket tree continues in this manner until the query can be computed.

3

Bucket Elimination with External
Memory

Processing a bucket in a bucket-tree involves two operations: 1) Combining functions in the bucket; and
2) Eliminating the bucket's variable1 . In many problems, the function resulting from these operations is
too large to t into memory. For example, assume we
are computing a function fXp , by eliminating a variable Xp from a function h. Normal BE (as dened
in Figure 2) cannot operate if the function h does not
t into main memory in its entirety. Since computers
have orders of magnitude more disk space than main
memory, a straightforward modication of BE would
be to divide large tables (such as h) into blocks that
t into main memory and store these blocks to disk.
1
In the remainder of this paper, we assume that functions take a tabular form.

Algorithm Bucket Elimination for P(e)
A problem description P =< X, D, F >; evidence variables var(e); and an ordering of the variables
d = (X(1) , ..., X(n) ).
Output: Probability of Evidence p(e).
Input:

‚Ä¢ Initialize: Partition the functions in F into buckets
denoted BX1 , ..., BXn , where initially BXi contains all
input functions whose highest variable is Xi (ignore

instantiated variables).

During the algorithm's execution BXi = f1 , f2 , ..., fj
‚Ä¢ Backward: For p ‚Üê n downto 1, process BXi :
‚Ä¢ Generate the function Q
fXp by:
1) Combination: fp0 = f ‚ààBX f
p
P
2) Elimination: fXp = Xp fp0
‚Ä¢ Add fXp to the bucket of the largest-index variable
in the scope of fXp .
Q

‚Ä¢ Return: p(e) =

f ‚ààBX1

f

Figure 2: The Bucket Elimination Algorithm [3]
The function fXp can then be computed by loading required blocks from hard disk. In an extreme case, one
could compute fXp one entry at a time, each time loading the relevant entries of the input function h from
disk, while saving entries of fXp as they are computed.
The performance of this naive, entry by entry, algorithm would be extremely poor because:
‚Ä¢ While main memory has bandwidth (data transfer
rate) of a few GB/second, disk memory typically
has sequential transfer rate of 100 MB/second,
and much worse non-sequential transfer rate.
‚Ä¢ Main memory has 0 seek time (since it allows random access), while disk memory has a seek time
of about 10 ms.
As a result, this naive algorithm would spend most of
its time waiting for table entries to be loaded and then
saving them (i.e. in disk I/O), rather than performing
actual computations. The time spent on disk I/O has
a linear component that depends on block size and a
xed component given by the seek time. In most applications the xed component dominates, suggesting
that the primary goal in designing a disk-based adaptation of any algorithm is to minimize the number of
reads/writes from hard disk.
The challenge of minimizing disk reads/writes is further compounded in a multi-threaded environment.
Since individual entries of a function table are independent, function blocks can be processed in parallel.
Thus, while one thread is waiting for data to be loaded
from disk, other threads can carry out computation
on their assigned blocks. This parallelism oers the
potential for algorithmic speed-up, while at the same

time introducing a new scheduling challenge. Specically, one now has to schedule disk I/O so as to minimize the amount of time that each thread waits for
data to be loaded/saved.
In this paper, we address the two, potentially conicting goals of minimizing reads/writes and limiting
thread starvation, by decomposing the challenge into
two tasks: 1) Function table indexing; and 2) Blocksize computation. The block size computation task
involves dividing the function tables into blocks that
are as large as possible. The function table indexing
task involves arranging the entries within a table (and
block) so as to minimize the number of reads/writes
to disk. Both of these tasks must be addressed within
the constraints imposed by the bucket-tree. The following two subsections describe our approach to these
two design aspects.
3.1

Function Table Indexing

When processing a table, all of the table's entries are
ordered, assigned an index consistent with that order, and then processed one-by-one. For example, if
f (X1 , X2 ) is a table of ternary variables, the entries
are ordered as: < 0, 0 > (index 0), < 0, 1 > (index 1),
< 0, 2 > (index 2), < 1, 0 > (index 3), etc. The ordering of variables in the scope of a function thus dictates
where an entry is located within that function's table.
Since we are considering functions (i.e. fXp ) that are
broken into blocks because they do not t into memory,
the ordering of variables can also impact the number
of reads/writes to disk.
In the following section, we illustrate how the ordering
of variables within a scope can impact the performance
of our algorithm. We then show how some of these
ineciencies are remedied by the scope ordering imposed by the bucket-tree structure. Since processing a
bucket and generating its output function involves two
steps - combination and elimination - we analyze the
ordering constraints imposed by these two steps.
3.1.1

Ordering Constraints due to
Elimination

Assume we are computing a function f (X1 , X2 ), by
eliminating variable Y from the function h(Y, X2 , X1 )
(as shown in Figure 3). Furthermore, assume that we
are computing entry 1 (corresponding to value combination < 0, 1 >) of f . Since f (X1 = 0, X2 = 1) =
P
Y h(Y, X2 = 1, X1 = 0), we need entries 3, 12, 21
from table h (corresponding to argument combinations
< 0, 1, 0 >, < 1, 1, 0 >, < 2, 1, 0 >, respectively). As
mentioned in the previous section, data is loaded in
predetermined size blocks, each stored as a separate
le. If the blocks of h were only 8 entries in size,

to compute f (X1 = 0, X2 = 2) are at indices 6, 7, 8.
Under this ordering, no redundant loading/unloading
of blocks of h are required. The monotonicity of h
relative to f can thus be achieved by the following two
ordering constraints:
Proposition 1.

ing X ,

Let f be obtained from h by eliminat-

1. If X is the last variable in the scope of h, and
2. If the order of the remaining variables in the scope
of h agrees with the order of the variables in the
scope of f ,
then h is monotone relative to f .
Proof. The rst condition guarantees that the entries
Figure 3: Function Table Indexing Example
the required entries (3, 12, 21) would reside in dierent blocks and three block load operations would be
required. When processing the next entry of f (corresponding to value combination < 0, 2 >), we then
require entries 6, 15, 24, which also reside in dierent
blocks. Worse yet, since only one block per table is
kept in memory at a time, the blocks of h containing entries 6, 15, 24 were in memory when entry 1
of f was computed, but then unloaded to make room
for subsequent blocks. Thus, many unnecessary block
loads/unloads are performed due to the poor ordering
of variables in the scope. Our goal is to minimize the
number of times any block is loaded.
More generally, computing a function f by eliminating a variable from function h involves maintaining two
lists of table entries. First, we enumerate the entries
of f and then we identify the entries of h required by
each entry of f . A condition sucient to guarantee
that every block is loaded no more than once is that
the enumeration of entries of h be monotonically organized. This condition was not satised in the previous example, since to compute entries 1 and 2 of f we
needed entries 3, 12, 21 and 6, 15, 24 of h, respectively.

Definition

6 (monotone computation of h relative
to
f
)
. If f is obtained from h by eliminating X (f =
P
x h), we say that h is monotone relative to f i: 1.
the computation of a single entry of f requires only
consecutive entries of h, 2. the computation of successive entries in f requires successive collections of
consecutive entries in h.

Clearly the non-monotoncity stems from the fact that
the order of variables in the scopes of f and h do not
agree. By rearranging the scope of h to < X1 , X2 , Y >,
we can make the enumeration of h monotonic wrt f . In
particular, the entries of h needed to compute f (X1 =
0, X2 = 1) are at indices 3, 4, 5, and the entries needed

of the input function h needed for the computation
of any entry of the output function f are consecutive
in the table of h. The second condition ensures the
second requirement of monotonicity.
It turns out that the constraints for monotonicity can
be satised over all buckets, simultaneously. In fact,
the topological, partial ordering dictated by the bucket
tree (from leaves to root) can be shown to guarantee
monotonicity.

Given a directed bucket-tree T =
where V are the bucket variables and E are
the directed edges, any partial order along the tree and,
in particular the order of bucket-elimination execution,
yields monotonic processing of buckets relative to elimination.

Proposition 2.

(V, E),

Since the variables in the scope of each function correspond to nodes in the bucket-tree that have yet to be
processed, we can infer the following.

The partial order along the buckettree yields a strict ordering within each function scope.
Proposition 3.

Algorithm Scope Ordering takes as input a buckettree and orders the scopes of functions in all buckets, according to the topological ordering of the given
bucket-tree. It works by traversing the bucket tree
from the root in a breadth-rst manner and at each
bucket ordering the scopes of the input functions wrt
the bucket's output function.
3.1.2

Ordering Constraints due to
Combination

Our discussion thus far has focused on the elimination step. During the combination step, a new set of
ordering constraints are needed to ensure monotonicity. To illustrate, consider the following example. Assume we are computing a function f (X1 , X2 , X3 ), by
combining and eliminating variable Y from functions

h1 (X1 , X2 , Y ), h2 (X1 , X3 , Y ), h3 (X2 , X3 , Y ). Further
assume that the domain size of all variables is 3. From
the previous section, we know that Y must be the last
variable in the scope of the combined function. Thus,
when computing f (X1 = 1, X2 = 1, X3 = 2), we need
to access entries h2 (X1 = 1, X3 = 2, Y = 0, 1, 2),
corresponding to indices 15, 16 and 17 in table h2 .
The next entry of f (X1 = 1, X2 = 2, X3 = 0), requires entries h2 (X1 = 1, X3 = 0, Y = 0, 1, 2), corresponding to indices 9, 10 and 11. Finally, the entry f (X1 = 1, X2 = 2, X3 = 1) requires entries
h2 (X1 = 1, X3 = 1, Y = 0, 1, 2), corresponding to indices 12, 13 and 14. This enumeration of h2 is nonmontonic, even though it is consistent with the constraints imposed by elimination.
The problem occurs because the scope of f has a 'gap'
with respect to the scope of h2 . Specically, f has a
variable X2 between variables X1 and X3 that is not in
the scope of h2 . In this example, there is no ordering
of the variables that will avoid such a 'gap'. In many
situations, such gaps occur due to ordering constraints
imposed by the elimination order.2
3.2

Block Computation

As discussed earlier, we assume that all tables of intermediate functions are handled (i.e. loaded, computed, saved) as blocks. Clearly, loading/saving one
table entry at a time is inecient. Intuitively, then,
we should divide function tables into blocks that are
as large as possible. However, block size is limited
by several factors. First, our algorithm is operating
in a shared memory setup and each thread requires
memory to operate. In addition, processing a bucket
requires enough space in memory for the output function block and the blocks of each input function. Our
goal is thus to determine how to divide function tables
into blocks that minimize unutilized memory.
To simplify this problem we make the following design
assumptions:
1. We assume the original functions occupy little
space and can be stored in memory at all times; 3
2. We assume that each thread uses the same
amount of memory and that the memory allocated to a thread remains xed throughout the
algorithm's execution;
3. We assume that each bucket's output function table is broken into equally sized blocks; and
2

The removal of 'gaps' is untreated at this point and we
are currently exploring a variety of approaches for dealing
with this issue.
3
This assumption is for simplicity. The original function
could also be broken into blocks and stored on the disk.

4. When computing a block of an output function,
a thread requires enough space in memory for the
output function block and the necessary blocks
from each input P
function.
Q That is, to compute a
block of fXp = Xp f ‚ààBX f , we assume that
p
the needed blocks of f ‚àà BXp are in memory.
The rst two assumptions imply that the amount of
memory available to each thread, denoted by M pt, is
M pt = (M ‚àí O)/m, where M is the total memory
available, O is the memory occupied by the original
functions and m is the number of threads. It is worth
noting that the third design restriction does not imply
that all block sizes are the same size.
Under the above design restrictions, a workable and
simple upper bound on block size of all the functions
residing in a bucket BX is M pt/degBX - i.e. allocate
the memory equally among the output function of a
block and the output functions of its children in the
bucket tree. Since each block is used twice - once as
an output block and once as input block - and the
degree of the buckets operating on a block may (and
most likely will) be dierent, we need to coordinate
this upper-bound between adjacent buckets.
To illustrate this issue, consider the function fu sent
by bucket u to bucket v in Figure 4. When function
fu is computed, its bucket imposes an upper bound on
its block size as M pt/3, since its degree is 3. However,
when fu is used by parent bucket, v , its block size
is bounded by M pt/6, since bucket v 's degree is 6.
Therefore, setting the block size of fu to M pt/3 equally
among all the bucket's function block would violate the
fourth design restriction when bucket v is processed.
The limitations on block sizes can be captured more
formally by the following set of simultaneous constraints. Given a bucket tree and the root node of
the bucket tree, the block size of each bucket must
satisfy
X
M pt = i + bi +
bj for each bucket i (1)
j‚ààC(Xi )

where bi is the block size for bucket i, C(Xi ) is the set
of children of bucket i and i is the unutilized space in
the computation of blocks for bucket i.
With the block size constraints in place, the problem
of minimizing the amount of unutilized memory can
be formalized as

{b?1 , ..., b?n } = arg min{b1 ,...,bn }

n
X
i=1

s.t. Eqn.1,

bi ‚â• 0,

i ‚â• 0, ‚àÄi

i

(2)

Algorithm Block Size Computation
A bucket tree, with buckets BXi , ...BXn
along ordering d.
Output: A set of block sizes, denoted bi , for each
output function fXi of bucket BXi .
Input:

‚Ä¢ Do i = 1 to n, in decreasing order of degree in the

Figure 4: Block Size Computation for Function fu

bucket-tree:

1. Let BX ‚Üê Bi ; let I be the indices of child variables
of X in the bucket-tree whose block size was not yet
determined and J those indices whose block size was
already determined.

where M pt in Eqn.1 is a constant and the children of
each node are governed by the underlying bucket-tree
structure.
Eqn. 2 is a standard constraint satisfaction problem.
In Figure 5 we provide a greedy algorithm that provides a feasible, though possibly suboptimal, solution
to this problem. The algorithm computes block sizes
starting with the buckets of highest degree (since they
are the most constrained) and continues processing
buckets in decreasing order of degree. At each bucket
the remaining memory (i.e. the memory not already
allocated to functions in that bucket) is divided equally
between the undetermined functions in that bucket.
Proposition 4. The complexity of the Block Size
Computation algorithm is O(n ¬∑ log(n)), where n is the
number of variables.

It is worth noting that many dierent block sizes can
satisfy the constraints in Eqn.1 depending on which
variable is chosen as the root of the tree. This is why
we require the bucket-tree structure to be xed in advance. It is also worth noting that bi , the block size
for bucket i, is not a continuous variable; rather it is
some multiple of the operating system's cluster size.
However, in practice we have found this relaxation to
be non-problematic.
3.3

The BEEM Algorithm

We have developed a new algorithm, called BEEM,
that incorporates the design ideas and algorithms presented in this section. The basic outline of the BEEM
algorithm is given in Figure 6.
There is a 1-to-1 mapping between blocks and les. A
le name is a concatenation of the bucket's variable
(that generated the function that the block belongs
to) and the block index (wrt the function table). For
example, if the function generated by bucket BX is
split into 5 blocks, the 5 les that contain the data will
be named "X-1", "X-2", "X-3", "X-4", "X-5". When
a particular block is needed, the program looks for and
loads/saves a le with the appropriate name. A block
is an array of double-precision oating-point numbers,
and entire block/le can be loaded/saved with a single
command.

2. For each undetermined function fXj for j ‚àà I compute its block size as
P
bj ‚Üê

M pt ‚àí

k‚ààJ

bk

degBX ‚àí |I|

Figure 5: Algorithm for computing block size
A basic step of the algorithm is computing a function
table block. First we pick the block to compute, from
an eligible bucket (Computation.1 ). A block is computed by enumerating all entries as described in Computation.2. In particular, we determine the indices of
the entries in each input table and output table as described in the Function Table Indexing section. Based
on these indices, we can then determine which block
from each input table is needed to carry out the computation.
Our scope ordering heuristic guarantees that, for any
function f (X1 , ..., Xk , Y ), where Y is the variable being eliminated, given any assignment of values to
X1 , ..., Xk , all entries of the table corresponding to
all dierent assignments to Y reside within the same
block. This implies that when a thread computes an
entry in the table of a bucket's output function, it
needs exactly one block from each of the input tables
(see Computation.2.d ).

Algorithm BEEM, given in Figure 6,
is correct in terms of computing
P (e). It performs the
‚àó
same amount of work, O(n¬∑kw ), as regular BE, where
n is the number of variables, k is variable domain size
and w‚àó is the induced width.
Proposition 5.

4

Experimental Evaluation

To evaluate the BEEM algorithm, we compared its
performance with that of two other algorithms on computing the probability of evidence on probabilistic networks (Bayesian and Markov). In our comparison, we
used a set of problems (called linkage/pedigree problems) derived from genetics. These problems were used

Algorithm BEEM for P(e)
A problem description P =< X, D, F >;
variables var(e); A variable ordering
d = (X1 , ..., Xn ) and its corresponding bucket-tree,
T = (X, E). The number of threads m and main
memory size M .
Input:

Evidence

Output:

P(e).

In the following, let
‚Ä¢ fX be the function computed by bucket BX , (X, i)
denote block i of fX and s(X,i) (e(X,i) ) be the index
of the rst (last) element in block (X, i),
‚Ä¢ nbX denote the number of blocks in fX and ncX denote the number of blocks in fX that are computed,
‚Ä¢ rl(X,i) be the list of threads using block (X, i).
Whenever a thread is removed from rl(X,i) and
rl(X,i) = ‚àÖ as a result, block (X, i) will be deleted.
Also, whenever a thread is added to rl(X,i) and
rl(X,i) = ‚àÖ before, block (X, i) will be loaded, from
a disk le named "X -i".
‚Ä¢ Preprocessing:

1. Order the variables in the scope of each function as
guided by the bucket-tree.
2. Compute table block sizes nbX using Algorithm in
Fig 5. This determines values s(X,i) , e(X,i) .
3. Initialize: set all ncX = 0, rl(X,i) = ‚àÖ.
‚Ä¢ Computation: in parallel, on m threads, execute,

1. Select a block to compute, from a bucket that has
no non-computed children, resulting in a bottom-up
computation order:
Let BY be a bucket in the bucket tree such that
ncY < nbY and for ‚àÄj ‚àà C(Y ), ncj = nbj , and i
be index of a block in fY not yet computed. Set
ncY = ncY + 1; mark (X, i) as being computed.
2. Enumerate all entries of block (X, i):
for k = s(Y,i) to e(Y,i) ,
(a) Let A be the assignment of values to arguments
of fY corresponding to k.
(b) ‚àÄj ‚àà C(Y ), let ij,k be the index of the block, in
fj , corresponding to assignment A ‚à™ {Y = 0},
(c) if ‚àÉj, ij,k 6= ij,k‚àí1 (meaning a current block
held in memory for this child is changing),
i. remove this thread from rl(j,ij,k‚àí1 ) ,
ii. add this thread to rl(j,ij,k ) .
(d) compute entry k of block (Y, i) using the
product-sum rule and input blocks (j, ij,k ).
3. save block (Y, i) to a disk le named "Y -i".
‚Ä¢ Return: P(e) computed at root of the bucket-tree.

Figure 6: The BEEM algorithm for P(e)

in the solver competition held at the UAI-2008 conference4 . Many of these problems were not solved in that
competition and, in addition, we also consider a class
of problems - type 4 linkage - with high induced width
and large numbers of variables.
The two algorithms we used for comparison were: 1)
VEC (Variable Elimination and Conditioning) [3]; and
ACE[1]. Both VEC and ACE participated in the UAI2008 solver competition. In their class (exact solvers
for probabilistic networks, solving the P(e) problem)
VEC/ACE were the two best solvers at the UAI-2008
competition, so a comparison with them seems warranted. A brief description of these algorithms follows
in the next section.
Our experiments were carried out on a PC with an Intel quad-core processor, using 4 X 2TB hard disks in
RAID-5 conguration (a total of 6TB of disk space).
BEEM was congured so that m = 4 worker threads.
As a space-saving measure, we deleted all input functions to a bucket after its output function was computed. All algorithms were given 1GB of RAM (main)
memory and both VEC and BEEM were given the
same variable orderings.
4.1

VEC

VEC is an algorithm that uses conditioning to produce
sub-problems with induced widths small enough to be
solved by an elimination algorithm5 . A basic outline
of VEC is as follows:

‚Ä¢ As a pre-processing step, VEC reduces variable
domains by converting all 0-probabilities to a SAT
problem F and checks for each assignment X = a
whether (F and X = a) is consistent. Inconsistent
assignments are pruned from the domain of X .
‚Ä¢ Repeatedly, remove conditioning variables from
the problem until the remaining problem ts
within 1GB of main memory.
‚Ä¢ Enumerate all value combinations of the conditioning variables. For each assignment, solve
the remaining problem using variable elimination. Combine conditioned subproblem solutions
to yield a solution to the entire problem.
4.2

ACE

ACE is a software package for performing exact inference on Bayesian networks developed in the Au4

For a report on the results of the competition, see
http://graphmod.ics.uci.edu/uai08/Evaluation/Report.
5
see http://graphmod.ics.uci.edu/group/Software for
more detail on VEC

tomated Reasoning Group at UCLA6 . ACE operates by compiling a Bayesian network into an Arithmetic Circuit (AC) and then using this AC to execute
queries. Compiling into an AC occurs by rst encoding
the Bayesian network into Conjunctive Normal Form
(CNF) and then extracting the AC from the factored
CNF [1]. Encoding a network in this way eciently
exploits determinism, allowing ACE to answer queries
on large networks in the UAI-08 solver competition.
4.3

Results

Preliminary results from running the three algorithms
on a single class of problems are shown in Tables 1 and
2. In these tables N indicates the number of variables,
w? is an upper bound on the induced width (determined experimentally using several min-ll orderings)
and K is the maximum domain size. The run time
is presented in hh:mm:ss format and '>24 h' indicates
the algorithm failed to compute p(e) in 24 hours, while
'OOM' indicates the algorithm exceeded the allotted
1 GB of RAM.
Table 1 contains results on pedigree problems with a
few hundred to a thousand variables. Table 2 contains results from a set of problems with several thousand variables. On both sets of problems, we observe
a few interesting phenomena. First, if a problem has
w? small enough that the problem ts into memory, all
three algorithms compute p(e) very rapidly. In such
situations, VEC and ACE may actually outperform
BEEM because of the overhead associated with multithreading. However, only BEEM and VEC are capable
of solving problems that do not t into RAM. In such
situations, we see that the cost associated with reading and writing to hard disk is far less than the cost
of conditioning. Finally, BEEM successfully computed
p(E) for problems 7, 9, 13, 31, 34, 41, 50 and 51 for
which an exact solution is not known.

5

Conclusions

We proposed an extension of the Bucket Elimination
algorithm that utilizes external disk space for storing
intermediate function tables. Extending the BE algorithm in this manner and also parallelizing computation is a non-trivial matter. In this paper we identied and addressed a number of key issues, including
the decomposition of functions into appropriately sized
blocks and processing to minimize access to hard disk.
While the performance of our algorithm is not fully optimized, it has shown very promising results on a class
of large probabilistic networks. The algorithm demonstrates improved scalability, allowing exact computa6

http://reasoning.cs.ucla.edu/

tion of p(e) on problems not before solved by a generalpurpose algorithm. To better understand its performance, we plan to run BEEM on several additional
classes of problems. In addition to further improving
the table decomposition and computation schemes, we
also plan to extend BEEM for belief updating on variables other than the root and to handle more general
tree decompositions. As illustrated in this paper, such
modications will inevitably impact the way in which
tables are decomposed and processed.
Acknowledgements

This work was supported in part by the NSF under
award number IIS-0713118 and by the NIH grant R01HG004175-02.

