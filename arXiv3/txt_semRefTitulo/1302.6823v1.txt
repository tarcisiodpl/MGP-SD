

•

The paper deals with optimality issues in con­

these labels are called separators (see Figure la);

nection with updating beliefs in networks. We
address two processes: triangulation and con­
struction of junction trees. In the first part,

•

network.

In the second part, we argue that

any exact method based on local calculations
must either be less efficient than the junction
tree method, or it has an optimality problem
equivalent to that of triangulation.

1

attaching a pote ntial to all separators (initially

the neutral potential consisting of ones);

we give a simple algorithm for constructing
an optimal junction tree from a triangulated

giving all links in the junction tree a label con­
sisting of the intersection of the adjacent nodes;

•

letting the nodes communicate via the separa­
tors:

a message from U to V with separator S

has the form that <Pu is marginalized down to S,
resulting in ¢5; <Psis placed on the separator and
¢'(S)/¢(S) is multiplied on ¢v (see Figure 1b).

INTRODUCTION

The junction tree propagation method (Jensen et al.,
1990; Lauritzen and Spiegelhalter, 1988) is designed
for propagation in Markov networks:
•

cjl'(S)!cjl(S)

cjl'(S)

an undirected graph with discrete variables as
nodes;

•

for each clique

U

in the graph there is a poten­

tial <Pu, which is a non-vanishing function from
the set of configurations of

U

to the set of non­

negative reals.

{a)

The compilation part of the method is to
•

FIGURE 1.

triangulate the graph (i.e., add extra links such
that every cycle of length greater than three has
a chord);

•

construct

(a) A junction tree. (b) Message passing in junction
trees.
It is so, that after a finite number of message passes

form a potential <Pu for each c lique

U

of the tri­

angulated graph;
•

(b)

a

junction tree over the cliques.

A junction tree over the cliques is characterized by the

so-called junction tree property: For each pair U, V
of cliques with intersection S, all cliques on the path
between U and

V containS.

The propagation part of the method consists of

between neighbours in the junction tree, each po­
tential in the junction tree holds the (possibly non­
normalized) marginal of the joint probability distribu­
tion for the entire set of variables. In fact, the message
passing can be organized so that it is sufficient with
exactly one pass in each direction of the links in the
junction tree. Therefore, in complexity considerations
for propagation in junction trees, one can associate a
local measure

C(U, V) to

links

(U, V),

where

C(U, V)

indicates time/space consumption for the two passes.

361

Optimal Junction Trees

The compilation is not deterministic. Markov net­
works may have several different triangulations yield­
ing different sets of cliques, and a triangulated network
may have several different junction trees. We therefore
would like to have algorithms yielding optimal trian­
gulations and optimal junction trees with respect to
complexity. However, the optimality problem for tri­
angulations isN'J'-complete (Arnborg et al., 1987).
In the first part of the paper, we address the optimal­
ity problem for junction trees given the triangulated
graph, and we present a simple algorithm which is
quadratic in the number of cliques.
In the last section, we address the triangulation pro­
cess and ask the question whether it may be possible
to come up with a propagation method which does not
contain anN'J'-hard optimality problem. The answer
is discouraging. We show that any local calculation
method must involve a hidden triangulation, and we
use this to conclude that the method is either less ef­
ficient than the junction tree method, or it has an
N'J'-hard optimality problem.
2

JUNCTION TREES AND
MAXIMAL SPANNING TREES

Throughout the remainder of the paper, we consider a

triangulated connected graph G with clique set e. The
cliques of G are denoted b.I the letters U, V, W, ll1,
etc. We shall not distinguish between a clique and
its set of variables. So we talk of the intersection of
cliques meaning the set of variables common to the
cliques. Intersections are denoted by letters R,S, R1,
etc.
Definition 1 The junction graph for G has e as nodes,
and for each pair U, V of cliques with nonempty inter­
section R there is a link with label R. Each link has a
weight which is the number of variables in the label.
Theorem 1 A spanning tree for the junction graph
of G is a junction tree if �nd only if it is a spanning
tree of maximal weight.

Theorem 1 has been proved independently by Shibata
{1988) and Jensen (1988). Here we will give a proof
much simpler than the o:tiginal ones. Before giving the
proof, we shall recall two algorithms for the construc­
tion of maximal spanning trees.

.

.

®-0--cb
FIGURE 2.

Paths in T and T1•

Prim's algorithm constructs a sequence To �
� Tn.
of maximal spanning trees for the subgraph deter­
mined byN.
· ·

·

Algorithm 2 (Kruskal)

Choose successively a link of maximal weight not pro­
ducing a cycle.
Kruskal's algorithm works with a forest of partial max­
imal weight spanning trees. Whenever a link is cho­
sen, two partial trees are connected into a new partial
spanning tree of maximal weight.
Both algorithms result in maximal weight spanning
trees, and each maximal weight spanning tree can
be constructed through any of the two algorithms.
[Proofs can be found in many textbooks on graph
algorithms, e.g., (Goudran and Minoux, 1984) and
(McHugh, 1990)].
Proof of Theorem 1:
Let T be a spanning tree of
maximal weight. Let it be constructed by Prim's al­
gorithm such that T1 �
� Tn =T is a sequence of
partial maximal weight spanning trees.
· ·

·

Assume that T is not a junction tree. Then, at some
stage m, we have that Tm. can be extended to a junc­
tion tree T1 while Tm.+1 cannot. Let (U, V) with la­
belS be the link chosen at this stage; V E Tm.+ 1 (see
Figure 2).
Since Tm.+ 1 cannot be extended to a junction tree, the
link (U, V) is not a link in T1• So, there is a path in T1
between U and V not containing (U, V). This path
must contain a link (U1, V') with labelS' such that
U 1 E T m. and V1 (j_ Tm. (see Figure 2).
Since T 1 is a junction tree, we must haveS �S1, and
sinceS was chosen through Prim's algorithm at this
stage, we also have S
l I;::: 1511. Hence, S =51•

Algorithm 1 (Prim)
(1) Put N {U}, where U is an arbitrary node.

Now, remove the link (U1, V1) from T' and add the
link (U, V). The result is a junction tree extending
Tm.+ 1, contradicting the assumption that it cannot be
extended to a junction tree.

(2) Choose successively a link (W, V) of maximal
weight such that W E N and V (j_ N, and add V
toN.

Next, let T be any non maximal spanning tree. We
shall prove that T is not a junction tree. Again, let
T1 �
� T 1 be a sequence of maximal trees con-

=

-

•

·

·

362

Jensen and Jensen

FIGURE 3. The thinning task at stage

i+ 1

in Kruskal's algorithm.

structed through Prim's algorithm. Let the construc­

trees of maximal weight. Note that any thinning at a

tion be so that a link from

given stage will result in the same connected compo­

ble. Let

m

T is chosen whenever possi­

be the first stage where this is not possible,

and let

(U, V} with separator S be the link actually
chosen (U E Tm• V � Tm). In T there is a path be­
tween U and V. As in the first part of the proof, we
have that this path contains a link [U 1, V 1) with la­
belS' such that U' E Tm and V' � Tm (see Figure 2).
Since (U' , V') could not be chosen, we have S
I 'I < S
l I,
and thereforeS contains variables not inS '. Hence, T
does not satisfy the junction tree condition.

3

1

OPTIMAl JUNCTION TREES

W henever the junction graph has several spanning
trees of maximal weight, there are accordingly several
junction trees. Assume that there is a real-valued mea­

sure on junction trees yielding a priority among them,
and assume that this measure can be decomposed to
a local measure

C(U, V}

call the measure a

cost.

attached to the links.

We

We may also assume that

the entire measure is strictly increasing in the local
measures, and that an optimal junction tree is one of
minimal cost.

nents, and therefore the thinning chosen has no impact
on the next stage.

Hence, if we in the construction

have a secondary priority (cost, say), we can perform
the thinning by using Kruskal's algorithm according
to cost. In this way we will end up with a maximal
weight spanning tree of minimal cost (see Figure

3).

We conclude these considerations with

Theorem

2 Any minimal cost juncti on tree can be
constructed by successively choosing a link of max­
imal weight not introducing cycles, and if several
links may be chosen then a link of minimal cost is
selected.

A proof of Theorem
stages.

2

is an induction proof over the

The induction hypothesis is that at the end

of each stage, the forest consists of partial maximal
distance junction trees.

Remark 1

An analoguous algorithm based on Prim's

algorithm will also construct minimal cost junction
trees.

Let us take a closer look at the construction of junction
trees through Kruskal's algorithm. Let w, , ... , Wn be
the different weights of

G in

decreasing order. The al­

gorithm can be considered as running through n stages

Corollary 1 All juncti on trees over the same triangu­
lated graph have the same separators (also counting
multiplicity).

characterized by the weight of the links chosen. At the
end of stage

i,

all links possible of weight w,

have been chosen, and a forest

T},

. .

.

, T�,

,

... , Wi

of partial

Proof:

Consider stage i+ 1 (Figure

3).

A cycle can be

broken by removing any link of weight Wi+ 1· If

(U, V)

maximal weight spanning trees has been constructed.

with separatorS is removed, then all separators in the

Now, the task at stage

remaining paths between

i+ 1

can be considered in the fol­

lowing way. Add all links of weight Wi+ 1 to the forest,

and break the cycles by removing links of weight Wi+ 1 .

Any thinning will result in a forest of partial spanning

U

and

V

must contain S.

This means that any separator of weight Wi+ 1 on these
paths must equalS. By thinning we therefore remove
the same separators.

1

Optimal Junction Trees

•

363

For each separator, establish links to all cliques
and separators containing it.

•

For each separator (with multiplicity n), choose
n+ 1 links to supersets without introducing cycles.

Theorem 3 Any minimal cost Almond tree can be
constructed by successively choosing links for sepa­
rators of maximal weight, and if several links may
be chosen, take one of minimal complexity.

A proof of Theorem

(b)

(a)

3 is

an induction proof along the

same line as a proof of Theorem

2.

FIGURE 4.

(a) Contraction of the junction tree from Figure 1.

THE NECESSITY OF TRIANGULATION

(b) An Almond tree.

5

4

for constructing optimal junction trees given the tri­

In the former sections we gave an efficient algorithm

ALMOND TREES

angulated graph. Thereby all steps from DAG to junc­

Almond and Kong

(1993) suggest another type of junc­

tion tree. Compared to the junction trees in (Jensen
et al.,

1990),

they give some reduction in computa­

tional complexity.

tion tree is covered by efficient algorithms yielding an
optimal output-except for the triangulation. Since
this problem is N:P-complete, we cannot hope for an
efficient algorithm yielding an optimal triangulation.
It appears that a one-step look-ahead heuristic pro­

Observation 1 If n links have the same separator, the

vides the best triangulations. An alternative propaga­

communication scheme can be contracted (Figure 4a).

tion scheme is conditioning (Pearl,

1988).

The N:P­

complete part of conditioning is the determination of
In junction trees, each separator holds exactly one po­

a cut set for the DAG, and Becker and Geiger

tential table where the marginal last communicated

have given an algorithm which guarantees a cut set

is stored.

space no larger than the square of the space for an

In contracted junction trees, a separator

with n neighbours must hold at least n

-

1

potential

optimal cut set. Other schemes exist, like, e.g., arc­

1990); however, as has been shown
(1991), all known methods do in fact

tables to store marginals communicated from neigh­

reversal (Shachter,

bours. This means that there is no saving in space.

by Shachter et al.

There is, however, a saving in time, since a number of

contain a hidden triangulation.

marginalizations are avoided.

(1994)

Since belief updating in Bayesian networks is N'.P-hard

Observation 2 If a separator is a subset of another sep­

arator, they can be linked (Figure

4b).

(Cooper,

1990),

there is not much hope of finding a

scheme avoiding an N::P-hard step. However, Cooper's
result does not yield that any scheme will contain such
a step.

Cooper showed that through belief updat­

The type of calculations are the same for links between

ing, the satisfiability problem for propositional calcu­

separators as for links between separators and cliques.

lus

can

be solved, but it may still be so that a search

S,

for an optimal structure for belief updating is poly­

the number of supersets to which it shall be linked,
and for each link (S, S'}, we can associate a local cost

nomially solvable. Note namely that the space of the

Due to the corollary, we know for each separator

C(S, S').

Also, new schemes are proposed (Zhang and Poole,

Junction trees simplified through these two observa­
tions we call

cliques are exponential in their presentation.

Almond trees.

The construction of an

Almond tree may go as follows:

1992)

which may seem as if they avoid the triangula­

tion problem. We will in this section argue that

any

scheme for belief updating- meeting certain require­
ments- will contain a hidden triangulation. Then, if

•

From the triangulated graph, the set of cliques

the complexity ordering of the hidden triangulations

and the set of separators (including multiplicity)

follows the ordering in the original scheme, we can con­

This can be done through elim­

dude that if the scheme has a polynomially solvable

ination in the triangulated graph, but it is not

optimality problem, then the junction tree method ei­

important for our considerations.

ther provides more efficient solutions or '.P

is established.

=

N::P.

364

Jensen and Jensen

The considerations to come are somewhat specula­
tive and at places they need further precision. Hence,
we call the results 'statements' rather than theorems.
However, a reader looking for alternative propagation
methods can use them as guidelines preventing inves­
tigations of several alternatives.
FIGURE 5.

Specifications

A graph representing a general propagation task.

U {A, . . . , B} is a universe consisting of a finite set
of discrete variables. The joint probability P(U} is a
distribution over the configurations Xu =Ax · · · x B.
=

A local representation of P(U) consists of a set
{P(U,), ... , P(Un)}, where U, . . . , lin is a covering
of U, and P(U;,} is the marginal distribution of Ui.
A local representation can be visualized by a graph G
with the variables as nodes and with a link between
two variables if there is a Ui containing both; G is
called the representing graph.
The propagation task can be formulated as follows.
Let P 1(Ui) be substituted forP(Uil; ifP1(U} P(U} x
P1(Ui)/P(Ui) is well-defined, then calculate the new
marginals P1(U,), ... , P'(Unl·
=

By a scene for a propagation task, we understand a
universe U together with a covering U1, ... , lin such
that the covering equals the cliques in the representing
graphs. An instance of a propagation task is a pair
(G, P), where G is an undirected graph, and P is a set
of marginals of a joint distribution P(U) to the cliques
of G.
Let U be a universe. By a local method on U, we un­
derstand an algorithm working only on subsets of U.
More precisely: The algorithm consists of a control
structure and a fixed set Pr1, ... , Pr = of proce­
dures such that each Pri only processes information
on Vi c; U. We call Vi the scope of Pri. The repre­
senting graph G1 for a local method is defined as the
graph with U as nodes, and with links between vari­
ables if there is a scope containing them. Notice that
the cliques of G 1 need not be scopes.
We have defined a local method such that the control
structure mainly consists of controlling message pass­
ing between procedures. Note that between Pr;. and
Pri only information on Vi n Vi is worth passing.

First, we shall transform the problem to propositional
calculus.
Lemma 1 Let P(U,), ... , P(Uml be projections of
the joint probability table P(U). Let Pos(U} be the
table of possible configurations of U:

Pos(u} =

{�

if P(u) > 0
otherwise

{�

if P (ud > 0
otherwise

Define Pos(U;.) as:
Pos(u;,}

=

Then Pos(Ui} 1 if and only if Ui is a projection
of a possible configuration.
=

Proof: Since P(U;.) is the marginal of P(U), we have
that P(u;,} > 0 if and only if ut is the projection of at
least one configuration with positive probability.
1
The lemma shows that any scheme for belief updating
has the calculus of possible configurations in proposi­
tional calculus as a special case. So, if we can prove
Statement 1 for this calculus, we are done.
We shall start with an example which is the corner­
stone of the proof.
Example 1 Let the graph in Figure 5 represent a gen­
eral propagation task over the propositional calculus,
and let Pas be the potential giving 1 for possible con­
figurations and 0 for impossible ones.

Let PrAs, PrAc, Prsn, Prnc be procedures for solv­
ing the task {the index indicates the scope, see Fig­
ure 6).

A general local belief updating method for a scene
represented by G is a local method solving the propa­
gation task for each instance (G, P}.

We shall construct an instance which cannot be solved
by the procedures. For each variable we only use the
first two states. This means that all other states are
impossible.

We aim at the following:

Initially, we have for i, j ::; 2

Statement 1

Let G represent a scene, and let a gen­
eral local belief updating method be represented by
the graph G 1• Then G1 contains a triangulation
of G.

Pas( at, bj) 1
Pas(Ut, Cj ) 1
Pos(bi, dj) 1
Pos(ci,dj)=l
=

=

=

for all i, j
if and only if i
if and only if i
for all i, j

=

=

j
j

Optimal Junction Trees

365

Proof of Statement 1:
Assume that G 1 does not
contain a triangulation of G. Then there is a cycle C
in G such that the subgraph of G 1 consisting of the
nodes in C is not triangulated. Let C' be a chordless
cycle of length greater than three in that subgraph.
Let A 1 , ... , An be the nodes of C'.

FIGURE 6.

The scopes for the procedures and the communication
channels.
That is, A and C as well as B and D are forced into
the same state, and everything else is possible. Note
that the Pas-relations above are projections of the Pas­
relation over the universe:

if and only if
Pos ( U>. bi}

=

Pos ( ai, ck}
=

Pos(bj, df)

=

Pos(ck, de)

=

1

Now, assume we get the information that the config­
urations (a1, b2) and (a2, b1) are impossible. This is
equivalent to replacing the relation Pos(ai, bj) by
Pos1(ai, bj)

=

1

if and only if

i

=

j

(and i,j � 2).

Now, the propagation task is to determine Pos' (A, C),
Pos ' (B , D), and Pos ' (C, D) such that these local rela­
tions are projections of the unique universal relation
Pos'(A, B, C, D), satisfying the relations Pos'(A, B),
Pos(A, C), Pos(B, D), and Pos(C, D).
Clearly, Pos'(ai,bi>ck,dt)
l if and only if i
j
e, and therefore Pos'(ck.de)
l if and only
=

k

=

k=€.

=

=

=

if

The tool for achieving this result is the set PrA s ,
PrAc, Prso, and Prco of procedures. Since PrAB can
only process information on the variables A and B, and
PrAc can only process information on A and C, then
the only valuable information to communicate be­
tween the two procedures is information on A (see Fig­
ure 6). That is, between Pr1 and Prz with scopes V1
and V2, respectively, only information on V 1 n V2 need
to be communicated. The new relation Pos'(A, B) in­
troduces a constraint between the state of A and the
state of B, but since only information on A alone and
B alone can be communicated, the constraint cannot
be communicated to Prc0.
Note that if a cycle contains more than 4 variables, the
construction can be extended by clamping the states
of further intermediate variables.

We now can construct an instantiation, which cannot
be propagated correctly: (1) Let a configuration be
possible if and only if its projection to A1 x · · · x An
is possible. (2) Perform the construction as shown in
the example.
1
By the proof of Statement 1, we see that it can be
generalized to systems with other uncertainty calculi
like, e.g., Dempster-Shafer belief functions or fuzzy
systems. In fact, the reasoning can be applied to any
calculus having propositional calculus as a special case.
An axiomatization of these possible calculi is outside
the scope of this paper, but the axioms in (Shenoy and
Shafer, 1990) form a good starting point.
Concerning complexity we still have a couple of loose
ends. Although a general scheme involves a hidden tri­
angulation, the computational complexity needs not
be of the same kind as for the junction tree scheme.
In the junction tree scheme the complexity is propor­
tional to the number of configurations in the cliques.
Therefore a general local scheme has an equivalent
computational complexity if it is proportional to the
number of configurations in the scopes. This is the
case if each configuration has an impact on the mes­
sages sent in the algorithm. In this paper we shall not
give sufficient conditions for this to hold.
The second loose end has to do with optimality. A gen­
eral scheme is, e.g., to work with P(U) only. This cor­
responds to working with the complete graph over U.
This scheme has a trivial optimality problem, but the
junction tree method can do much better even for sub­
optimal triangulations. Therefore we conclude:

Statement 2 If a general local propagation scheme
has a complexity at least proportional to the num­
ber of configurations in the scopes, and its opti­
mality problem can be solved in polynomial time,
then either the junction tree scheme can do better
or 'J' = N'J'.

Acknowledgements
The work is part of the ODIN-project at Aalborg Uni­
versity, and we thank our colleagues in the group for
inspiring discussions.
The work is partially funded by the Danish Research
Councils through the PIFT-programme.

366

Jensen and Jensen

