

solve the problem. The methods are characterized

This paper focuses on managing the cost of de­
liberation before action.

In many problems, the

cost and the resource consumption of the delib­
eration phase cannot be ignored, and the overall
quality of the solution reflects the costs incurred
and the resources consumed in deliberation as well
as the cost and benefit of execution.

A feasible

strategy that minimizes the total cost is termed

computationally-optimal.

a number of independent,

by uncertain cost and resource consumption, and are
The selection

sequentially selected and evaluated.

process is performed by a strategy that determines
the next method to be evaluated based on the meth­
ods selected so far as well as the results of previous
After a sequence of methods is com­

evaluations .

puted, the strategy halts the process at which point
the best solution found so far is executed.

For a situation where

Our goal is essentially to formalize the tradeoff

uninterruptible meth­

between the costs of deliberation and the benefit

ods are available to solve the problem, we develop

of immediate action by developing a family of algo­

I

a pseudopolynomial-time algorithm to construct

rithms to construct generate-and-test strategies that

generate-and-test computationally-optimal strate­

are optimal with respect to expected global cost and

Stochastic Dynamic Programming is used to

have limited resource consumption in the delibera­

I

and the results address problems occurring in auto­

I
I

gies.

solve the problem that is shown to be NP-complete

tion phase. Such a feasible strategy that minimizes

the total cost is termed

matic emergency-response systems, design automa­

computationally-optimal.

The approach is characterized by explicit mod­

tion, query optimization, destructive testing, and

eling of the cost and resource consumption uncer­

other areas characterized by significant computa­

tainties inherent in the problem-solving process and

tional costs or limited deliberation resources.

methods from Stochastic Dynamic Programming [9].

1

We construct computationally-optimal K-bound (in­

Introduction

voking at most K methods) and oo-bound on-line

This paper focuses on managing the cost of deliber­

control strategies for uninterruptible, independent

ation before action. In many problems the cost and

solution methods. The problem is shown to be NP­

the resource consumption of the deliberation phase

complete and the resulting strategies are adaptive to

I

cannot be ignored, and the overall quality of the so­

unpredictable external changes in cost and resource

lution reflects the costs incurred and the resources

availability.

I

efit of execution.

I

consumed in deliberation as well as the cost and ben­
We consider the situation where a number of in­
dependent, uninterruptible methods are available to
•supported

by

Rockwell

International

No. 837. Net address: einav@rpal.oom.

under

IR&D

t Supported in part by a grant from Rockwell International

Science Center. Net address: fehl ing@b ayes.stanford.edu.

I
I

There

are

methods

out

Stochastic
a

MK possible ways
M independent

of

Dynamic

O(KV 2logV) space,
time, where D is the

we

develop

algorithm

and running in

f{

Using

Programming,

pseudopolynomial-time

select

to
ones.

consuming

O(KMV2 D2)

maximum number of values in

cost or resource consumption distributions and V is
the largest number between an alternative cost, a

74

method that is simulated.

limit on resource consumption, and K.
In some situations there are many applicable so­

I

We assume that these

simulations are computationally intensive and must

lution methods. Some of them may be optimal, oth­

be performed sequentially, and that due to some ran­

ers may be of approximate or heuristic nature, and

dom factors the repeated estimation of a method can

all may have uncertainty in deliberation and exe­

produce a different estimate but every such estimate

cution costs and resource consumption. Subject to

corresponds to an executable solution. After evalu­

resource availability, a number of methods could be

ating by simulation the effects of several methods,

a

sequentially explored in a deliberation phase in or­

least costly solution (in terms of execution) will be

der to execute the least costly solution. Problems

selected.

of this type occur in automatic emergency-response

The central questions addressed by this paper are:

systems, design automation, query optimization, de­

What methods to evaluate? W hen to stop deliber­

structive testing, and other areas characterized by

ation and start acting?

significant computational cost or limited delibera­

adapted in case the external conditions change in

tion resources. Adapting the response of the system

the middle of its implementation?

to available resources provides a new approach to
real-time systems.

tion

3

The cleanup operations that must be performed
entail a cost of corrective action and should be as low

The remainder of the paper is organized as fol­
lows: Section

How can the strategy be

2 presents a

as possible. Since deliberation causes delay in action

motivating example, Sec­

and increased concentration of the gas due to the

formally states the problem, and in Sections

leak, the total time of deliberation must be bounded,

4 through

6

a family of pseudopolynomial-time al­

and may be modeled as. a resource constrained.

gorithms to construct generate-and-test strategies is

We assume that the distributions of effects are

4 presents a basic case

such that no method stochastically dominates an­

- K-bound (including at most K steps) strategy

other one (no one is clearly better for all possible

with no deliberation cost and no resource consump­

outcomes).

gradually introduced. Section

tion; Section 5

-

K-bound strategy with delibera­

tion cost and resource consumption; and Section
-

6

oo-bound computationally-optimal strategy (no

predefined limit on the number of steps). Section
discusses related work and Section

7

8 summarizes our

Our basic observation is that, because

of a time bound, it is not possible to estimate all the
solutions.

The problem is defined precisely in the

next section.

3

Problem Statement
{M1, .. , MM}

results and presents problems for future research.

Let M

2

that solve some specific problem-instance

Motivating Example

Consider the following hypothetical situation, due to
a leak of some explosive, corrosive gas into a space
station's air, a state of emergency is automatically
declared.

There are two reasons to avoid accumu­

lation of gas - (a) to minimize the damage due to
corrosion, and (b) to prevent critical accumulation
that can cause an explosion.

Since a high concen­

tration of gas can cause an explosion, the response
is time-bound.
Let us presume that a number of methods are
stored in the station's main computer to deal with
various contaminations, utilizing such alternative
tactics as isolating contaminated areas, chemical
neutralization, and dehermetization of non-vital sec­
tors. The methods differ in their effectiveness, in the
amount of damage they cause, and in other material
losses; their effects are uncertain and are encoded by
probability distribution functions.
Given the details of a specific accident, the esti­
mated effect of any method can be determined by
computer simulation. Simulation running times are
also uncertain and depend on the inputs and the

=

be a finite set of methods

P. Every
M; E M computes a solution instance
M;(P) out of the set Of of the possible so­

method in

s:f;

=

lutions.

Since we will consider only one problem­

instance at a time the index

P

will be omitted in

the following.
We assume that the methods cannot be inter­
rupted. The only exception is when a method ex­
hausts all the available resource, in which case it
halts automatically without producing any solution.
Let

I
I
I
I
I
I

I
I
I
I
I

Cost(sM;) denote the distribution of cost to
sM;. We denote by Cost(M;), and Res(Mi)

I

Mi during the deliberation, i.e., computa­
sM;. We assume that cost and resource dis­

I

execute

the distributions of cost and resource consumed by
method
tion of

I

tributions are given as sets of rational probabilities
over the finite sets of nonnegative integer values.
In general, a strategy,

S,

will generate and esti­

mate a sequence of 15 methods.

The methods in

this sequence, and the corresponding solutions ob­

tained by evaluating them are denoted by M;8 1, and

sM� , fior
•

1 Note

.

i =

1 , .., 18 .

that in general M;

5

:¢:. M;

I
I
I
I

75

I
I
I
I

After analyzing a ( possibly empty) sequence of the
methods evaluated so far and results of these evalu­

exhausted. Nevertheless, we explicitly specify feasi­
bility to emphasize this point.

uated next. When the strategy halts, a least costly

ations, a strategy selects a new method to be eval­

Since the exact sequence of methods to be evalu­

known solution is executed. If we denote the halt­

ated by S depends on the outcome of the previous
evaluations, the deliberation cost is uncertain and

ing decision by H, strategy S can be depicted as
performing at every iteration the following generate
and test steps (see Figure

GenerateS ({(M1S , sM51 ), .. , (M1S , sM15 ) } )

I

I
I
I
I
I
I
I
I
I

In the following we will always mean computational­

�=� � raet �

1:

Method
_- - - - -'

ble

strategy

with

expected

and resources incurred when the methods are used.

Cost(sM)

is the corresponding set of distributions

of a solution costs, f denotes the amount of resource
available for deliberation, and

3.1 S is bounded by L E z+ if 15 :S L
for any possible application of S. If S is bounded by
L we will call it L-bound.

Definition

We assume that we are always given a solution

CostAlt

CostAlt also

as

cost(s8) = .

min

s=O, .. ,I 5

We define:

cost(sMf)

Using this definition, a least costly known solution

4

K-bound Strategies with No
Cost and No Resource Con­
sumption in

Cost( s5) the
cost(s8) prior to starting strategy
S, and by E( Cost(s8)) its expected value. Simi15
larly, let cost(S) = 2: cost(Ms
i ), and res(S) =
1
,s
2:1 res(Msi ) denote the total cost and resource condistribution of

sumption in the deliberation phase of S.

the Delibera­

tion Phase
In this section we set cost(M i) = res(M;) = 0, for
all i = 1, .. , M. We begin by stating independence
assumptions for the probability distributions of ex­

ecution cost:

will be selected for execution and doing nothing is

always a possibility. Let us denote by

is a finite al­

used at all.

to be paid if no methods are

cost(sM�).

CostAit

ternative cost that will be paid, if no methods are

sAlt

used at all. For notational convenience we will refer
to

cost

C. The problem is defined by a 7-tuple (C, M, CostM, ResM, Cost(sM), f, Cost Alt ) where
M is the set of solution methods, CostM and
ResM are the distributions of computational costs

below

Generate-and-test deliberation strategy.

that has cost

We

We want to determine whether there is a feMi­

Execute
the Best
So Iutton

Deliberation
Figure

when optimality is referred to.

also consider only bounded computationally-optimal
strategies fitting our generate-and-test model.

...

I

Let

E( Cost(s8)).

optimality,

�V�rest

Cost(S).

its expected value.

Feasible strategy s•
is computationally-optima/ if for any feasible strat­
egy S, E(Cost( S*))+E( Cost(s8·)):::; E( Cost(S))+

otherwise

I

I

Cost(S)) denote

Definition 3.3
=

if deliberation halts

I

I

1):

described by some random variable

E(

1 For any i f. j, distributions
.
s ) and Cost(sM;s ) are mdependent.

Assumption

Cost(sM;

Since nothing prevents a strategy from selecting and
estimating the same method more than once, this

as­

sumption implies that the cost distributions in any
two execution instances of a method are indepen­

Strategy S is feasible if for any pos­
sible a.pplication of S, res(S) :::; r, where r denotes
the amount of resource available for deliberation.

dent.

Note that following our earlier definition of uninter­

problem, delaying the treatment of interdependent

Definition 3.2

ruptible methods, any strategy is feasible, since it

will simply halt when the deliberation resource is

Assumption

1

is very strong, and it clearly re­

stricts the applicability of the results herein. How­
ever, since releasing it significantly complicates the
methods is justified for two reasons: one, a simpler

algorithm can be obtained when Assumption 1 does

76

hold and two, even when the assumption does not
hold, solving a simplified problem can provide a first
approximation to a more complex model.

is a K-bound optimal strategy if
zs• :::; K, and for any K -bound feasible strategy S,

Definition 4.1 s•

·
E(Cost(s 5 )):::; E(Cost(s 5)).

The argument is similar to the one for k = 1. If
the cost of computed solution, cost(sM;), is higher
than cAlt, we keep an old alternative cost, and if

the cost is lower, the alternative cost is lowered. In

both cases after estimating M;, we have one method
less to estimate, therefore k decreases by 1. Ck(cAlt)
(k =2, 3, . .. ;and cA11

Cl:(cA1t)

We will now introduce the table Ck of optimal k­

=

=

step strategies. By conventions of dynamic program­

ck corresponds to the optimal strategy for the
1-

ming,

lastk methods- C1 corresponding to an optimal

step strategy, C 2 to a n optimal 2-step strategy, and
so on.

is the optimal expected
cost for all the feasible strategies consisting of ex­
actlyk methods and initiated with cAlt.

Definition 4.2 Ck(cAlt)

4.1

Computing

K-bound

Optimal

Strategy

is the optimal expected
cost for all the feasible strategies consisting of exa ctly
k methods, initiated with cA11, and beginning with
method M;.

Definition 4.3 Ck(M;, cA11)

We start by calculating C1(M1, cA11) for i

1 , .., M

and cAlt

0, 1 , .. , CostAlt.

=

=

Although our

probability distributions are discrete, the notation

drawn from the continuous case makes presenta­
tion simpler, and therefore will be used.

T here is

of course a straightforward mapping to the discrete
case.

I

.

0, 1, . . , CostAlt ) is found by:

min

•=l,

.. ,M

Ck(M;,cA1t)

(2)

C1(M;,cA11) = cA1t[1-

+

1

C

1

defined recursively by {1)
and {2) is the optimal expected cost for all the strate­
gies consisting of exa ctly k methods and initiated
with cA11•

I

Theorem 4.1 Ck(c A1t)

Proof: By induction on

k.

C0(cAlt) = cAlt is the

optimal expected cost when no method can be esti­

mated. Assume that ck-l(cAlt) is the optimal ex­

pected cost for all the strategies consisting of exactly
k

-1

methods and initiated with cA11• To prove the

claim for Ck(cA11), we notice that an optimal strat­
egy must select one of the methods

( M1, . . ,MM)

to

be estimated first. Based on our assumption about
optimality of Ck-l(cAit) and our argument earlier
in this section, the expected cost for all the strate­

gies that begin with some method M; and contain
exactly k steps is given by (1), and since an optimal

strategy may select the best first method to mini­

To implement the optimal K-bound strategy us­

ing the table Ck(cA1t), we must reconcile a differ­
ence in definitions.

All

cost(sM;)dcost(sM;)

I
I

the minimum. If we set C0(cAl t) = cAlt, (1 ), (2) hold
for all k E z+. We also define C0(M;,cA lt) = cA lt.

expected cost. •

dcost(sM;)]+

I

We will denote by Mk(cA1t) the method that attains

mize the expected cost (2) gives the needed optimal
C Ali

I

to include

We defined K-bound strategy

at most K

methods, while the entries

I.
I
I
I
I
I

in Ck(c A1t) provide an optimal expected values for

If method Mi produces a solution with execution
cost higher than cA11, the new solution is ignored.

strategies with exac tlyk methods. It turns out that
the two are equivalent. To prove that we will need

I

T he second term represents the contribution to the

the following lemma:

I

expected cost when

cost(sM;) is lower than cAlt.

ter C1(M;,cAlt) is computed, we compute

Cl(cAlt) =

min

.
s=l, ..

,

M

In a general case, (k =2, 3, .. . ;

=

=

1

For anyk

Proof: Since Ck(a)

1 , .., M; cAlt

=

CAli

dcost(sM;)] +

1 Ck-l(cost(sM;))dcost(sM;)
CAll

+

ck-l(cAlt)[ 1 -

i

Lemma 4.1

Ck(b).

Cl(M;,cAlt)

0, 1 , .. , CostA11),
Ck(M,,cAlt)

Af­

(1)

=

E Z, 0 $a$ b :::} Cl:(a)$

min i=l, .. ,M Ck(Mi,a), it will

suffice to prove the more specific result: for any
Z, and

0 :::;

k, i

E

a $ b :::} Ck(M;,a) $ Ck(M;, b). By

mathematical induction onk. Fork =

0 the claim is

true by definition of C0(M;,a). Assume it is true for

k -1, we must prove that it holds fork as well. Our
induction assumption and (2) imply that ck-1(a) $
ck-1(b). ( We will use this fact later.) We must
prove;

I
I
I
I
I

77

I
I

or equivalently, using (1),
Ck-l(a)[1 -1a dcost(sM')]+

I

+ foa ck-I(cost(sM'))dcost(sM')::;
6
::; Ck-I(b)[1-1 dcost(sM1)]+

I
I

6
+ fo ck-l( cost(sM'))dcost(sM')

or

I

6
Ck-l(a)[1 dcost(sM') + 100dcost(sM')J+

I

+ foack-I(cost(sM'))dcost(sM')::;
::; Ck-l(b) 100dcost(sM')+

I

+ foack-I(cost(sM'))dcost(sM') +
6
+ 1 ck-I(cost(sM'))dcost(sM')

I
I

6
Ck-l(a) [1 dcost(sM 1) + 100 dcost(sM')J::;
6
::; 1 ck-t (cost(sM'))dcost(sM')+

I

+ Ck-I (b) 100dcost(sM1)

This is the sum of two inequalities that follow, as
noted, from the induction assumption:
6
Ck-l (a) 1 dcost(sM')::;

I
I
I
I
I
I

+

{cAll
Lemma4
o Ck(cost(sM'))dcost(sM') ::;
J
CAli
::; Ck(cA1t )[1-1

+Ck (cAlt )1

6
::; 1 ck-t ( cost(sM' ))dcost(sM')

and

Now the equivalence theorem can be proved.
For any k E Z, Ck(t01t) is the ex­
pected value of an optimal k-bound strategy initiated
with t01t.
Theorem 4.2

CAll

.1

dcost(sM')]+

dcost(sM') d,¥ Ck(M; , cAit )

and the result follows from the definition of C. •
By Theorems 4.1 and 4.2 the following Strategy
4.1 is optimal K-bound strategy.
Strategy 4.1.
lnit

by eliminating identical terms on both sides,

I
I

Proof: It is enough to prove that for any value
of cAlt, I 2:: m => C1(cA1t) ::; C"'(cA1t ). Then ev­
ery k-bound strategy will contain exactly k steps,
and therefore Ck(cAlt) table could be used. We
will prove that for any cAlt and for all k E Z,
Ck+1 (t01t ) $ Ck(cA1t ). Indeed, for any i= 1, .. , M,

Step k

Compute Ck(cAlt ) fork= 0, 1,2 , .. ,K;
and c Alt = 0, 1, . . , CostA it.
Set c Alt = CostA It
s* = 8Alt
For k = !( to 1
Estimate Mk = Mk(cA1t)
If cost( sMk) ::; cAlt
then Set cAlt = cost(sMk)
s* = sMk

Returns*

4.2

Numerical Example

Consider the following problem: there are only two
methods - M , and M2 (M = {Mt, M2}). The
1
values of the solutions that are produced by these
methods can be only 0, 1, or 2 (D = 3). We need to
compute an optimal strategy for 3 periods (K= 3),
and we start with an alternative solution of cost 2
(i.e., CostAlt = 2, it will cost us 2 if we decide to do
nothing). Distributions of cost(sMk) for k= 1, 2 are
shown on Figure 2.
Starting with an optimal strategy for one (last) pe­
riod ( k = 1), we compute for c Alt = 0, C 1(M; , 0) for
i = 1, 2.
C1(Mt,O) = 0; C1(M2,0) = 0 => M 1(0) = Mt
(we recall that M1(0 ) denotes a method for which
C1(M; , O ) is minimized); C1(0) = 0.
For c Alt = 1, we obtain
C1(Mt, 1) = 0.6; C1(M2, 1) = 0.5 => M1(1) = M2;
C1(1) == 0.5.

78

:s:

0

I

2

M1

.4

.s

.I

M
2

.5

.I

.4

5

Figure 2: Cost distributions of the solution.
For cAlt = 2 ,
C 1(Mt, 2 ) = 0.7; C1(M2, 2 ) = 0.9 => M1(2 ) = Mt;
C1(2) = 0.7. And so on. The resulting opti­
mal strategy is shown on Figure 3. This strategy

X
2

I

0

3

2

.153

.32

M
2

.125

M

0

M

0
M

l

H

Figure 3: Resulting optimal strategy.
will start by estimating method M3(2)= M2 (column
= 3, and row corresponding to cAit = 2). As­
sume arbitrarily that cost(sM2) = 2 , meaning that
the alternative cost was not reduced at Step 3. We
estimate next method M2(2)=M1• When (also ar­
bitrarily ) we find that cost(sM•) = 1, the alternative
cost is reduced to 1 and we continue by estimating
M1(1)= M2• Assume cost(sM2) = 2. At this point
deliberation halts, and since the current alternative
cost is 1, solution sM1 found at Step 2 is executed.

k

4.3

Computational Complexity

Input: M

methods are encoded in the input stream.
Every method Mi, i = 1, .. , M is described by the
distribution of the cost of the solution, given as a
set of rational probabilities over the nonnegative in­
teger values, also given in the input. If the max­
imum number of values in cost distributions is D ,
and V = max { CostAlt , K } the length of the input
will be O(MDlogV).
Space: Storing the strategy table requires space
O(I<VlogV).
Tim.e: Computing the table takes time O(KMVD),

K-bound
Cost

Strategies

with

and· Resource

Con­

sumption in the

H

2

0
M
1

5

I
M

2

H

1

.5

0
M
1

M

1

.25

M
2

2

.7

Conjecture 4.1 Computing computationally-opti­
mal real-resource strategy with no cost and no re­
source consumption in deliberation phase is NP­
complete if D � 3.

In the next section, we prove the NP-completeness
of a more general problem.

0

I

since for every entry we must compare M methods,
and evaluating each requires O(V) calculations.
Informally (Garey and Johnson [4]), an algorithm
has a polynomial-time complexity if it runs in a time
polynomial in the length of its input. I< MVD is
not a polynomial function of MDlogV, but it is a
polynomial function of MDlogV, I<, and V. An
algorithm that runs in time polynomial in its input
length and the largest number in the input has a
pseudopolynomial-time complexity, which is true in
our case.

Delibera­

tion Phase
In this section we extend the basic technique de­
veloped in Section 4 to handle cost and resource
consumption in the deliberation phase. First we in­
troduce the cost alone. Two new assumptions are
needed.
For any i '# j, distributions
and Cost (Mf) are independent.

Assumption 2

Cost (Ml)

I
I
I
I
I
I
I
I
I
I
I

Assumption 3

I

5.1

I

For any i and j, distributions
Cost(Mi5) and Cost (sMf) are independent.
Cost in the Deliberation Phase,
No Resource Consumption

Presence of the cost in deliberation phase may cause
an optimal strategy to estimate fewer methods. We
will appropriately change the definitions of Ck(cA1t )
and Ck(Mi, cAit):

Definition s:1 Ck(cA1t) is the optimal expected to­
tal cost for all the strategies consisting of at most
k methods and initiated with cAlt .

Ck(Mi, cA1t) is the optimal expected
total cost for all the strategies consisting of at most
k methods, initiated with cA1t, and beginning with
method Mi.
Definition 5.2

I
I
I
I
I
I

79

I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I

The recursive formula for c�< (Mi ' cAit) will be
changed to reflect the cost of deliberation:
Ck(Mi,CAit) = c�<-l(cAit)[1+

1

Ait
C

dcost(sM;)] +

( 3)

1 Ck-l(cost(sM;))dcost(sM;) + E( Cost(Mi))
Alf
C

Note that by Assumption 3 only the expected value
of deliberation cost appears in this formula.
Finally, to provide for possibility that in some sit­
uations doing nothing could be the best strategy,
we introduce a new artificial method to be denoted
by M0• It is characterized by cost(Mo) = 0 and
cost(sMo) = CostAlt. Since the deliberation cost of
M0 is 0 it can be used without restriction and since
cost(sMo) = CostAlt it will never improve a current
alternative solution.
The definition of Ck(cA1t) will be altered to in­
clude M 0:
c�<(cA/t) = . min Ck(Mi,CAit)
•=D,l, .. ,M

(4)

c�<(cAit) computed recursively by {3}
and (4) is the optimal expected total cost for all the
strategies consisting of at most k methods with cost
in deliberation phase and initiated with cAlt .

Theorem 5.1

Proof is similar to that of Theorem 4.1. We
must only notice that since the deliberation cost is
independent of execution cost, the expected deliber­
ation cost is included in (3) and since the dummy
method Mo may now be selected, (4) must include
Mo. •
By Theorem 5.1, if Strategy 4.1 will compute
Ck(cA1') using ( 3) and (4) it will be an optimal strat­
egy with deliberation cost.
The space and computational complexity with de­
liberation cost are the same as without them, as pre­
sented in Section 4.

It is assumed that the interrupted method produces
no solution and incurs full computational cost.
In order to account for the resource consumption,
we must add a resource dimension to the strategy
table. Other than that, our discussion parallels the
development of the previous models. As with the
cost, we make an independence assumptions for re­
source consumption distribution functions.

Res(Mn

Assumption 5

Both

Cost

sumption

and
in

Resource

the

Con­

Deliberation

Phase

In this model the estimate of every method causes
the consumption of some quantity of a single re­
source, described by the distribution Res(Mi), i =
1, 2, . . , M, from the total level - r- available in the
beginning of the process.
With one exception, we assume uninterruptability
of methods: when the total resource consumption
reaches r the deliberation process is interrupted and
the best solution available at this point is executed.

For any i and j, distributions
and Res(Ml) and

Res(M l) and Cost ( sMf ) ;
Cost(Ml )are independent.

Similarly to the previous case, we define:

5.3 c�< (cAit' r ) is the optimal total ex­
pected cost for all the strategies consisting of at most
k methods, initiated with cAlt, and that can be exe­
cuted within resource limit r.
Definition

5.4 ck(Mi' CAit' r ) is the optimal total
expected cost for all the strategies consisting of at
most k methods, initiated with cAit, that can be exe­
cuted within resource limit r , and begin with method
Mi .

Definition

We also define:
Ck(cAl t,r ) = min Ck(M i,CAlt,r )
. .. ,M
a=O,

Proof:

5.2

4 For any i =f. j, distributions
and Res ( Ml ) are independent.

Assumption

Where
CI<(Mi,cAit,r ) =

·[1-1

(5)

forcl<-l(cAit,r-res(Mi))dres(Mi)·

Ali
C

dcost(sM;)

1 dres(Mi)]+
r

{6)

"
J;dres(Mi)Jt c�<-l( cost(sM;),r- res(Mi))dcost(sM;)
+E( Cost(Mi))

c�<(cA1') computed recursively by (6)
and (5) is the optimal expected cost for all the strate­
gies consisting of at mostk methods with cost and
resource consumption in deliberation phase, and ini­
tiated with cA1' •

Theorem 5.2

The proof is similar to that of Theorem 5.1.
We must only notice that since the resource con­
sumption is independent from cost, (6) is correct.
Proof:

•

It remains to modify Strategy 4.1 to include resource management. The optimality of the Strategy
5.1 follows from the Theorem 5.2.

80

Strategy 5.1.

Compute Ck (c01t, r) fork= 0, 1 , 2, ..,K;
c;Alt = 1, .. , C ostAlt; and r = 0, 1, .. , f
Set cAlt =CostAit

Init

Step k

r=f
s • = sAlt

Fork= K to 1
Estimate Mk = Mk( cAit,r)
Set r = r- res(Mk )
If cost(sM � ) � cAit
k
then Set c;Ait = cost(sM )
�
s* =sM

Computational Complexity

The length of input is O(MDlogV), where,
before, D is the maximum number of values
in cost or resource consumption distributions, and
t
V =max { CostA i , K, r}.
Space: Storing the strategy table requires space
Input:

as

O(KV2logV).
Time: Computing the
O(K MV2 D2), because

table takes time
for every entry we must com­
pare M methods, and evaluating each requires V2
calculations. The algorithm has pseudopolynomial­
time complexity.
Computing computationally-optimal
real-resource strategy is NP-complete problem.

Theorem 5.3

Our problem can be easily solved
by nondeterministic automaton by branching non­
deterministically every time a new method must be
generated. Next, we will show that our problem re­
stricts to Integer Knapsack Problem (see p. 247 [4])
i.e., Integer Knapsack Problem is a special case of
our problem. Set C = K. Define a method for each
u E U: set cost(Mi) =0, res(Mi) = s(u), and define
the distributions of execution cost by p(cost(sM•) =
1) = 10-v(u), p(cost(sM;) = 0) = 1-10-v(u). Set
r = B, GostAlt = 1. Solving this real-resource strat­
egy problem will solve Integer Knapsack Problem.
Proof Outline:

•

6

Strategies

without

For any instance of a problem
with positive deliberation cost.
If Cmin
mini=l, .. ,M cost(Mi) an oo-bound optimal strategy is
bounded and equivalent to an optimal strategy for
C tAl<
K' -bound problem, where K' = r _
os
c . l·
Theorem 6.1

Returns*

5.3

insisting that the strategy be bounded; otherwise it
may never terminate, but we may not be given a
specific bound.
This section shows that in some cases - namely
when all methods have positive deliberation costa problem with unspecified bound may be reduced to
K-bound problem by calculating the upper bound.
In other cases the oo-bound problems may have no
bounded, optimal strategies- resource permitting,
it will always be beneficial to add another method
in hope to reduce the execution cost even further.
Theorem 6.1 finds the bound for problems with
positive deliberation cost.

Prede-

fined Step Limit
We now consider the most general case, correspond­
ing to our example in Section 2. In real-life situ­
ations we do not typically restrict the number of
steps, or iterations to be taken by a strategy. Our
concern is that the strategy be optimal while the ex­
act number of steps is not important. We are still

mm

Proof: Let P be an instance of a problem with
positive deliberation cost. The deliberation cost of
any strategy for P using more than J{' steps will ex­
ceed the alternative cost, so such a strategy cannot
be optimal. Since the number of the possible strate­
gies containing at most I<' steps is finite, an optimal
strategy exists, and has at most K' steps. •
The implementation of oo-bound strategy is obvi­
ous: 1) compute K'; 2) implement K'-bound opti­
mal strategy.

7
Related Work
Our work emphasizes the analysis of computationa­
lly-optimal control of deliberation before action.
Several approaches were suggested to related prob­
lems involving the control of deliberation.
Tokawa and Kim (10] treat a similar component­
selection problem in design-automation domain.
They suggest selecting components in random, and
evaluate the resulting strategy by its rank in a list of
all possible strategies. Ono and Lohman [7], consider
the problem of query optimization. They construct
a polynomial strategy for some types of queries us­
ing a dynamic programming formulation, but they
do not allow for uncertainty, and do not consider a
resource constraint.
Brooks [2], and Agre and Chapman [1] suggest
reactive approach to deliberation problem, and al­
though Brooks provides for deliberation when reac­
tion fails, neither Brooks', nor Agre and Chapman's
work offers optimal deliberation control methods as
those presented here.
Kaelbling [6] and Rosenshein and Kaelbling [8]
suggest avoiding deliberation by compiling in ad-

I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I

81

I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I

vance the programs responding within the given re­
source limit, but they do not allow for uncertainty,
and do not claim optimality with respect to all the
programs meeting the limit.
Horvitz [5] offers a decision-theoretic algorithm to
select a single method among the set of alternative
interruptible methods, and Fehling and Breese [3]
present a computational architecture and decision­
theoretic principles for real-time control.
In general, the reactive approaches focus on elimi­
nating the deliberation by sacrificing the optimality,
while the decision-theoretic work is traditionally ig­
noring the computational issues in pursued of an op­
timal solution. By introducing the computationally­
optimal strategies we reach an optimal balance be­
tween the deliberation and execution costs.

8

Summary and Future Work

In this paper we have stated a problem of finding
computationally-optimal real-resource strategies for
independent, uninterraptible solution methods, and
shown how to solve it for all practical purposes. The
problem, which we have shown to be NP-complete,
appears in numerous practical applications. We de­
veloped an algorithm that solves it in a polynomial
time if the alternative cost, resource limit, and num­
ber of steps have small values.
The results can be readily extended to the case of
multiple resources. This extension involves adding
a dimension to the strategy table for each new re­
source, it does not require any new technical ideas
and is left to the reader.
Future work may address validating our NP­
completeness conjecture, allowing dependencies
among the methods, and considering interruptible
methods.

9

Acknowledgments

We would like to thank Michael Genesereth, Matt
Ginsberg, Eric Horvitz, Ross Shachter, and Dave
Smith for helpful discussions that resulted in im­
proved presentation of this paper. Diane Cunliffe
and Sue Kenney helped greatly to improve the style.
We also thank anonymous referees for their sugges­
tions. The first author is grateful to Palo Alto Labo­
ratory of the Rockwell International Science Center
for creating an ideal environment for this work.

