  no restriction that a valid plan need have any sort of compact  polynomial size  representation   We examine the computational complexity of testing and finding small plans in prob abilistic planning domains with succinct rep resentations  We find that many problems of interest are complete for a variety of com plexity classes  NP  co NP  PP  NPPP  co NPPP  and PSPACE  Of these  the proba bilistic classes PP and NPPP are likely to be of special interest in the field of uncer tainty in artificial intelligence and are deserv ing of additional study  These results suggest a fruitful direction of future algorithmic de velopment   These results are not directly applicable to the prob lem of finding good plans because they place no re strictions on the form of valid plans  It is possible  for example  that for a given planning domain  the only valid plans require exponential space  and exponential time  to write down  Knowing whether or not such plans exist is simply not very important   INTRODUCTION  Recent work in artificial intelligence planning has ad dressed the problem of finding effective plans in domains in which operators have probabilistic ef fects  Kushmerick  Hanks    Weld       Draper  Hanks    Weld       Dearden   Boutilier       Boutilier  Dearden    Goldszmidt       Boutilier  Dean    Hanks        In probabilistic propositional planning  operators are specified in a Bayes network or an extended STRIPS like notation  and the planner is asked to determine a way of choosing operators to achieve a goal configuration with some user specified probability  This problem is closely related to that of solving a Markov decision process when it is expressed in a succinct representation  In previous work  Littman       Mundhenk  Gold smith    Allender        we examined the complexity of determining whether a valid plan exists  the prob lem is EXP complete in its general form and PSPACE complete when we are limited to polynomial depth plans  For these results to hold  plans must be permit ted to be arbitrarily complicated objects  and there is  In the present paper  we consider the complexity of a more practical and realistic problem that of de termining whether or not a plan exists in a given re stricted form  The plans we consider take several pos sible forms that have been used in previous planning work  totally ordered plans  partially ordered plans  conditional plans  and looping plans  In all cases  we limit our attention to plans that can be expressed in size bounded by a polynomial in the size of the speci fication of the problem  This way  once we determine that such a plan exists  we have some hope that we can write it down in a reasonable amount of time  In the deterministic planning literature  several au thors have addressed the computational complexity of determining whether a valid plan exists  of deter mining whether a plan exists of a given cost  and of finding the valid plans themselves under a vari ety of assumptions  Chapman       Bylander       Backstrom   Klein        These results provide lower bounds  hardness results  for probabilistic planning  since deterministic planning is a special case  In deter ministic planning  optimal plans can be represented by a simple sequence of operators  totally ordered plan   In probabilistic planning  good conditional plans will often perform better than any totally ordered plan  therefore  we need to consider the complexity of the planning process for a richer set of plan structures  The computational problems we look at are complete for a variety of complexity classes ranging from NP to PSPACE  Two results are deserving of special men    Complexity of Probabilistic Planning       tion  first  the problem of evaluating a totally or  In the fiat representation  the transition function t  dered plan in a succinctly represented planning do  is represented by a collection of lSI  main  as might be described by a two stage temporal  We do not treat this representation directly  see our  Bayes network  Boutilier  Dean    Hanks        is PP complete  The class PP is closely related to  P   which has been recognized as an important complex ity class in computations involving probabilistic quan tities  such as the evaluation of Bayes networks  Roth        Of course  probabilistic computations are cen tral to the area of uncertainty in artificial intelligence  Second  the problem of determining whether a good totally ordered plan exists for a succinctly represented  x  lSI matrices    extended technical report  Goldsmith  Li t tm an     Mundhenk       for details on this type of problem  In the succinct representation  straightforward prob ability matrices would be huge  so the transition function must be expressed another way   In artifi  cial intelligence  two popular succinct representations for probabilistic planning domains are probabilistic state space operators  PSOs   Kushmerick  Hanks    Weld       and two stage temporal Bayes networks  planning domain is NPPP  complete  Whereas the class    TBNs   Boutilier  Dearden    Goldszmidt         NP  Although these representations differ in the type of  can be thought of as the set of problems solvable  by guessing the answer and checking it in polynomial  planning domains they can express naturally  they  time  the class  are computationally equivalent   a planning domain  NPPP  can be thought of as the set of  problems solvable by guessing the answer and checking  expressed in one representation can be converted in  it using a probabilistic polynomial time computation   polynomial time to an equivalent planning domain ex  It is likely that NPPP characterizes many problems of  pressed in the other with at most a polynomial increase  interest in the area of uncertainty in artificial intelli  in representation size  Littman         gence  this paper and earlier work   Mun dhenk   Gold  smith    Allender       give initial evidence of this       to representations used in the complexity theory litera  REPRESENTING DOMAINS  A planning domain  M     ture  In the circuit representation  the transition prob   S  s   A  t     is character  ized by a finite set of states S  a finite set of operators or actions  A   an initial state so E S  and a set of goal  states   c  S   The application of an action a in a  state s results in a probabilistic transition to a new state s   according to the probability transition func   tion t   s  a  s      The objective is to choose actions to  move from the initial state s  to one of the goal states  with probability above some threshold       The  state  of the system is known at all times  fully observable  and so can be used to choose the action to apply  We are concerned with two main representations for planning domains   fiat  In this paper  we use a different succinct representa tion for planning domains that is more closely related  representations  which enu  merate states explicitly  and succinct representations  sometimes propositional  structured  or factored rep resentations   which view states as assignments to a set of Boolean state variables  Compared to the size of the representation  fiat domains typically have a polyno mial number of states and succinct domains have an exponential number  though a  bad  succinct repre sentation can be as large as a flat one   PP  Toda        showed that p P  P   from which it fol P lows that NP   NPPP  Roughly speaking   P is as pow erful as PP if used as an oracle     t is also possible to formulate the objective as one of maximizing expected discounted reward  Boutilier  Dear den    Goldszmidt        but the two formulations are es sentially polynomially equivalent  Condon        the only difficulty is that succinct domains may require discount factors exponentially close to one for equivalence to hold    abilities for an action  a   t s  a  s     are represented by a  circuit of simple logic gates that takes as input succinct representations of s and s  and outputs a probability value in binary representation   Planning domains in the PSO and  TBN representa tions can be converted to the circuit representation in polynomial time  but it is not clear how to con vert a circuit to a PSO or   TBN  in polynomial time   However  this conversion can be carried out by a PP machine  the basic idea is used in the proof of The orem       so the circuit representation is equivalent to PSOs and  TBNs in any complexity class contain ing PP  Since the complexity results we report for the circuit representation are all for complexity classes at least as hard as PP  these completeness results apply  to PSOs and  TBNs as well        EXAMPLE DOMAIN  To help make these ideas more concrete  consider the following simple probabilistic planning domain based on the problem of building a sand castle at the beach  There are a total of four states in the domain  de We assume that the number of bits used to represent  the individual probability values isn t too large    This implies that the transition probabilities have at most as many bits as the circuit representing the domain has gates  There are other circuit based representations that can represent probabilities with an exponential num ber of bits  Mundhenk  Goldsmith    Allender               Goldsmith  Littman  and Mundhenk after  before moat        Figure      moat  castle        castle        Circuit representation for  erect castle   scribed by combinations of two Boolean state vari ables  moat and castle  The proposition moat sig nifies that a moat has been dug in the sand and the proposition castle signifies that the castle has been built  In the initial state  both moat and castle are false  and the two states in which castle is true are goal states  There are two actions  dig moat and erect castle  Exe cuting dig moat has two possible equiprobable effects   no op   state does not change   and  moat   moat becomes true   The erect castle action is more com plex  If moat is true  then the possible effects are  castle   probability        in which castle becomes true   no op   probability        in which the state doesn t change  and  collapse   probability        in which moat becomes false  On the other hand  if moat is false when erect castle is executed  then pos sible effects are  castle   probability        in which castle becomes true  and  no op   probability        in which the state doesn t change  The idea here is that building a moat first protects the castle from be ing destroyed prematurely by the ocean waves  To illustrate the circuit representation  Figure   gives one possible circuit representation for the erect castle action  This circuit takes  as input  binary representa tions of the  before  state s and the  after  state s   and outputs a binary representation of the probabil ity of reaching s  from s under the erect castle action  While this representation is not convenient for specify ing complex planning domains  more natural represen tations can be converted into this form automatically       TYPES OF PLANS  We consider four basic classes of plans for probabilistic domains  totally ordered  acyclic  looping  and par tially ordered  We illustrate examples from each of these classes for the sand castle domain in Figure    A totally ordered plan is a sequence of actions that must  be executed in order  The plan terminates after the final action in the plan has been executed  or whenever a goal state is reached  For example  with probability         the totally ordered plan in Figure   a   suc cessfully builds a sand castle  Acyclic plans generalize totally ordered plans to in clude conditional execution of actions  They are roughly loop free finite state controllers for a planning domain  they express a simple type of conditional plan in which the next plan step to execute is a function of the current step and an  effect label  that describes the outcome of executing the current step  No step in an acyclic plan may be repeated more than once during plan execution  The acyclic plan in Figure   b  suc ceeds with probability         and executes dig moat an average of       times  Thus  it succeeds more often and with fewer actions than the totally ordered plan in Figure   a    A partially ordered plan is a different way of gener alizing a totally ordered plan  It contains no loops and no conditional branches  but can leave flexible the precise sequencing of actions  Kushmerick  Hanks    Weld        Figure   c  illustrates a partially ordered plan for the sand castle domain  The dashed arrows indicate ordering constraints in contrast to solid ar rows  which indicate flow of controL There are two distinct totally ordered plans consistent with the par tially ordered plan in Figure   c   dig moat  dig moat  dig moat  erect castle  erect castle and dig moat  dig moat  erect castle  dig moat  erect castle   There are several possible interpretations for how the performance of a partially ordered plan is measured  The pessimistic interpretation is that the performance of a partially ordered plan is equal to the performance of the worst possible totally ordered plan consistent with the partial order  This is closely related to the standard interpretation in deterministic partial order planning  McAllester   Rosenblitt        The opti mistic interpretation of the performance of a partially ordered plan is that it is the performance of the best consistent totally ordered plan  and the average in terpretation is that it is the average over all possible consistent orders  Totally ordered  partially ordered  and acyclic plans are all inherently finite horizon  plans terminate after a polynomial number of actions  Looping plans gen eralize acyclic plans to the case in which plan steps can be repeated  Smith   W illiamson        This type of plan is also referred to as a plan graph or pol icy graph  Kaelbling  Littman    Cassandra        A looping plan can express an infinite horizon strategy because the plan will continue to execute as long as a goal state is not reached  there is no a priori bound on   Complexity of Probabilistic Planning      erect castle         dig moat    a  A total ly ordered plan                  erect castle       erect castle       c  A partially ordered plan   no op    erect castle    no op    b  An acyclic  conditional  plan   collapse    d  A looping plan  Figure    Example plans for the sand castle domain  the length of the sequence of actions chosen by such  a plan   For example  the looping plan in F igure   d   does not terminate until it succeeds in building a sand  castle  which it will do with probability     eventually        PSPACE is the same as the class of polynomial  space computable functions  Ladner         For any complexity classes C and C  the class cc  con  sists of those sets that are C  Turing reduc ible to sets in  C   i e   sets that can be accepted with resource bounds  DECISION PROBLEMS  specified by C  using some problem in C  as a subrou  Given a particular class of plans  we consider two com  putational problems  The first is the plan evaluation  problem  given a plan  a planning domain  and some threshold     does the given plan reach the goal with  probability at least B  The second problem is plan ex istence  given a planning problem and a threshold    is  there a polynomial size plan of the required form that can reach the goal with probability at least B   tine  oracle  with instantaneous output  For any class  C  PSPACE  it is the case that NPcPSPACE  and  therefore PSPACEPSPACE PSPACE  see Papadim itriou s        textbook   The complexity classes we consider satisfy the follow  ing containment properties  PC          COMPLEXITY BACKGROUND  standard results from complexity theory  we refer to Papadimitriou s        complexity te xtbook  In the  interest of completeness  in this section we give a short  description of the probabilistic and counting complex ity classes we use in this work   f  such that   for some nondeterministic polynomial time bounded machine N  the number of accepting paths of N on  equals  f x    x  Probabilistic polynomial time  PP  is the class of sets  A for which there exists a nondeterministic polynomial time bounded machine N such that x E A if and only if the number of accepting paths of N on x is greater than its number of rejecting paths        NPPP co NPPP  PSPACE  EXP   SUMMA RY OF RESULTS  Table   summarizes our results  which are explained  in more detail in later sections  Table   summarizes a set of results for flat domains  these are described in our extended technical report  Goldsmith  Littman     Mundhenk            ACYCLIC PLANS  Given a planning domain M  P        Q qo   o tr w   Q      S  so A t     a  is an acyclic plan where    plan  and  are finite sets of plan steps and effects  labels  respectively   For polynomial space bounded computations    PSPACE equals probabilistic PSPACE  and   PP   It is known that P is properly contained in EXP   For definitions of complexity classes   reductions  and  The class  P is the class of functions  NP  co NP  Qo E Q  is the initial plan step         Goldsmith  Littman  and Mundhenk  Table    Complexity results for succinct representations  plan evaluation  plan existence  PSPACE complete PP complete PP complete NpPP  complete PP complete co NPPP  complete  EXP complete PSPACE complete PSPACE complete NPPP  complete NPPP  complete NPPP  complete NPPP  complete NpPP  complete  unrestricted polynomial depth  looping acyclic totally ordered partially ordered  optimistic  partially ordered  average  partially ordered  pessimistic   reference Littman        Littman        Section   Section   Section   Section   Section   Section    Table    Complexity results for flat representations  unrestricted polynomial depth looping acyclic totally ordered partially ordered  optimistic  partially ordered  average  partially ordered  pessimistic       Q  x   E  function           Q is the  cycle free    r   Q     A is the to actions  and  action mapping  plan evaluation  plan existence  PL complete PL complete PL complete NP complete  co  NP hard  in PP co NP complete  P complete P complete P complete P complete NP complete NP complete NP complete NP complete  state tran sition  Proof  from plan steps  Let   be a Boolean formula with n variables  Define the planning domain M    with states so        n  Bacc  Srej  one action a and transition proba bilities t  so  a  w       n  t w  a  Sacc       if w satisfies    and t  w  a  Brej    if w does not satisfy   for wE       n  Let Sacc be the only goal state  It is clear that   is in MAJSAT if and only if M    reaches the goal state with probability at least     under the plan that repeats action a twice   w   S      E is the transition mapping from states of the planning domain to effects labels   Note that the quantities Q  qo   E  and   jointly specify a deterministic finite state automaton  Also  c  may be a partial function since some plan steps are final steps  Let M be a planning domain and P be an acyclic plan  Then M under P behaves as follows  Both M and P are started  in parallel  in their initial states  Both perform steps            In step i          let s be the current state of M and q be the current plan step of P  The current action is determined by the current state q of P  i e   the new state of M is s  with probability t s   r q   s    and P gets a translation of the new state s  of M as an effects label  i e   the new state of P is   q w s      If c  is not defined on q  or s  is a goal state  then the process stops  Given these definitions  we can present our first com plexity result  Theorem     The plan evaluation problem for acyclic and totally ordered plans is PP complete   To show PP hardness  we give a reduction from the PP complete problem MAJSAT  given a Boolean formula  do the majority of assignments satisfy it      For membership in PP  note that a planning domain M and an acyclic plan P induce a tree consisting of all paths through M under P  This tree can be normal ized in a way that makes each path have equal proba bility  and an accepting leaf is reached with probabil ity at least     if and only if M reaches a goal state with probability at least B  F inally  we can define a polynomial time probabilistic Turing machine that has this tree as its computation tree   The plan existence problem is essentially equivalent to guessing and evaluating a good plan  hence the prob lem is in NPPP  Hardness for NPPP can be shown us ing the techniques from a paper by Mundhenk  Gold smith  and Allender         T he proof uses the idea that every NPPP computation can be reduced to the        Complexity of Probabilistic Planning  problem of whether a succinctly described set of expo  of N   nentially many plan evaluation problems contains one  This planning domain can be encoded succinctly  and  that is satisfied   All accepting configurations reach goal states   this encoding can be produced from N and nomial time  Given a description of N and  Theorem     The plan existence problem far acyclic and totally ordered plans is NPPP  complete  In the above results  we consider succinctly repre Suc  cinctly represented plans are also quite useful   A  s uccinct acyclic plan is an acyclic plan in which the names of the plan steps are encoded in binary and a polynomial size circuit represents the state transition function    In addition  we require that the plan is at most polynomially deep even though the total number of steps in the plan might be exponential  the proof technique used in Theorem        Because  to succinct acyclic plans  analogous complexity results plan  which is a plan in which the state transition func tion   is probabilistic  These insights can be combined to yield the following corollary  Corollary      The plan evaluation problem for suc the plan existence problem for s uccinct probabilistic acyclic plans is NPPP  complete   allow the state transition functions to loop  this way  looping plans can b e applied to infinite horizon con trol  For looping plans  the complexity of plan exis tence and plan evaluation is quite different from the acyclic case  Looping plan evaluation is very hard  Theorem      The plan evaluation problem for loop  Proof The plan evaluation problem for fiat domains en  states and a  a looping plan can be eval  uated in probabilistic space O log cn    which is to say probabilistic space polynomial in the size of the input  Since probabilistic PSPACE equals PSPACE  this shows that the plan evaluation problem for loop ing plans in succinct domains is in PSPACE  It remains to show PSPACE hardness   M x   that the goal state is reached with probability     un  der the  constant plan   which repeatedly chooses the only action  if and only if N on input x accepts     Looping plan existence is not actually any harder than looping plan evaluation  although it is still quite hard  Theorem     The plan existence problem for looping  Proof Hardness for PSPACE follows from the same construction as in the proof of Theorem      either the  constant plan  is fine  or it is not  No other plan  tion of the planning domain  Thus  it can be guessed in polynomial time and checked in PSPACE  Because NPPSPACE PSPACE  the result follows  Recall that the    unrestricted infinite horizon plan  existence problem is EXP complete  this shows the problem of determining unrestricted plan existence is EXP hard only because some domains require plans that are larger than polynomial size looping plans        shows that plan existence is  SPACE  complete in deterministic domains also  This is closely related to the PSPACE completeness result of Bylan der         the main difference is that our theorem ap plies to more succinct plans  a single action in a loop  with more complex operator descriptions  Also  as the proofs above show  PSPACE hardness is retained even in planning domains with only one action  so it is not simply the conditional aspect of plans that makes them hard to work with   Let N be a  deterministic polynomial space bounded Turing ma  input  that computation   Because all transitions are deter ministic and only one action can be chosen  it follows  T heorem  ing plans is PSPACE complete   x    In fact  N  can even check whether c is a valid con figuration in the computation of N x   by simulating  The problem is in PSPACE because the plan being  as with acyclic plans in the previous section  but we  chine  For any input  unique action   outputs the next configuration of N   sought is no larger than the size of the succinct descrip  To represent looping plans  we use the same notation  n   words  N  on input c  a configuration of N  and a  the  yields a better result   LOOPING PLANS  representation of size  produce a description of a Turing machine N   plans is PSPACE complete   c inct probabilistic acyclic plans is PP  complete and  is in PL  For a planning domain with  x   that computes the transition function for N  In other  generalizes  apply  The same holds true for a probabilistic acyclic     in poly one can   in time polynomial in the size of the descriptions of N and  sented planning domains but only flat plans   x  x      PARTIALLY ORDERED PLANS  construct a planning domain  that has as states all configurations of N on  A k step partially ordered plan corresponds to a set of  only one action  and state transitions with  k step totally ordered plans all those that are consis  probability   according to the configuration transitions  tent with the given partial order  The evaluation of a  x         Goldsmith  Littman  and Mundhenk  partially ordered plan can be defined to be the evalua tion of the best  worst  or average member of the set of consistent totally ordered plans  these are optimistic  pessimistic  and average interpretations  respectively  More formally  a partially ordered plan P is a directed acyclic graph that has an action assigned to each node  A totally ordered plan A   a         ak is consistent with P if it satisfies the constraint that for all pairs of nodes ai  aJ if ai is an ancestor of aJ in the partial order  then i   j  i e   ai comes before ai in the totally ordered plan  The plan existence problem for partially ordered plans under the optimistic interpretation asks whether given a domain M  a partially ordered plan P  and a threshold   there is a totally ordered plan consistent with P under which M reaches a goal state with prob ability at least B  Under the pessimistic interpretation  we wish to know whether M reaches a goal state with probability at least   I under every consistent totally or dered plan  Under the average interpretation  we wish to know whether M reaches a goal state with prob ability at least    averaged over all consistent totally ordered plans  The plan existence problem for partially ordered plans is identical to that for totally ordered plans  This is because a totally ordered plan is a special kind of par tially ordered plan and its evaluation is unchanged un der the pessimistic  optimistic  or average interpreta tions  Conversely  the value of a partially ordered plan under any interpretation is a lower bound on the value of the best totally ordered plan  Theorem     The plan existence problem for par tially ordered plans is  NPPP  complete  under the pes  simistic  o ptimistic and average interpretations   The plan evaluation problem for partially ordered plans is different from that of totally ordered plans  This is because a single partial order can encode an exponential size set of totally ordered plans  and eval uating the partially ordered plan involves figuring out the best or worst member of this combinatorial set  Theorem     The plan evaluation problem for par tially ordered plans is  NPPP  complete  under the o p  timistic interpretation  co NPPP  complete under the pessimistic interpretation  and PP  complete under the average interpretation   The proofs of the first two of these results are closely related to the proof of Theorem      The average inter pretation problem can be shown to be in PP by com bining an argument showing how to average over con sistent totally ordered plans with the argument in the proof of Theorem     showing how to evaluate a plan in  a succinct domain in PP  PP hardness follows trivially from Theorem      because totally ordered plans are a special case of partially ordered plans and evaluating totally ordered plans is PP hard     CONCLUSIONS  In this paper  we explored the computational complex ity of plan evaluation and plan existence in probabilis tic domains  We found that  in succinctly represented domains  restricting the form of the policies under consideration reduced the computational complexity of plan existence from EXP complete for unrestricted plans to PSPACE complete for polynomial size loop ing plans to NPPP  complete for polynomial size acyclic plans  The class NpPP promises to be very useful to re searchers in uncertainty in artificial intelligence be cause it captures the type of problems resulting from choosing a good combinatorial structure and then eval uating its probabilistic behavior  This is precisely the type of problem faced by planning algorithms in prob abilistic domains  and may capture important prob lems in other domains as well  such as constructing good Bayes networks from data  The basic structure of our results is that if plan eval uation is complete for some class C  then plan ex istence is typically NPc  complete  This same basic structure holds in deterministic domains  evaluating a totally ordered plan in a succinct domain is P complete  for some typical representations  and determining the existence of a polynomial size totally ordered plan is NPP  NP complete  There are several significant plan representations that we did not explicitly consider in this work  However  the results we presented do provide a goal deal of in sight into complexity results for other representations  For example  Draper  Hanks    Weld        devised a representation for partially ordered conditional plans for the C BURIDAN system  In this representation  each plan step generates an observation label as a function of the probabilistic outcome of the step  Each step also has an associated set of context labels dictating the circumstances under which that step must be ex ecuted  A plan step is executed only if its context labels are consistent with the observation labels pro duced in earlier steps  This type of plan can be ex pressed as a succinct acyclic plan  Corollary     can be used to show that the plan evaluation and plan existence problems for partially ordered conditional plans in succinct domains are PP complete and NPPP complete  respectively  Other important plan struc tures to which our results can be applied include uni versal plans or policies  Dearden   Boutilier       and   Complexity of Probabilistic Planning  parallel plans   Blum    Furst         Notice that the results presented here also apply to partially observable domains         Kaelbling  Littman     Draper   Hanks     Weld    Cassandra        once  we limit our decision making to following finite state plans  it matters very little whether the true state of the world is observable or not   In many cases  the  complexity of optimally solving partially observable Markov decision processes  Papadimitriou lis                Condon  A     Tsitsik  is much higher than that of searching for a  restricted controller or plan  so there is some hope of building effective algorithms based on these ideas        The complexity of stochastic  games  Information and Computation                        Dearden  R   and Boutilier  C   Abstraction  and approximate decision theoretic planning  Artifi  cial Intelligence                          Draper  D   Hanks  S   and Weld  D   Proba  bilistic planning with information gathering and con tingent execution  In Proceedings of the AAAI Spring  Symposium on Decision Theoretic Planning  Goldsmith  J           Littman  M            and Mundhenk   M   The complexity of plan existence and eval  uation in probabilistic domains   Technical Report  The results in this paper support the intuition that  CS          Department of Computer Science  Duke  searching for small plans is more efficient than search  University   ing for arbitrarily complicated plans   From a prag  matic standpoint  this suggests that exact dynamic programming algorithms  which are so successful in flat domains  may not be as effective in succinct do mains  they do not focus their efforts on the set of small plans   Algorithm development energy  there  Kaelbling  L  P   Littman  M  L   and Cassandra  A  R          Planning and acting in partially observ  able stochastic domains  Technical Report CS           Brown University  Providence   RI   An algorithm for probabilistic planning   problems in the class NPPP  as this class captures the  Intelligence                   essence of searching for small plans for probabilistic domains  Heuristics for NPPP could lead to powerful methods for solving a range of important uncertainty sensitive combinatorial problems          Kushmerick  N   Hanks  S   and Weld  D  S   fore  might fruitfully be spent devising heuristics for  Ladner  R         Polynomial  space counting prob  lems  SIAM Journal on Computing Littman  M  L          Artificial                 Probabilistic propositional  planning  Representations and complexity  In Pro  ceedings of the Fourteenth National Conference on  Acknowledgments  Artificial Intelligence  AAAI Press  The MIT Press   We gratefully acknowledge Andrew Klapper and Anne  McAllester  D   and Rosenblitt  D          Systematic  Condon for helpful conversations on this topic   nonlinear planning  In Proceedings of the  th National  
 We investigate the computational complexity of testing dominance and consistency in CP nets  Previously  the complexity of dominance has been determined for restricted classes in which the dependency graph of the CP net is acyclic  However  there are preferences of interest that define cyclic dependency graphs  these are modeled with general CP nets  In our main results  we show here that both dominance and consistency for general CP nets are PSPACE complete  We then consider the concept of strong dominance  dominance equivalence and dominance incomparability  and several notions of optimality  and identify the complexity of the corresponding decision problems  The reductions used in the proofs are from STRIPS planning  and thus reinforce the earlier established connections between both areas      Introduction The problems of eliciting  representing and computing with preferences over a multi attribute domain arise in many fields such as planning  design  and group decision making  However  in a multi attribute preference domain  such computations may be nontrivial  as we show here for the CP net representation  Natural questions that arise in a preference domain are  Is this item preferred to that one   and Is this set of preferences consistent  More formally  a set of preferences is consistent if and only if no item is preferred to itself  We assume that preferences are transitive  i e   if  is preferred to   and  is preferred to   then  is preferred to   An explicit representation of a preference ordering of elements  also called outcomes  of such multi variable domains is exponentially large in the number of attributes  Therefore  AI researchers have developed languages for representing preference orderings in a succinct way  The formalism of CP nets  Boutilier  Brafman  Hoos    Poole        is among the most popular ones  A CP net c      AI Access Foundation  All rights reserved    G OLDSMITH   L ANG   T RUSZCZY NSKI   W ILSON  provides a succinct representation of preference ordering on outcomes in terms of local preference statements of the form p   xi   x j   where xi   x j are values of a variable X and p is a logical condition  Informally  a preference statement p   xi   x j means that given p  xi is strictly preferred to x j ceteris paribus  that is  all other things being equal  The meaning of a CP net is given by a certain ordering relation  called dominance  on the set of outcomes  derived from such reading of preference statements  If one outcome dominates another  we say that the dominant one is preferred  Reasoning about the preference ordering  dominance relation  expressed by a CP net is far from easy  The key problems include dominance testing and consistency testing  In the first problem  given a CP net and two outcomes  and   we want to decide whether  dominates   The second problem asks whether there is a dominance cycle in the dominance ordering defined by an input CP net  that is  whether there is an outcome that dominates  is preferred to  itself  We study the computational complexity of these two problems  The results obtained prior to this work concerned only restricted classes of CP nets  all requiring that the graph of variable dependencies implied by preference statements in the CP net be acyclic  Under certain assumptions  the dominance testing problem is in NP and  under some additional assumptions  even in P  Domshlak   Brafman        Boutilier  Brafman  Domshlak  Hoos    Poole      a   We show that the complexity in the general case is PSPACE complete  and this holds even for the propositional case  by exhibiting in Section   a PSPACE hardness proof for dominance testing  We then turn to consistency testing  While acyclic CP nets are guaranteed to be consistent  this is not the case with general CP nets  Domshlak   Brafman        Brafman   Dimopoulos         In Section    we show that consistency testing is as hard as dominance testing  In the following two sections we study decision problems related to dominance and optimality in CP nets  First  we consider the complexity of deciding strict dominance  dominance equivalence and dominance incomparability of outcomes in a CP net  Then  we study the complexity of deciding the optimality of outcomes  and the existence of optimal outcomes  for several notions of optimality  To prove the hardness part of the results  we first establish the PSPACE hardness of some problems related to propositional STRIPS planning  We then show that these problems can be reduced to CP net dominance and consistency testing by exploiting connections between actions in STRIPS planning and preference statements in CP nets  The complexity results in this paper address CP nets whose dominance relation may contain cycles  Most earlier work has concentrated on the acyclic model  However  as argued earlier  for instance by Domshlak and Brafman         acyclic CP nets are not sufficiently expressive to capture human preferences on even some simple domains   Consider  for instance  a diner who has to choose either red or white wine  and either fish or meat  Given red wine  they prefer meat  and conversely  given meat they prefer red wine  On the other hand  given white wine  they prefer fish  and conversely  given fish they prefer white wine  This gives a consistent cyclic CP net  and there is no acyclic CP net giving rise to the same preferences on outcomes  So  such cyclicity of preference variables does not necessarily lead to a cyclic order on outcomes      We do not mean to say that cyclic CP nets are sufficient to capture all possible human preferences on simple domains  this is obviously not true  However  we note that every preference relation extends the preference relation induced by some CP net with possibly cyclic dependencies  Not only is this property no longer true when cyclic dependencies are precluded but  in the case of binary variables  the number of linear orders that extends some acyclic CP net is exponentially smaller than the number of all linear orders  Xia  Conitzer    Lang                T HE C OMPUTATIONAL C OMPLEXITY OF D OMINANCE AND C ONSISTENCY IN CP N ETS  We assume some familiarity with the complexity class PSPACE  We refer to Papadimitriou        for details  In particular  we later use the identities NPSPACE   PSPACE   coPSPACE  In several places  we will consider versions of decision problem  in which input instances are assumed to have some additional property  Such problems are usually formulated in the following way  Q  given R    We first note that Q  given R is not the same problem as Q and R  Let us recall the definition of a decision problem as presented by Ausiello et al          A decision problem is a pair P   hIP  YP i where IP is a set of strings  formally  a subset of    where  is a finite alphabet   The decision problem P   hIP  YP i reads as follows  given a string x  IP   decide whether x  YP   A problem hIP  YP i is in a complexity class C if the language YP   is in C  this does not depend on IP    A problem hIQ  YQ i is reducible to hIP  YP i if there is a polynomial time function F such that     for every x  IQ   F x   IP   and     for every x  IQ   x  YQ if and only if F x   YP   Thus  if P is the decision problem Q  given R  then IP is the set of all strings satisfying R  while YP is the set of all strings satisfying R  Q  For all such problems  it is granted that the input belongs to R  to solve them we do not have to check that the input string is indeed an element of R  Such problems Q  given R are widespread in the literature  However  in most cases  R is a very simple property  that can be checked in polynomial  and often linear  time  such as decide whether a graph possesses a Hamiltonian cycle  given that every vertex has a degree at most    Here  however  we will consider several problems Q  given R where R itself is not in the class P  unless the polynomial hierarchy collapses   However  as we said above  the complexity of recognizing whether a given string is in R does not matter  In other words  the complexity of Q  given R is the same  whether R can be recognized in unit time or is PSPACE complete  We will come back to this when the first such problem appears in the paper  cf  the proof of Proposition     In no case that we consider is the complexity of R greater than the complexity of Q  A part of this paper  up to Section    is an extended version of our earlier conference publication  Goldsmith  Lang  Truszczynski    Wilson         Sections   and   are entirely new      Generalized Propositional CP Nets Let V    x            xn   be a finite set of variables  For each variable x  V   we assume a finite domain Dx of values  An outcome is an n tuple  d            dn   of Dx       Dxn   In this paper  we focus on propositional variables  variables with binary domains  Let V be a finite set of propositional variables  For every x  V   we set Dx    x  x   thus  we overload the notation and write x both for the variable and for one of its values   We refer to x and x as literals  Given a literal l we write l to denote the dual literal to l  The focus on binary variables makes the presentation clearer and has no impact on our complexity results  We also note that in the case of binary domains  we often identify an outcome with the set of its values  literals   In fact  we also often identify such sets with the conjunctions of their elements  Sets  conjunctions  of literals corresponding to outcomes are consistent and complete  A conditional preference rule  sometimes  a preference rule or just a rule  over V is an expression p   l   l  where l is a literal of some atom x  V and p is a propositional formula over V that does not involve variable x     In the literature one often finds the following formulation  Q  even if R  which does not have exactly the same meaning as Q  given R  Specifically  when saying Q is NP complete  even if R  one means Q is NP complete  and Q  given R is NP complete as well         G OLDSMITH   L ANG   T RUSZCZY NSKI   W ILSON  In the rest of the paper  we need to refer to two different languages  a conditional preference language where for every  binary  variable x  the conditional preference table for x needs to specify a preferred value of x for every possible assignment of its parent variables  and a more general language where the tables may be incomplete  for some values of its parents  the preferred value of x may not be specified  and or locally inconsistent  for some values of its parents  the table may both contain the information that x is preferred and the information that x is preferred   We call these languages respectively CP nets and GCP nets  for generalized CP nets   Note that GCP nets are not new  as similar structures have been discussed before  Domshlak  Rossi  Venable    Walsh         The reason why we use this terminology  CP nets and GCP nets  is twofold  First  even if the assumptions of completeness and local consistency for CP nets are sometimes relaxed  most papers on CP nets do make them  Second  we could have used CP nets and locally consistent  complete CP nets instead of GCP nets and CP nets  but we felt our notation is simpler and more transparent  Definition    Generalized CP net  A generalized CP net C  for short  a GCP net  over V is a set of conditional preference rules  For x  V we define pC   x  and pC  x   usually written just  p   x  and p  x   as follows  pC   x  is equal to the disjunction of all p such that there exists a rule p   x   x in C  pC  x  is the disjunction of all p such that there exists a rule p   x   x in C  We define the associated directed graph GC  the dependency graph  over V to consist of all pairs  y  x  of variables such that y appears in either p   x  or p  x   In our complexity results we will also need the following representation of GCP nets  a GCPnet C is said to be in conjunctive form if C only contains rules p   l   l such that p is a  possibly empty  conjunction of literals  In this case all formulas p  x   p   x  are in disjunctive normal form  that is  a disjunction of conjunctions of literals  including   the empty conjunction of literals   GCP nets determine a transitive relation on outcomes  interpreted in terms of preference  A preference rule p   l   l represents the statement given that p holds  l is preferred to l ceteris paribus  Its intended meaning is as follows  If outcome  satisfies p and l  then  is preferred to the outcome  which differs from  only in that it assigns l to variable x  In this situation we say that there is an improving flip from  to  sanctioned by the rule p   l   l  Definition   If             m is a sequence of outcomes with m    and each next outcome in the sequence is obtained from the previous one by an improving flip  then we say that             m is an improving sequence from   to m for the GCP net  and that m dominates     written    m   Finally  a GCP net is consistent if there is no outcome  which is strictly preferred to itself  that is  such that     The main objective of the paper is to establish the complexity of the following two problems concerning the notion of dominance associated with GCP nets  sometimes under restrictions on the class of input GCP nets   Definition   GCP   DOMINANCE   given a GCP net C and two outcomes  and   decide whether    in C  that is  whether  dominates  in C  GCP   CONSISTENCY   given a GCP net C  decide whether C is consistent        T HE C OMPUTATIONAL C OMPLEXITY OF D OMINANCE AND C ONSISTENCY IN CP N ETS  GCP nets extend the notion of CP nets  Boutilier et al          There are two properties of GCP nets that are essential in linking the two notions  Definition   A GCP net C over V is locally consistent if for every x  V   the formula pC  x   pC   x  is unsatisfiable  It is locally complete if for every x  V   the formula pC  x   pC   x  is a tautology  Informally  local consistency means that there is no outcome in which both x is preferred over x and x is preferred over x  Local completeness means that  for every variable x  in every outcome either x is preferred over x or x is preferred over x  Definition    Propositional CP net  A CP net over the set V of  propositional  variables is a locally consistent and locally complete GCP net over V   It is not easy to decide whether a GCP net is actually a CP net  In fact  the task is coNPcomplete  Proposition   The problem of deciding  given a GCP net C  whether C is a CP net is coNPcomplete  Proof  Deciding whether a GCP net C is a CP net consists of checking local consistency and local completeness  Each of these tasks amounts to n validity tests  one for each variable   It follows that deciding whether a GCP net is a CP net is the intersection of  n problems from coNP  Hence  it is in coNP  itself  Hardness comes from the following reduction from UNSAT  To any propositional formula  we assign the CP net C    defined by its set of variables Var   z   where z   Var    and the following tables      for any variable x    z  pC    x      pC    x          z       z      pC    pC          z      There z   pC    x      moreover  pC    x   pC   For any variable x    z  we have pC      fore  C   is locally consistent  Now  for any variable x    z  we have pC    x   pC    x         Moreover  pC    z   pC    z      Thus  C   is locally complete if and only if  is unsatisfiable  It follows that C   is a CP net if and only if  is unsatisfiable     Many works on CP nets make use of explicit conditional preference tables that list every combination of values of parent variables  variables on which x depends  exactly once  each such combination designating either x or x as preferred   Clearly  CP nets in this restricted sense can be regarded as CP nets in our sense that  for every variable x  satisfy the following condition  if y            yk are all the atoms appearing in p   x  and p  x  then every complete and consistent conjunction of literals over  y            yn   appears as a disjunct in exactly one of p   x  and p  x      There are exceptions  Some are discussed for instance by Boutilier et al       a  in Section   of their paper         G OLDSMITH   L ANG   T RUSZCZY NSKI   W ILSON  Under this embedding  the concepts of dominance and consistency we introduced here for GCP nets generalize the ones considered for CP nets as defined by Boutilier et al       a   Problems CP   DOMINANCE and CP   CONSISTENCY are defined analogously to Definition    In the paper we are interested in the complexity of dominance and consistency problems for both GCPnets and CP nets  Therefore  the matter of the way in which these nets  especially CP nets  as for GCP nets there are no alternative proposals  are represented is important  Our representation of CP nets is often more compact than the one proposed by Boutilier et al       a   as the formulas p   x  and p  x  implied by the conditional preference tables can often be given equivalent  but exponentially smaller  disjunctive normal form representations  Thus  when defining a decision problem  it is critical to specify the way to represent its input instances  as the representation may affect the complexity of the problem  Unless stated otherwise  we assume that GCP nets  and thus  CP nets  are represented as a set of preference rules  as described in Definition    Therefore  the size of a GCP net is given by the total size of the formulas p  x   p   x   x  V   We now note a key property of consistent GCP nets  which we will use several times later in the paper  Proposition   If a GCP net C is consistent then it is locally consistent  Proof  If C is not locally consistent then there exists a variable x and an outcome  satisfying pC  x   pC   x   Then    can be shown by flipping x from its current value in  to the dual value and then flipping it back  since  satisfies pC  x   pC   x   and since pC  x   pC   x  does not involve any occurrences of x  both flips are allowed    Finally  we conclude this section with an example illustrating the notions discussed above  Example   Consider a GCP net C on variables V    x  y  with four rules  defined as follows  x   y   y  x   y   y  y   x   x  y   x   x  We have p   y    x  p  y    x  p   x    y and p  x    y  Therefore C is locally consistent and locally complete  and so is a CP net  There is a cycle of dominance between outcomes  x  y  x  y  x  y  x  y  x  y  and so C is inconsistent  This shows that consistency is a strictly stronger property than local consistency      Propositional STRIPS Planning In this section we derive some technical results on propositional STRIPS planning which form the basis of our complexity results in Sections   and    We establish the complexity of plan existence problems for propositional STRIPS planning under restrictions on input instances that make the problem of use in the studies of dominance and consistency in GCP nets  Let V be a finite set of variables  A state over V is a complete and consistent set of literals over V   which we often view as the conjunction of its members  A state is therefore equivalent to an outcome  defined in a CP nets context  Definition    Propositional STRIPS planning  By a propositional STRIPS instance we mean a tuple hV        ACTi  where    V is a finite set of propositional variables        T HE C OMPUTATIONAL C OMPLEXITY OF D OMINANCE AND C ONSISTENCY IN CP N ETS       is a state over V   called the initial state      is a state called the goal      ACT is a finite set of actions  where each action a  ACT is described by a consistent conjunction of literals pre a   a precondition  and a consistent conjunction of literals post a   a postcondition  or effect    An action a is executable in a state  if     pre a   The effect of a in state   denoted by eff  a     is the state  containing the same literals as  for all variables not mentioned in post a   and the literals of post a   We assume that an action can be applied to any state  but that it does not change the state if its preconditions do not hold  if      pre a   given that states are complete  this is equivalent to     pre a   then eff  a        This assumption has no influence as far as complexity results are concerned  The PROPOSITIONAL STRIPS PLAN EXISTENCE problem  or STRIPS PLAN for short  is to decide whether for a given propositional STRIPS instance hV        ACTi there is a finite sequence of actions leading from the initial state   to the final state   Each such sequence is a plan for hV        ACTi  A plan is irreducible if every one of its actions changes the state  We assume  without loss of generality  that for any action a  no literal in post a  appears also in pre a   otherwise we can omit the literal from post a  without changing the effect of the action  if post a  then becomes an empty conjunction  the action a can be omitted from ACT as it has no effect  We have the following result due to Bylander         Proposition    Bylander         STRIPS PLAN  is PSPACE complete   Typically  propositional STRIPS instances do not require that goals be states  Instead  goals are defined as consistent conjunctions of literals that do not need to be complete  In such a setting  a plan is a sequence of actions that leads from the start state to a state in which the goal holds  We restrict consideration to complete goals  This restriction has no effect on the complexity of the plan existence problem  it remains PSPACE complete under the goal completeness restriction  Lang             Acyclic STRIPS Definition    Acyclic sets of actions  A set of actions ACT  we use the same notation as in Definition    is acyclic if there is no state  such that hV      ACTi has a non empty irreducible plan  that is to say  if there are no non trivial directed cycles in the graph on states induced by ACT  We will now establish the complexity of the following problem  ACTION   SET ACYCLICITY    given a set ACT of actions  decide whether ACT is acyclic   Proposition   ACTION   SET ACYCLICITY is PSPACE complete     Note that in standard STRIPS the goal can be a partial state  This point is discussed just after Proposition       We emphasize that we allow negative literals in preconditions and goals  Some definitions of STRIPS do not allow this  This particular variant of STRIPS is sometimes called PSN  propositional STRIPS with negation  in the literature         G OLDSMITH   L ANG   T RUSZCZY NSKI   W ILSON  Proof  The argument for the membership in PSPACE is standard  we nevertheless give some details  We will omit such details for further proofs of membership in PSPACE  The following nondeterministic algorithm decides that ACT has a cycle  guess             repeat guess an action a  ACT       eff  a          until        This algorithm works in nondeterministic polynomial space  because we only need to store      and     which shows that ACTION   SET ACYCLICITY is in NPSPACE  and therefore in PSPACE  since NPSPACE   PSPACE  Thus  ACTION   SET ACYCLICITY is in coPSPACE  hence in PSPACE  since coPSPACE   PSPACE  We will now show that the complement of the ACTION   SET ACYCLICITY problem is PSPACEhard by reducing the ACYCLIC STRIPS PLAN problem to it  Let PE   hV        ACTi be an instance of the ACYCLIC STRIPS PLAN problem  In particular  we have that ACT is acyclic  Let a be a new action defined by pre a     and post a        It is easy to see that ACT   a  is not acyclic if and only if there exists a plan for PE  Thus  the PSPACEhardness of the complement of the ACTION   SET ACYCLICITY problem follows from Proposition    Consequently  the ACTION   SET ACYCLICITY problem is coPSPACE hard  Since PSPACE   coPSPACE  the ACTION   SET ACYCLICITY problem is PSPACE hard  as well    Next  we consider the STRIPS planning problem restricted to instances that have acyclic sets of actions  Formally  we consider the following problem  ACYCLIC STRIPS PLAN   Given a propositional STRIPS instance hV        ACTi such that ACT is acyclic and        decide whether there is a plan for hV        ACTi  This is the first of our problems of the form Q  given R that we encounter and it illustrates well the concerns we discussed at the end of the introduction  Here  R is the set of all propositional STRIPS instances hV        ACTi such that ACT is acyclic  and Q is the set of all such instances for which there is a plan for hV        ACTi  Checking whether a given propositional STRIPS instance is actually acyclic is itself PSPACE complete  this is what Proposition   states   but this does not matter when it comes to solving ACYCLIC STRIPS PLAN  when considering an instance of ACYCLIC STRIPS PLAN   we already know that it is acyclic  and this is reflected in the reduction below   Proposition   ACYCLIC STRIPS PLAN  is PSPACE complete   Proof  The argument for the membership in PSPACE is standard  cf  the proof of Proposition     To prove PSPACE hardness  we first exhibit a polynomial time reduction F from STRIPS PLAN  Let PE   hV        ACTi be an instance of STRIPS PLAN  The idea behind the reduction is to introduce a counter  so that each time an action is executed  the counter is incremented  The counter may count up to  n   where n    V    making use of n additional variables  The counter is initialized to       T HE C OMPUTATIONAL C OMPLEXITY OF D OMINANCE AND C ONSISTENCY IN CP N ETS     Once it reaches  n    it can no longer be incremented and no action can be executed  Hence  the set of actions in the resulting instance of STRIPS PLAN is acyclic  we are guaranteed to produce an instance of R  To describe the reduction  we write V as  x            xn    We define F PE    PE   hV           ACT  i as follows   V     x            xn   z            zn    where zi are new variables we will use to implement the counter          z       zn         z       zn    for each action a  ACT  we include in ACT  n actions ai      i  n  such that    pre ai     pre a   zi  zi        zn  for i  n      post ai     post a   zi  zi        zn   and   pre an     pre a   zn  for i   n   post an     post a   zn    Furthermore  we include in ACT  n actions bi      i  n  such that    pre bi     zi  zi        zn  for i  n      post bi     zi  zi        zn   and   pre bn     zn  for i   n   post bn     zn   We will denote states over V  by pairs    k   where  is a state over V and k is an integer     k   n     We view k as a compact representation of a state over variables z            zn   assuming that the binary representation of k is d        dn  with dn being the least significant digit   k represents the state which contains zi if di     and zi   otherwise  For instance  let V    x    x    x     Then we have V     x    x    x    z    z    z     and the state x   x   x   z   z   z  is denoted by  x   x   x        We note that the effect of ai or bi on state    k  is either void  or increments the counter  eff  ai      k          eff  a     k      if ai is executable in    k     k  otherwise  eff  bi      k            k      if bi is executable in    k     k  otherwise  Next  we remark that at most one ai and at most one bi are executable in a given state    k   More precisely   if k    n     then exactly one bi is executable in    k   denote by i k  the index such that bi k  is executable in    k   this index depends only on k   We also have that ai k  is executable in    k   provided that a is executable in    if k    n     then no ai and no bi is executable in    k         G OLDSMITH   L ANG   T RUSZCZY NSKI   W ILSON  Now we show that PE is acyclic  Assume  is an irreducible plan for hV          ACT  i  Let      k   If k    n     then  is empty  since any action in ACT  in any state either is nonexecutable or increments the counter  and an irreducible plan contains only actions whose effect is non void  If k    n     then no action of ACT  is executable in  and again  is empty  Thus  there exists no non empty irreducible plan for hV          ACT  i  and this holds for all    Therefore PE is acyclic  We now claim that there is a plan for PE if and only if there is a plan for PE   First  assume that there is a plan in PE  Let  be a shortest plan in PE and let m be its length  the number of actions used   We have m   n     since no state along  repeats  otherwise  shorter plans than  for PE would exist   Let                 m    be the sequence of states obtained by executing   Let a be the action used in the transition from k to k     Since k    n     because m   n    and k  m      there is exactly one i     i  n  such that the action ai applies at the state    k  over V    Replacing a with ai in  yields a plan that when started at         leads to  m   m       m   Appending that plan with appropriate actions bi to increment the counter to  n    yields a plan for PE   Conversely  if  is a plan for PE   the plan obtained from  by removing all actions of the form b j and replacing each action ai with a is a plan for PE  since ai has the same effect on V as a does  Thus  the claim follows      We emphasize that this reduction F from STRIPS PLAN to ACYCLIC STRIPS PLAN  or  equivalently  to STRIPS PLAN given ACTION   SET ACYCLICITY  works because it satisfies the following two conditions     for every instance PE of STRIPS PLAN  F PE  is an instance of ACYCLIC STRIPS PLAN  this holds because for every PE  F PE  is acyclic      for every PE of STRIPS PLAN  F PE  is a positive instance of ACYCLIC only if PE is a positive instance of STRIPS PLAN   STRIPS PLAN  if and      Mapping STRIPS Plans to Single Effect STRIPS Plans Versions of the STRIPS PLAN and ACYCLIC STRIPS PLAN problems that are important for us allow only actions with exactly one literal in their postconditions in their input propositional STRIPS instances  We call such actions single effect actions   We refer to the restricted problems as SE STRIPS PLAN and ACYCLIC SE STRIPS PLAN   respectively  To prove PSPACE hardness of both problems  we describe a mapping from STRIPS instances to single effect STRIPS instances   Consider an instance PE   hV        ACTi of the STRIPS PLAN problem  where ACT is not necessarily acyclic  For each action a  ACT we introduce a new variable xa   whose intuitive meaning is that action a is currently being executed  V We set X   aACT xa   That is  X is the conjunction of negative literals of all the additional V variables  In addition  for each a  ACT we set Xa   xa  bACT a  xb   We now define an instance PE   hV           S ACT i of the SE STRIPS PLAN problem as follows     Such actions are also called unary actions in the planning literature  We stick to the terminology single effect although it is less commonly used  simply because it is more explicit     PSPACE completeness of propositional STRIPS planning with single effect actions was proved already by Bylander         However  to deal with acyclicity we need to give a different reduction than the one used in that paper         T HE C OMPUTATIONAL C OMPLEXITY OF D OMINANCE AND C ONSISTENCY IN CP N ETS   Set of variables  V    V   xa   a  ACT    initial state         X   goal state       X   set of actions  S ACT     ai   a  ACT  i                post a         Let a be an action in ACT such that post a    l       lq   where l            lq are literals   For i              q  we define an action ai by setting  pre ai     pre a   X  li   post ai     xa   The role of ai is to enforce that Xa holds after ai is successfully applied  and in this way to enable starting the execution of a  provided that no action is currently being executed  that the ith effect of a is not already true  and that the precondition of a is true   For i   q               q  we define action ai by setting  pre ai     Xa   post ai     li   The role of ai is to make the ith effect of a true   Finally  we define a q   by setting  pre a q       Xa  l       lq   post a q       xa   Thus  a q   is designed so that X holds after a q   is successfully applied  that is  a q   closes the execution of a  thus allowing for the next action to be executed  Let  be a sequence of actions in ACT  We define S   to be the sequence of actions in S ACT  obtained by replacing each action a in  by a            a q     where q    post a    Now consider a sequence  of actions from S ACT   Remove from  every action ai such that i      post a        and replace actions of the form a  post a     by a  We denote the resulting sequence of actions from ACT by S     We note that S  S        The following properties then hold  Lemma   With the above definitions   i  if  is a plan for PE then S   is a plan for PE    ii  if  is an irreducible plan for PE then S    is an irreducible plan for PE   iii  ACT is acyclic if and only if S ACT  is acyclic  Proof   i  Let a  ACT be an action  let  be a state and let  be the state obtained from  by applying a  Let  be the V   state obtained by applying the sequence of actions ha            a q   i  where q    post a    to the state   X of PE   We will show that      X  We note that if for each i              q  state   X does not satisfy pre ai   then the sequence of actions ha            a q   i has no effect  so the state is still   X  For this to happen  either  doesnt satisfy pre a   or all of l            lq already hold in  so post a  holds in   In either case       and so      X        G OLDSMITH   L ANG   T RUSZCZY NSKI   W ILSON  Suppose now that for some i              q    does satisfy pre ai    Then the first such action causes xa and hence Xa to hold  After applying actions aq             a q   l       lq holds  and so post a  holds  After applying a q   both post a  and X hold  No other variable in V has changed  so      X  as required  Applying this result iteratively implies that if  is a plan for PE then S   is a plan for PE    ai   ii  Let  be an irreducible plan for PE   so that every action in  changes the state  which implies that every action in  is performed in a state where its precondition is true  We will show that S      When         S           too  and the assertion follows  is a plan for PE  We will assume that        j  Write the first action in  as a   where a  ACT  and let  be the maximal initial subsequence of  consisting of all actions of the form ai   We must have j   post a    since X holds in    by our assumption above  action a j does apply  and X is inconsistent with the precondition of ai for each i    post a    Also  pre a j   and l j hold in   and so  in   as well  Thus    satisfies pre a   and applying a changes the state  since l j holds in   and post a     l j   Let us denote by  the state resulting from applying a to     As we noted          Let  be the state resulting after applying  to     If  is the goal state  then X holds in    If  is not the goal state then        Let bi be the action in  directly following the last action in    By the definition of    a    b  After applying a j   Xa holds  so in  either Xa holds or X holds  Thus  Xb does not hold  as a    b  Since bi changes the state  i must be in              post b     so X holds in  in this case  too  Hence the last action in  is a q     where q    post a    Since the only variables in V which can be affected by actions ai are those that appear in the literals in post a  and since the action a q   can be executed  otherwise it would not belong to    it follows that      X  Applying this reasoning repeatedly  we show that applying S    to   yields   and that each action in S    changes the state  so S    is an irreducible plan for PE  which is non empty if and only if  is non empty   iii  Suppose ACT is not acyclic  so that there exists state  and a non empty irreducible plan  for PE   hV      ACTi  Then  by  i   S   is a plan for PE   hV      X    X  S ACT  i  Because  is non empty and irreducible  it changes some state  so S   also changes some state  and hence can be reduced to a non empty irreducible plan for PE   Therefore S ACT  is not acyclic  Conversely  suppose that S ACT  is not acyclic  Then there exists a state  and a non empty irreducible plan  for hV          S ACT i  We will first prove that X holds at some state obtained during the execution of this plan    By Suppose that X holds at no such state  and let a j be the first action in   We note that        our assumption  X does not hold either before or after applying a j   Therefore q      j   q  where q    post a    Since  is irreducible  a j changes the state  Thus  l j holds in  and l j holds in the state resulting from  after applying a j   By our assumption  Xa holds before and after applying a j   Thus  the next action  if there is one  must also be of the form ai for q      i   q  Repeating this argument implies that all actions in  are of the form ai where q      i   q  Since the set of literals in post a  is consistent  l j is never reset back to l j   Thus  the state resulting from  after applying  is different from    a contradiction  Thus  X holds at some state reached during the execution of   Let us consider one such state  It can be written as   X  for some state  over V   We can cyclically permute  to generate a non empty irreducible plan  for hV      X    X  S ACT i  By part  ii   S     is a non empty       T HE C OMPUTATIONAL C OMPLEXITY OF D OMINANCE AND C ONSISTENCY IN CP N ETS  irreducible plan for hV      ACTi  Therefore ACT is not acyclic      Proposition   SE STRIPS PLAN  and ACYCLIC SE STRIPS PLAN are PSPACE complete   Proof  Again  the argument for the membership in PSPACE is standard  PSPACE hardness of ACYCLIC SE STRIPS PLAN is shown by reduction from ACYCLIC STRIPS PLAN   The same construction shows that STRIPS PLAN is reducible to SE STRIPS PLAN  and thus SE STRIPS PLAN is PSPACE complete  Let us consider an instance PE   hV        ACTi of ACYCLIC STRIPS PLAN  We define PE    hV          S ACT i  which by Lemma   iii  is an instance of the ACYCLIC SE STRIPS PLAN problem  By Lemma   i  and  ii  there exists a plan for PE if and only if there exists a plan for PE   This implies that ACYCLIC SE STRIPS PLAN is PSPACE hard        Dominance The goal of this section is to prove that the GCP   DOMINANCE problem is PSPACE complete  and that the complexity does not go down even when we restrict the class of inputs to CP nets  We use the results on propositional STRIPS planning from Section   to prove that the general GCP DOMINANCE problem is PSPACE complete  We then show that the complexity does not change if we require the input GCP net to be locally consistent and locally complete  The similarities between dominance testing in CP nets and propositional STRIPS planning were first noted by Boutilier et al          They presented a reduction  discussed later in more detail by Boutilier et al       a   from the dominance problem to the plan existence problem for a class of propositional STRIPS planning specifications consisting of unary actions  actions with single effects   We prove our results for the GCP   DOMINANCE and GCP   CONSISTENCY problems by constructing a reduction in the other direction  This reduction is much more complex than the one used by Boutilier et al          due to the fact that CP nets impose more restrictions than STRIPS planning  Firstly  STRIPS planning allows multiple effects  but GCP nets only allow flips x   x or x   x that change the value of one variable  this is why we constructed the reduction from STRIPS planning to single effect STRIPS planning in the last section  Secondly  CP nets impose two more restrictions  local consistency and local completeness  which do not have natural counterparts in the context of STRIPS planning  For all dominance and consistency problems we consider  the membership in PSPACE can be demonstrated similarly to the membership proof of Proposition    namely by considering nondeterministic polynomial space algorithms consisting of repeatedly guessing appropriate improving flips and making use of the fact that PSPACE   NPSPACE   coPSPACE  Therefore  from now on we only provide arguments for the PSPACE hardness of problems we consider      Dominance for Generalized CP Nets We will prove that the GCP   DOMINANCE problem is PSPACE complete by a reduction from the problem SE STRIPS PLAN  which we now know to be PSPACE complete        G OLDSMITH   L ANG   T RUSZCZY NSKI   W ILSON        M APPING S INGLE  E FFECT STRIPS P ROBLEMS P ROBLEMS  TO  GCP N ETS D OMINANCE  Let hV        ACTi be an instance of the SE STRIPS PLAN problem  For every action a  ACT we denote by la the unique literal in the postcondition of a  that is  post a    la   We denote by pre  a  the conjunction of all literals in pre a  different from la  we recall that by a convention we adopted earlier  pre  a  does not contain la    We then define ca to be the conditional preference rule pre  a    la   la and define M ACT  to be the GCP net C    ca   a  ACT   which is in conjunctive form  A sequence of states in a plan corresponds to an improving sequence from   to   which leads to the following result  Lemma   With the above notation   i  there is a non empty irreducible plan for hV        ACTi if and only if  dominates   in M ACT    ii  ACT is acyclic if and only if M ACT  is consistent  Proof  We first note the following equivalence  Let a be an action in ACT  and let  and  be different outcomes  or  in the STRIPS setting  states   The action a applied to  yields  if and only if the rule ca sanctions an improving flip from  to   This is because a applied to  yields  if and only if  satisfies pre a  and  and  differ only on literal la   with  satisfying la and  satisfying la   This is if and only if  satisfies pre  a  and  and  differ only on literal la   with  satisfying la   and  satisfying la   This  in turn  is equivalent to say that rule ca sanctions an improving flip from  to   Proof of  i   Suppose first that there exists a non empty irreducible plan a            am for hV        ACTi  Let                 m    be the corresponding sequence of outcomes  and  for each i              m  action ai   when applied in state i    yields different state i   By the above equivalence  for each i              m  cai sanctions an improving flip from i  to i   which implies that                 m is an improving flipping sequence in M ACT   and therefore  dominates   in M ACT   Conversely  suppose that  dominates   in M ACT   so that there exists an improving flipping sequence                 m with m     and m     For each i              m  let cai be an element of M ACT  which sanctions the improving flip from i  to i   Then  by the above equivalence  action ai   when applied to state i  yields i  which is different from i     and so a            am is a non empty irreducible plan for hV        ACTi  Proof of  ii   ACT is not acyclic if and only if there exists a state  and a non empty irreducible plan for hV      ACTi  By  i  this is if and only if there exists an outcome  which dominates itself in M ACT   which is if and only if M ACT  is not consistent     Theorem   The GCP   DOMINANCE problem is PSPACE complete  Moreover  this remains so under the restrictions that the GCP net is consistent and is in conjunctive form  Proof  PSPACE hardness is shown by reduction from ACYCLIC SE STRIPS PLAN  Proposition     Let hV        ACTi be an instance of the ACYCLIC SE STRIPS PLAN problem  By Lemma   ii   M ACT  is a consistent GCP net in conjunctive form  Since        imposed in the definition of       T HE C OMPUTATIONAL C OMPLEXITY OF D OMINANCE AND C ONSISTENCY IN CP N ETS  the problem ACYCLIC SE STRIPS PLAN   there is a plan for hV        ACTi if and only if there is a non empty irreducible plan for hV        ACTi  which  by Lemma   i   is if and only if  dominates   in C    Theorem   implies the PSPACE completeness of dominance in the more general conditional preference language introduced by Wilson      b   where the conditional preference rules are written in conjunctive form      Dominance in CP Nets In this section we show that GCP   DOMINANCE remains PSPACE complete under the restriction to locally consistent and locally complete GCP nets  that is  CP nets  We refer to this restriction of GCP   DOMINANCE as CP   DOMINANCE   Consistency of a GCP net implies local consistency  Proposition     Therefore  the reduction in the proof of Theorem    from ACYCLIC SE STRIPS PLAN to GCP   DOMINANCE restricted to consistent GCP nets  is also a reduction to GCP   DOMINANCE restricted to locally consistent GCP nets  PSPACE hardness of ACYCLIC SE STRIPS PLAN  Proposition    then implies that GCP DOMINANCE restricted to locally consistent GCP nets is PSPACE hard  and  in fact  PSPACEcomplete since membership in PSPACE is easily obtained with the usual line of argumentation  We will show PSPACE hardness for CP   DOMINANCE by a reduction from GCP   DOMINANCE for consistent GCP nets        M APPING L OCALLY C ONSISTENT GCP N ETS  TO  CP N ETS  Let C be a locally consistent GCP net  Let V    x            xn   be the set of variables of C  We define   We define a GCP net C over V    which we V    V   y            yn    where  y            yn    V      will show is a CP net  To this end  for every z  V  we will define conditional preference rules q   z    z   z and q  z    z   z to be included in C by specifying formulas q   z  and q  z   First  for each variable xi  V   we set q   xi     yi and q  xi     yi   Thus  xi depends only on yi   We also note that the formulas q   xi   and q  xi   satisfy local consistency and local completeness requirements  Next  for each variable yi      i  n  we define ei    x   y          xi   yi      xi    yi           xn  yn    fi    ei  p   xi   and fi   ei  p  xi    Finally  we define q   yi     fi     fi  xi   and q  yi     fi    fi   xi    Thus  yi depends on every variable in V  but itself  We note that by the local consistency of C  formulas fi   fi      i  n  are unsatisfiable  Consequently  formulas q   yi    q  yi       i  n  are unsatisfiable  Thus  C is locally consistent        G OLDSMITH   L ANG   T RUSZCZY NSKI   W ILSON  Finally  q   yi    q  yi   is equivalent to fi   xi  fi  xi   so is a tautology  Thus  C is locally complete and hence a CP net over V    Let  and  be outcomes over  x            xn   and  y            yn    respectively  By  we denote the outcome over V  obtained by concatenating n tuples  and   Conversely  every outcome for C can be written in this way  Let  be an outcome over V   We define  to be the outcome over  y            yn   obtained by replacing in  every component of the form xi with yi and every component xi with yi   Then for every i     i  n      ei   Let s be a sequence             m of outcomes over V   Define L s  to be the sequence of V  outcomes                                  m m   Further  let t be a sequence                 m of V  outcomes with      and m     Define L  t  to be the sequence obtained from t by projecting each element in t to V and iteratively removing elements in the sequence which are the same as their predecessor  until any two consecutive outcomes are different   Lemma   With the above definitions   i  if s is an improving sequence for C from  to  then L s  is an improving sequence for C from  to    ii  if t is an improving sequence from  to  then L  t  is an improving sequence from  to    iii  C is consistent if and only if C is consistent  Proof  Let e   ni    xi  yi    The definitions have been arranged so that the GCP net C and the CP net C have the following properties   a  If e does not hold in an outcome  over V    then every improving flip applicable to  changes the value of some variable xi or yi so that xi  yi holds after the flip  Indeed  let us assume that there is an improving flip from  to some outcome  over V    If the flip concerns a variable xi   then xi  yi holds in   Consequently  xi  yi holds in    Thus  let us assume that the flip concerns a variable yi   If ei holds in  then  since e does not  xi  yi holds in   Thus  xi  yi holds in    If ei does not hold in  then neither fi  nor fi does  Thus  if xi  xi   respectively  holds in   yi  yi   respectively  holds in    Since the flip concerns yi   it follows that xi  yi holds in     b  No improving flip from  changes any variable xi   Indeed  for any variable xi   since e holds in   xi  yi holds in   too  Thus  no improving flip changes xi    c  There is an improving flip in C that changes variable yi in an outcome  if and only if there is an improving flip for the GCP net C from outcome  that changes variable xi   After applying the improving flip  changing variable yi   to   there is exactly one improving flip possible  It changes xi and results in an outcome   where  is the outcome over V resulting from applying to  the improving flip changing the variable xi   To prove  c   let us first assume that yi holds in  and observe that in such case xi holds in   too  It follows that q   yi   holds in  if and only if p   xi   holds in   Consequently  changing yi in  is an improving flip in C if and only if changing xi in  is an improving flip in C  The argument in the case when yi holds in  is analogous  but involves q  yi   and p  xi     Thus  the first part of  c  follows  V        T HE C OMPUTATIONAL C OMPLEXITY OF D OMINANCE AND C ONSISTENCY IN CP N ETS  Let  be the outcome obtained by applying an improving flip to xi in   It follows that the improving flip changing the value of yi in  results in the outcome   In this outcome  by  a   an improving flip must concern x j or y j such that x j  y j holds after the flip  Since for every j    i  x j  y j holds in   the only improving flips in  concern either xi or yi   By the local consistency of C   yi cannot be flipped right back  Clearly  changing xi is an improving flip that can be applied to   By our discussion  it is the only improving flip applicable in  and it results in the outcome   This proves the second part of  c   Proof of  i   The assertion follows by iterative application of  c   Proof of  ii   Suppose that t is an improving sequence                 m of V   outcomes with      and m     Since e holds in      b  implies that the first flip changes some variable yi   and  c  implies that the second flip changes variable xi to make xi  yi hold again  Hence   can be written as   By  c  there is an improving flip in C from outcome  changing variable xi   that is  leading from  to   Iterating this process shows that L  t  is an improving sequence from  to   Proof of  iii   Suppose that C is inconsistent  Then there exists some outcome  and an improving sequence s in C from  to   By  i   L s  is an improving sequence from  to   proving that C is inconsistent  Conversely  suppose that C is inconsistent  so there exists an improving sequence t for C from some outcome to itself  By  a   any improving flip applied to an outcome in which e does not hold increases  by one  the number of i such that xi  yi holds  This implies that e must hold in some outcome in t  because t is not acyclic  Write this outcome as   We can cyclically permute t to form an improving sequence t  from  to itself  Part  ii  then implies that L  t    is an improving flipping sequence for C from  to itself  showing that C is inconsistent     Theorem   CP   DOMINANCE is PSPACE complete  This holds even if we restrict the CP nets to being consistent  Proof  We use a reduction from PSPACE hardness of the GCP   DOMINANCE problem when the GCP nets are restricted to being consistent  Theorem     Let C be a consistent  and hence locally consistent  GCP net over V   and let  and  be outcomes over V   Consider the CP net C over variables V  constructed above  Lemma   i  and  ii  imply that  dominates  in C if and only if  dominates  in C   Moreover  C is consistent by Lemma   iii   Consequently  the hardness part of the assertion follows    Note that PSPACE hardness obviously remains if we require input outcomes to be different  because the reduction for Theorem   uses a pair of different outcomes  Notice the huge complexity gap with the problem of deciding whether there exists a nondominated outcome  which is only NP complete  Domshlak et al                    Consistency of GCP Nets In this section we show that the from Sections   and     GCP   CONSISTENCY       problem is PSPACE complete  using results   G OLDSMITH   L ANG   T RUSZCZY NSKI   W ILSON  Theorem   GCP   CONSISTENCY is PSPACE complete  This holds even under the restriction to GCP nets in conjunctive form  Proof  PSPACE hardness is shown by reduction from ACTION   SET ACYCLICITY  We apply function S from Section     followed by M from Section      This maps instances of ACTION   SET ACYCLICITY to instances of GCP   CONSISTENCY in conjunctive form  By Lemma   iii  and Lemma    ii   an instance of ACTION   SET ACYCLICITY is acyclic if and only if the corresponding instance of GCP   CONSISTENCY is consistent  proving the result    We now show that consistency testing remains PSPACE complete for CP nets  GCP nets that are both locally consistent and locally complete   Theorem    CP   CONSISTENCY  is PSPACE complete   Proof  We use a reduction from GCP   CONSISTENCY under the restriction that the GCP net is in conjunctive form  Let C be a GCP net in conjunctive form  We define a CP net C as follows  Because C is in conjunctive form  local consistency can be decided in polynomial time  as it amounts to checking the consistency of a conjunction of conjunctions of literals  If C is not locally consistent we set C to be a predetermined inconsistent but locally consistent CP net  such as in the example in Section    Otherwise  C is locally consistent and for C we take the CP net we constructed in Section      The mapping from locally consistent GCP nets to CP nets  described in Section      preserves consistency  Lemma    iii    Since local inconsistency implies inconsistency  Proposition     we have that the GCP net C is consistent if and only if the CP net C is consistent  Thus  PSPACE hardness of the CP   CONSISTENCY problem follows from Theorem          Additional Problems Related to Dominance in GCP Nets Having proved our main results on consistency of and dominance in GCP nets  we move on to additional questions concerning the dominance relation  Before we state them  we introduce more terminology  Let  and  be outcomes in a GCP net C  We say that  and  are dominance equivalent in C  written  C   if      or  C  and  C   Next   and  are dominance incomparable in C if       C  and C   Finally   strictly dominates  if  C  and  C   Definition   We define the following decision problems  SELF   DOMINANCE   given a GCP net C and an outcome   decide whether  C   that is  whether  dominates itself in C  STRICT DOMINANCE   given a GCP net C and outcomes  and   decide whether  strictly dominates  in C  DOMINANCE EQUIVALENCE   given a GCP net C and outcomes  and   decide whether  and  are dominance equivalent in C  DOMINANCE INCOMPARABILITY   given a GCP net C and outcomes  and   decide whether  and  are dominance incomparable in C        T HE C OMPUTATIONAL C OMPLEXITY OF D OMINANCE AND C ONSISTENCY IN CP N ETS  When establishing the complexity of these problems  we will use polynomial time reductions from the problem GCP   DOMINANCE  Let H be a GCP net with the set of variables V    x            xn    and let  be an outcome  We define a GCP net G      H    with the set of variables W   V   y  by setting the conditions for flips on variables xi   i              n  and y as follows     if xi      p  G  xi     pH  xi    y  p G  xi     pH  xi    y    if xi      p  G  xi     pH  xi    y  p G  xi     pH  xi    y    p  G  y        p G  y      The mapping   can be computed in polynomial time  Moreover  one can check that if H is a locally consistent GCP net     H    is also locally consistent  Finally  if H is a CP net     H    is a CP net  as well  For every V  outcome   we let       y and      y  We note that every W  outcome is of the form   or    To explain the structure of the GCP net G  we point out that there is an improving flip in G from   into   if and only if there is an improving flip in H from  to   thus  G restricted to outcomes of the form   forms a copy of the GCP net H   Moreover  there is an improving flip in G from  into  if and only if  agrees with  on exactly one more variable xi than  does  Finally  an improving flip moves between outcomes of different type if and only if it transforms  to     or   to  for some       We now formalize some useful properties of the GCP net G      H     We use the notation introduced above  Lemma   For every V  outcome    G   and  if         G    in other words    dominates every other W  outcome   Proof  Consider any V  outcome       Then   y C   y since  given y  changing a literal to the form it has in  is an improving flip  By the definition  we also have   y C   y and   y G   y  as        It follows that  G   and   G  G     Thus  the assertion follows     Lemma   For arbitrary V  outcome  different from   the following statements are equivalent      H        G          G           G OLDSMITH   L ANG   T RUSZCZY NSKI   W ILSON  Proof  By Lemma      G     Thus  the conditions     and     are equivalent           Clearly  recall our discussion about the structure of G   if there is an improving flip from  to  in H  then there is an improving flip from   to   in G  Thus  if there is an improving sequence in H from  to   there is an improving sequence in G from   to              Let us assume   G     and let us consider an improving sequence of minimum length from   to     By the minimality  no internal element in such a sequence is     Thus  no internal element equals  either  as the only improving flip from  leads to      Since an improving flip from  to   requires that      all outcomes in the sequence are of the form     By dropping y from each outcome in this sequence  we get an improving flipping sequence from  to  in H  Thus   H     Lemma   Let H be consistent and let  and  be different V  outcomes  Then    G   if and only if  H   Proof  Suppose there exists an improving sequence from   to itself  There must be an outcome in the sequence of the form   y  otherwise  dropping y in every outcome yields an improving sequence from  to  in H  contradicting the consistency of H   To perform an improving flip from y to y we need  to hold  which implies that   appears in the sequence  Thus    G     By Lemma     H   Conversely  let us assume that  H   Again by Lemma      G     By Lemma      G     Thus    G       The next construction is similar  Let H be a GCP net on variables V    x            xn    and let  be an outcome  We define a GCP net F      H    as follows  As before  we set W   V   y  to be the set of variables of F  We define the conditions for flips on variables xi   i              n  and y as follows       p  G  xi     pH  xi    y     p G  xi     pH  xi    y     p  G  y        p G  y      Informally  outcomes of the form   form in F a copy of H  There are no improving flips between outcomes of the form    There is an improving flip from   to  and  for every       from  to     In particular  if F is consistent then    H    is consistent  The mapping   can be computed in polynomial time and we also have the following property  Lemma   Let  be a V  outcome different from   Then the following conditions are equivalent      H      strictly dominates  in F     and  are not dominance incomparable in F        T HE C OMPUTATIONAL C OMPLEXITY OF D OMINANCE AND C ONSISTENCY IN CP N ETS  Proof  If there exists an improving sequence from  to  then the first improving flip in the sequence changes  to     Moreover  there is an improving flip from   to  if and only if      Thus   F  if and only if  H   Since  F  all three conditions are equivalent     Proposition   The following problems are PSPACE complete  SELF   DOMINANCE  STRICT INANCE   DOMINANCE EQUIVALENCE   and DOMINANCE INCOMPARABILITY    DOM    Proof  For all four problems  membership is proven easily as for the problems in earlier sections  For the PSPACE hardness proofs  we use the problem CP   DOMINANCE in a version when we required that the input CP net be consistent and the two input outcomes different  The problem is PSPACE hard by Theorem    Let H be a consistent CP net on a set V of variables  and let  and  be two different V  outcomes  By Lemma     H  can be decided by deciding the problem DOMINANCE EQUIVALENCE for   and   in the GCP net    H     Thus  the PSPACE hardness of DOMINANCE EQUIVALENCE follows  Next  the equivalence of Lemma      G     H   which holds due to consistency of H  shows that the problem SELF   DOMINANCE is PSPACE hard  Finally  by Lemma     H  can be decided either by deciding the problem STRICT DOMI NANCE for outcomes  and  in    H     or by deciding the complement of the problem DOM INANCE INCOMPARABILITY for  and  in the GCP net    H     It follows that STRICT DOM INANCE and DOMINANCE INCOMPARABILITY  the latter by the fact that coPSPACE PSPACE  are PSPACE complete      Corollary   The problems SELF   DOMINANCE and DOMINANCE EQUIVALENCE are PSPACE complete under the restriction to CP nets  The problems STRICT DOMINANCE and DOMINANCE IN COMPARABILITY remain PSPACE complete under the restriction to consistent CP nets  Proof  Since in the proof of Proposition   we have that H is a CP net  the claim for the first two problems follows by our remarks that the mapping   preserves the property of being a CP net  For the last two problems  we observe that since H in the proof of Proposition   is assumed to be consistent  F      H    is consistent  too  Thus  it is also locally consistent and the mapping F to F  we used for the proof of Theorem   applies  In particular  F  is a consistent CP net and has the following properties  implied by Lemma         strictly dominates  in F if and only if  strictly dominates  in F      and  are dominance incomparable in F if and only if  and  are dominance incomparable in F    Since F  is a consistent CP net  the claim for the last two problems follows  too         For STRICT DOMINANCE  the result could have been also obtained as a simple corollary of Theorem    since in consistent GCP nets dominance is equivalent to strict dominance         G OLDSMITH   L ANG   T RUSZCZY NSKI   W ILSON     Problems Concerning Optimality in GCP Nets The dominance relation C of a GCP net C determines a certain order relation  which gives rise to several notions of optimality  We will introduce them and study the complexity of corresponding decision problems  We first observe that the dominance equivalence relation is indeed an equivalence relation  reflexive  symmetric and transitive   Thus  it partitions the set of all outcomes into non empty equivalence classes  which we call dominance classes  We denote the dominance class of an outcome  in a GCP net C by   C   The relation C induces on the set of dominance classes a strict order relation  a relation that is irreflexive and transitive   Namely  we define   C Cdc   C if   C      C  equivalently    C   and  C   One can check that the definition of the relation Cdc on dominance classes is independent of the choice of representatives of the classes  Definition    Non dominated class  optimality in GCP nets  Let C be a GCP net  A dominance class   C is non dominated if it is maximal in the strict order Cdc  there is no dominance class   C such that   C Cdc   C    A dominance class is dominating if for every dominance class   C     C     C or   C Cdc   C   An outcome  is weakly non dominated if it belongs to a non dominated class  If  is weakly non dominated and is the only element in its dominance class  then  is non dominated  An outcome  is dominating if it belongs to a dominating class  An outcome  is strongly dominating if it is dominating and non dominated  Outcomes that are weakly non dominated  non dominated  dominating and strongly dominating capture some notions of optimality  In the context of CP nets  weakly non dominated and nondominated outcomes were proposed and studied before  Brafman   Dimopoulos         They were referred to as weakly and strongly optimal there  Similar notions of optimality were also studied earlier for the problem of defining winners in partial tournaments  Brandt  Fischer    Harrenstein         We will study here the complexity of problems to decide whether a given outcome is optimal and whether optimal outcomes exist  First  we note the following general properties  simple consequences of properties of finite strict orders   Lemma   Let C be a GCP net     There exist non dominated classes and so  weakly non dominated outcomes     Dominating outcomes and nondominated outcomes are weakly non dominated     A strongly dominating outcome is dominating and non dominated     The following conditions are equivalent   a  C has a unique non dominated class   b  C has a dominating outcome   c  weakly non dominated and dominating outcomes in C coincide  For consistent GCP nets only two different notions of optimality remain        T HE C OMPUTATIONAL C OMPLEXITY OF D OMINANCE AND C ONSISTENCY IN CP N ETS  Lemma   Let C be a consistent GCP net  Then     Each dominance class is a singleton  C is a strict order  and C and Cdc coincide  modulo the one to one and onto correspondence      C      If  is a weakly non dominated outcome   is non dominated  weakly non dominated and non dominated outcomes coincide     If  is a dominating outcome   is strongly dominating  strongly dominating and dominating outcomes coincide      Finally   is a unique  weakly  non dominated outcome if and only if  is strongly dominating  Next  we observe that all concepts of optimality we introduced are different  To this end  we will show GCP nets with a single non dominated class that is a singleton  with multiple non dominated classes  each being a singleton  with a single non dominated class that is not a singleton  and with multiple non dominated classes  each containing more than one element  We will also show a GCPnet with two non dominated classes  one of them a singleton and the other one consisting of several outcomes  Example   Consider the following GCP net C with two binary variables a and b   a   a   b   b This GCP net determines a strict preorder on the dominance classes  in which  ab  is the only maximal class  in fact  all dominance classes are singletons   Thus  ab is both non dominated and dominating and so  it is strongly dominating  Example   Consider the following GCP net C with two binary variables a and b b   a   a b   a   a a   b   b a   b   b This GCP net determines a strict preorder  in which  ab  and  ab  are two different non dominated classes  Thus  ab and ab are non dominated and there is no dominating outcome  Example   Consider a GCP net with variables a  b and c  defined as follows  a   b   b a   b   b b   a   a b   a   a ab   c   c        G OLDSMITH   L ANG   T RUSZCZY NSKI   W ILSON  There are two dominance classes  Sc    abc  abc  abc  abc  and Sc    abc  abc  abc  abc   Every outcome in Sc strictly dominates every outcome in Sc   therefore  Sc is the unique non dominated class and every outcome in Sc is dominating  Because Sc is not a singleton  there are no nondominated outcomes  and so  no strongly dominating outcome  either   Example   Let us remove from the GCP net of Example   the preference statement ab   c   c  Then Sc and Sc are still the two dominance classes  but now every outcome is Sc is incomparable with any outcome in Sc   Thus  Sc and Sc are both non dominated  Since there are two non dominated classes  there is no dominating outcome  Since each class has more than one element  there are no non dominated outcomes  All outcomes are weakly non dominated  though  Example   Let us modify the GCP net of Example   by changing the preference statement b   a   a into bc   a   a  The dominance relation  of this GCP net satisfies the following properties   i  the four outcomes in Sc dominate each other   ii  abc  abc  abc  abc   iii  any outcome in Sc dominates abc  and  a fortiori  abc   One can check that there are five dominance classes  Sc    abc    abc    abc  and  abc   Two of them are non dominated  Sc and  abc   Since there are two nondominated classes  there is no dominating outcome  On the other hand   abc  is a non dominated outcome  a unique one   We will consider the following decision problems corresponding to the notions of optimality we introduced  Definition    For a given GCP net C  WEAKLY NON   DOMINATED OUTCOME   given an outcome   decide whether  is weakly nondominated in C NON   DOMINATED OUTCOME   given an outcome   decide whether  is non dominated in C DOMINATING OUTCOME   given an outcome   decide whether  is dominating in C STRONGLY DOMINATING OUTCOME   given an outcome   decide whether  is strongly dominating in C EXISTENCE OF A NON   DOMINATED OUTCOME   decide whether C has a non dominated outcome EXISTENCE OF A DOMINATING OUTCOME   decide whether C has a dominating outcome EXISTENCE OF A STRONGLY DOMINATING OUTCOME   decide whether C has a strongly dominating outcome  In some of the hardness proofs  we will again use the reductions   and     described in the previous section  We note the following additional useful properties of the GCP net G      H     Lemma    For arbitrary V  outcome  different from   the following statements are equivalent       G        is weakly non dominated in G      is a dominating outcome in G        T HE C OMPUTATIONAL C OMPLEXITY OF D OMINANCE AND C ONSISTENCY IN CP N ETS  Proof  Since   is dominating in G  Lemma     weakly non dominated outcomes and dominating outcomes coincide  Lemma     It follows that the conditions         are equivalent to each other     Proposition   The following problems are PSPACE complete  WEAKLY NON   DOMINATED OUTCOME and DOMINATING OUTCOME   The result holds also for the problems restricted to CP nets  Proof  The membership is easy to prove by techniques similar to those we used earlier  For the PSPACE hardness proofs  we use reductions from CP   DOMINANCE for consistent CPnets  in the version where the two input outcomes are different   Let H be a CP net  and  and  two different V  outcomes  By Lemmas   and      H  can be decided by deciding either of the problems WEAKLY NON   DOMINATED OUTCOME and DOMINATING OUTCOME for the GCPnet G      H    and the outcome     We observed earlier  that if H is a CP net  then so is G      H     Thus  the second part of the assertion follows    Next  we will consider the problem STRONGLY DOMINATING OUTCOME  We will exploit the reduction F      H     which we discussed in the previous section  We observe the following property of F  Lemma    Let H be a GCP net and F      H     Then  is strongly dominating in F if and only if  is dominating in H  Proof  Let us assume that  is dominating in H  From the definition of F  it follows that for every V  outcome         F   and  F     Since   F     is dominating in F  Since there is no improving flip leading out of     is strongly dominating  Conversely  let us assume that  is strongly dominating in F and let  be a V  outcome different from   Let us consider an improving sequence from   to    All outcomes in the sequence other than the last one     are of the form     Moreover  the outcome directly preceding  is     Dropping y from every outcome in the segment of the sequence between   and   yields an improving sequence from  to  in H    We now have the following consequence of this result  Proposition   The problem STRONGLY stricted to CP nets   DOMINATING OUTCOME  is PSPACE complete  even if re   Proof  Let H be a CP net  over the set V of variables  and  an outcome  By Lemma     the problem DOMINATING OUTCOME can be decided by deciding the problem STRONGLY DOMINATING OUTCOME for F      H    and    Thus  the PSPACE hardness of STRONGLY DOMINATING OUTCOME follows by Proposition    The membership in PSPACE is  as in other cases  standard and is omitted  Since H is a CP net  it is locally consistent and so  F is locally consistent  too  As in the proof of Corollary   we use the mapping from GCP net F to CP net F  defined in Section      By Lemma     is a strongly dominating outcome in F if and only if  dominates every outcome of the form   which is if and only if  is a strongly dominating outcome in F    since any F   outcome is dominated by an outcome of the form   using the rules q   xi     yi and q  xi     yi    Therefore       G OLDSMITH   L ANG   T RUSZCZY NSKI   W ILSON  for F and  can be decided by deciding for F  and   Thus  the second part of the claim follows   STRONGLY DOMINATING OUTCOME NATING OUTCOME  STRONGLY DOMI    The problem NON   DOMINATED OUTCOME is easier  It is known to be in P for CP nets  Brafman   Dimopoulos         The result extends to GCP nets  Indeed  if H is a GCP net and  an outcome   is non dominated if and only if there is no improving flip that applies to   The latter holds if and only if for every variable x in H  if x  respectively  x  holds in   then p  x   respectively  p   x   does not hold in   Since the conditions can be checked in polynomial the claim holds and we have the following result  Proposition    The problem NON   DOMINATED  OUTCOME  for GCP nets is in P   Next  we will consider the problems concerning the existence of optimal outcomes  Let H be a GCP net on the set of variables V    x            xn    and let  and  be two different V  outcomes  For every i                 n  we define formulas i as follows  If xi    then i is the conjunction of all literals in   except that instead of xi we take xi   Similarly  if xi    then i is the conjunction of all literals in   except that instead of xi we take xi   Thus  i is the outcome that results in  when the literal in corresponding to xi is flipped into its dual  We now define a GCP net E      H      by taking W   V   y  as the set of variables of E and by defining the flipping conditions as follows       p  E  xi      pH  xi    y    y    i     pE  xi     pH  xi    y     p  E  y        p E  y      The GCP net    H      has the following properties  The outcomes of the form        y  form a copy of H  There is no improving flip for the outcome       y   Next  there is no improving flip into  from an outcome of the form    To see this  let us assume that such a flip exists and concerns a variable  say  xi   It follows that    i   By the definition of flipping conditions  an improving flip for  that involves xi is impossible  a contradiction  Thus  the only improving flip that leads to  originates in     We also have that for every outcome  other than  and    E    It follows from the fact that for every outcome  other than  and    has an improving flip  Indeed  for each such  there is a variable xi such that  i  xi is false in   and  ii  flipping the literal of xi to its dual does not lead to   that is   is not i     For even if    i for some i  then  because         there exists i    i such that  and  differ on xi   so that xi satisfies  i  and  ii    Thus  a flip on that variable is improving  As all improving flips between outcomes containing y result in one more variable xi assigned to true  thus having the same status as it has in    E  follows  Finally  we have  E   and  for every outcome  other than     E    This leads to the following property of E      H       Lemma    Let H be a GCP net and let  and  be two different outcomes  Then  H  if and only if    H      has a  strongly  dominating outcome        T HE C OMPUTATIONAL C OMPLEXITY OF D OMINANCE AND C ONSISTENCY IN CP N ETS  Proof   Only if  Based on our earlier remarks    E    Moreover  since  H   we have   E     In addition  for every  different from  and     E  E  E     Thus   is both dominating and strongly dominating  the latter follows from the fact that no improving flips lead out of      If  Let us assume that  is dominating  and so  the argument applies also when  is strongly dominating   Then there is an improving sequence from   to    Let us consider a shortest such sequence  Clearly    is the outcome just before  in that sequence  as we pointed out  no improving flip from an outcome of the form  to  is possible   Moreover  by the definition of    H      and the fact that we are considering a shortest sequence from   to    every outcome in the sequence between   and   is of the form     By dropping y from each of these outcomes  we get an improving sequence from  to      Proposition    The problem EXISTENCE OF DOMINATING OUTCOME and the problem EXISTENCE OF STRONGLY DOMINATING OUTCOME are PSPACE complete  even if restricted to CP nets  Proof  We show the hardness part only  as the membership part is straightforward  To prove hardness we notice that by Lemma     given a consistent CP net H and two outcomes  and    H  can be decided by deciding either of the problems EXISTENCE OF DOMINATING OUTCOME and EXISTENCE OF STRONGLY DOMINATING OUTCOME for    H       To prove the second part of the assertion  we note that if H is consistent  E      H      is consistent  too and so  the mapping from locally consistent GCP nets to CP nets applies  Let us denote the result of applying the mapping to E by E    Then  using the same argument as in the proof of Proposition    E has a  strongly  dominating outcome if and only if E  has a strongly dominating outcome  Thus  one can decide whether  H  in a consistent CP net H by deciding either of the problems EXISTENCE OF DOM INATING OUTCOME and EXISTENCE OF STRONGLY DOMINATING OUTCOME for E      We also note that the problem EXISTENCE standard complexity theory assumptions    OF NON   DOMINATED OUTCOME  Proposition    The problem EXISTENCE OF NON   DOMINATED  OUTCOME  is easier  under  is NP complete   Proof  We note that in the case of GCP nets in conjunctive form the problem is known to be NP hard  Domshlak et al                Thus  the problem is NP hard for GCP nets  The membership in the class NP follows from Proposition       If we restrict to consistent GCP nets  the situation simplifies  First  we recall  Lemma    that if a GCP net is consistent then weakly non dominated and non dominated outcomes coincide  and the same is true for dominating and strongly dominating outcomes  Moreover  for consistent GCP nets  non dominated outcomes exist  and so  the corresponding decision problem is trivially in P   Thus  for consistent GCP nets we will only consider problems DOMINATING OUTCOME and EXISTENCE OF DOMINATING OUTCOME   Proposition    The problems DOMINATING OUTCOME and COME restricted to consistent GCP nets are in coNP       EXISTENCE OF DOMINATING OUT    G OLDSMITH   L ANG   T RUSZCZY NSKI   W ILSON  Proof  Using Lemmas   and     is not a dominating outcome if and only if there exists an outcome      which is non dominated  Similarly  there is no dominating outcome in a consistent GCP net if and only if there are at least two non dominated outcomes  Thus  guessing non deterministically an outcome       and verifying that  is non dominated  is a non deterministic polynomial time algorithm deciding the complement of the problem DOMINATING OUTCOME  The argument for the other problem is similar    We do not know if the bounds in Proposition    are tight  that is  whether these two problems are coNP complete  We conjecture they are      Concluding Remarks We have shown that dominance and consistency testing in CP nets are both PSPACE complete  Also several related problems related to dominance and optimality in CP nets are PSPACE complete  too  The repeated use of reductions from planning problems confirms the importance of the structural similarity between STRIPS planning and reasoning with CP nets  This suggests that the welldeveloped field of planning algorithms for STRIPS representations  especially for unary operators  Brafman   Domshlak         could be useful for implementing algorithms for dominance and consistency in CP nets  Our theorems extend to CP nets with non binary domains  and to extensions and variations of CP nets  such as TCP nets  Brafman   Domshlak        Brafman  Domshlak    Shimony        that allow for explicit priority of some variables over others  and the more general language for conditional preferences  Wilson      a      b   where the conditional preference rules are written in conjunctive form  The complexity result for dominance is also relevant for the following constrained optimisation problem  given a CP net and a constraint satisfaction problem  CSP   find an optimal solution  a solution of the CSP which is not dominated by any other solution of the CSP   This is computationally complex  intuitively because a complete algorithm involves many dominance checks when the definition of dominance under constraints allows for dominance paths to go through outcomes violating the constraints  Boutilier  Brafman  Domshlak  Hoos    Poole      b    The problem of checking whether a given solution of a CSP is non dominated can be seen to be PSPACE complete by a reduction from CP dominance that uses a CSP that has exactly two solutions  Our results reinforce the need for work on finding special classes of problems where dominance and consistency can be tested efficiently  Domshlak   Brafman        Boutilier et al       a   and for incomplete methods for checking consistency and constrained optimisation  Wilson      a         Several open problems remain  We do not know the complexity of deciding whether the preference relation induced by a CP net is complete  We do not know whether dominance and consistency testing remain PSPACE complete when the number of parents in the dependency graph is bounded by a constant  We also do not know whether these two problems remain PSPACE complete for CP nets in conjunctive form  the reduction used to prove Theorems   and   yields CP nets that are not in conjunctive form   Two additional open problems are listed at the end of Section       With another possible definition  where going through outcomes violating the constraints is not allowed  Prestwich  Rossi  Venable    Walsh         dominance testing is not needed to check whether a given solution is non dominated         T HE C OMPUTATIONAL C OMPLEXITY OF D OMINANCE AND C ONSISTENCY IN CP N ETS  Acknowledgments Jerome Langs new address is  LAMSADE  Universite Paris Dauphine        Paris Cedex     France  The authors are grateful to the reviewers for their excellent comments  and to Pierre Marquis for helpful discussions  This work was supported in part by the NSF under Grants ITR          IIS         and KSEF      RDE      by the ANR Project ANR  BLAN     Preference Handling and Aggregation in Combinatorial Domains  by Science Foundation Ireland under Grants No     PI   C    and    IN I     and by Enterprise Ireland Ulysses travel grant FR           
