
We present a probabilistic model of events in
continuous time in which each event triggers
a Poisson process of successor events. The
ensemble of observed events is thereby modeled as a superposition of Poisson processes.
Efficient inference is feasible under this model
with an EM algorithm. Moreover, the EM algorithm can be implemented as a distributed
algorithm, permitting the model to be applied to very large datasets. We apply these
techniques to the modeling of Twitter messages and the revision history of Wikipedia.

1

Introduction

Real-life observations are often naturally represented
by events—bundles of features that occur at a particular moment in time. Events are generally nonindependent: one event may cause others to occur.
Given observations of events, we wish to produce a
probabilistic model that can be used not only for prediction and parameter estimation, but also for identifying structure and relationships in the data generating
process.
We present an approach for building probabilistic
models for collections of events in which each event
induces a Poisson process of triggered events. This
approach lends itself to efficient inference with an EM
algorithm that can be distributed across computing
clusters and thereby applied to massive datasets. We
present two case studies, the first involving a collection
of Twitter messages on financial data, and the second
focusing on the revision history of Wikipedia. The latter example is a particularly large-scale problem; the
data consist of billions of potential interactions among
events.
Our approach is based on a continuous-time formal-

Michael I. Jordan
Depts. of EECS and Statistics
University of California, Berkeley
jordan@cs.berkeley.edu

ism. There have been a relatively small number of
machine learning papers focused on continuous-time
graphical models; examples include the “Poisson networks” of Rajaram et al. [2005] and the “continuoustime Bayesian networks” described in Nodelman et al.
[2002, 2005]. These approaches differ from ours in that
they assume a small set of possible event labels and do
not directly apply to structured label spaces. A more
flexible approach has been presented by Wingate et al.
[2009] who define a nonparametric Bayesian model
with latent events and causal structure. This work
differs from ours in several ways, most importantly
in that it is a discrete-time model that allows for interaction only between adjacent time steps. Finally,
this work is an extension and generalization of the
“continuous-time noisy-or” presented in Simma et al.
[2008].
There is also a large literature in statistics on point
process modeling that provides a context for our
work. A specific connection is that the fundamental
stochastic process in our model is known in statistics
as a “mutually self-exciting point process” [Hawkes,
1971]. There are also connections to applications in
seismology, notably the “Epidemic Type AftershockSequences” framework of Ogata [1988], which involves
a model similar to ours that is applied to earthquake
prediction.

2

Modeling Events with Poisson and
Cox Processes

Our representation of collections of events is based
on the formalism of marked point processes. Let each
event be represented as a pair (t, x) ∈ R+ ×F, where t
is the timestamp and x the associated features taking
values in a feature space. A dataset is a sequence of
observations (t, x) ∈ R+ × F. We use Da:b to denote
the events occuring between times a and b.
Within the framework of marked point processes, we
have several modeling issues to address: 1) how many

the density : f (t, x)
the data : D0:T

Baseline
Event 1
Event 2
Event 3
Event 4
Event 5
Poisson Intensity

events occur? 2) when do events occur? 3) what features they possess? A classical approach to answering
these questions proceeds as follows: 1) the number
is distributed Poisson(α), 2) the timestamps associated with event are independent and identically distributed (iid) from a fixed distribution, 3) the features
are drawn independently from a fixed distribution g:

Z32

= fθ = T · α · h(t)g(x)

Z31
Z3B

∼ PP (f ) ,

Time (Arrows denote event occurances)

where α is the average occurrence rate, h is a density
for locations, g is the marking density and PP denotes
the inhomogeneous Poisson process. We might wish
for the density h to capture periodic activity due to
time-of-day effects, for example by having the intensity
be a step function of the time.
However, real collections of events often exhibit dependencies that cannot be captured by a standard Poisson process (the Poisson process makes the assumption that the number of events that occur in two nonoverlapping time intervals must be independent). One
way to capture such dependencies is to consider Cox
processes, which are Poisson processes with a random
mean measure. In particular, consider mean measures
that take the form of latent Markov processes. In
queueing theory, this kind of model is referred to as
a Markov-Modulated Poisson Process [Rydén, 1996]
and it has been used as a model for packets in networks [Fischer and Meier-Hellstern, 1993].
2.1

Events Causing Other Events

In this paper we take a different approach to modeling
collections of dependent events in which the occurrence
of an event (t, x) triggers a Poisson process consisting
of other events. Specifically, we model the triggered
Poisson process as having intensity
k(t,x) (t0 , x0 )

= α(x)gθ (x0 |x)hθ (t0 − t)

(1)

α(x)

is

the expected number of events

hθ (t)

is

the delay density

gθ

is

the label transition density.

Denote by Π0 the events caused by a baseline Poisson
process with mean measure µ0 and let Πi be the events
triggered by events in Πi−1 :
D = ∪i Πi

(2)

Π0 ∼ PP (µ0 )

Πi ∼ PP 


X

(t,x)∈Πi−1

kt,x (·, ·) .

Figure 1: A diagram of the overlapping intensities and
one possible forest that corresponds to these events.
Alternatively, we can use the superposition property
of Poisson processes to write a recursive definition:


X
D ∼ PP µ0 +
k (t0 , x0 ) .
(3)
(t,x)∈D

This definition makes sense only when k(t0 ,x0 ) is positive only for t > t0 , since an event (t, x) can only
cause resulting events at a later time, requiring that
hθ (t) = 0 for t ≤ 0.
View as a Random Forest In our model, each
event is either caused by the background Poisson process or a previous event (see Figure 1). If we augment
the representation to include the cause of each event,
the object generated is a random forest, where each
event is a node in a tree with timestamp and features
attached. The parent of each event is the event that
caused it; if that does not exist, it must be a root node.
Let π(p) be the event that caused p, or ∅ if the parent
does not exist. Usually, this parenthood information
is not available and must be estimated, which corresponds to estimating the tree structure from an enumeration of the nodes, their topological sort, timestamps and features. We show how this distribution
over π(p) can be estimated by an EM algorithm.
2.2

Model Fitting

The parameters of our model can be estimated with
an EM algorithm [Dempster et al., 1977]. If π(p), the
cause of the event, was known for every event, then
it would be possible to estimate the parameters µ0 ,
α, g and h using standard results for maximum likelihood estimation under a Poisson distribution. Since π

is not observed, we can use EM to iteratively estimate
the latent variables and maximize the parameters. For
uniformity of notation, assume that there is a dummy
event (0, ∅) and k(0,∅) (t, x) = fbase (t, x) so that we can
treat the baseline intensity the same as all the other intensities resulting from events. We introduce z(t0 ,x0 ,t,x)
as expectations of the latent π where z(t0 ,x0 ,t,x) corresponds to the expectation of 1(π(t,x)=(t0 ,x0 )) . Neglecting terms that don’t depend on the EM variables z,


X
X
L =
log 
k(t0 ,x0 ) (t, x)
(t0 ,x0 )∈D0:t

(t,x)∈D


≥

X

(t,x)∈D

s.t.


X

X

z(t0 ,x0 ,t,x) log k(t0 ,x0 ) (t, x)

(t0 ,x0 )∈D0:t

z(t0 ,x,0,x,y) = 1.

t0 ,x0

The bound is tight when
z(t0 ,x0 ,t,x) = P

log k(t0 ,x0 ) (t, x)
.
(t0 ,x0 ) log k(t0 ,x0 ) (t, x)

These z variables act as soft-assignment proxies for π
and allow us to compute expected sufficient statistics
for estimating the parameters in fbase and k. The specific details of this computation depend on the specific
choices made for fbase and k, but this basically reduces
the estimation task to that of estimating a distribution from a set of weighted samples. For example, if
fbase (t, x) = α1(0≤t≤T ) g(x) where g(x)
P is some labeling distribution, then α̂M LE = T −1 (t,x) z(0,∅,t,x) .
Regardless of the delay and labeling distributions and
the relative intensities of different events, the total intensity of the total mean measure should be equal to
the number of events observed. This can either be
treated as a constraint during the M step if possible
(for example, if α(x) has a simple form), or the results
of the M step should be projected onto this set of solutions by scaling k and fbase , increasing the likelihood
in the process.

handled by introducing more latent variables—one for
each element. Thus the credit-assigning step builds a
distribution not only over the past events that were
potential causes, but also the individual components
of the mixture.
2.3

The Fertility Model

A key design choice is the choice of α(x), the expected
number of events. When x ranges over a small space
it may be possible to directly estimate α(x) for each x.
However, with a larger feature space, this approach is
infeasible for both computational and statistical reasons and so a functional form of the fertility function
must be learned. In presenting these fertility models,
we assume for simplicity that x is a binary feature
vector.
Linear Fertility We consider α(x) = α0 +β T x with
the restriction α0 ≥ 0, β ≥ 0. By Poisson
P additivity
it is possible to factor α(x) into α0 + i:xi =1 βi and,
as part of the EM algorithm, build a distribution over
the allocation of features to events, collecting sufficient
statistics to estimate the values. Note that β ≥ 0 is
an important restriction, since the mean of each of
the constituent Poisson random variables must be nonnegative.
This can be somewhat relaxed by considering
α(x) =
P −
−T
α0 +β +T x+β
(1
−
x)
where
α
≥
β
.
Foregoing
0
i
i
P
the α0 ≥ i βi− restriction allows the intensity to be
negative which does not make probabilistic sense.
Multiplicative Fertility The linear model of fertility places significant limits on the negative influence
that features are allowed to exhibit and also implies
that the fertility effect of any feature will always be the
same regardless of its context.

QAlternatively, we can
estimate α(x) = exp β T x = i wixi for w = exp β,
where we assume that one of the dimensions of x is a
constant 1, leading to derivatives having the form:
Y
X
X
X
xj
∂
L=−
xj
wixi +
z(t0 ,x0 ,t,x) .
∂wj
wj
0 0
t,x∈D

Additive components. It is possible to develop
more sophisticated models by making k(t,x) more
complex.
Consider a mixture k(t,x) (t0 , x0 ) =
PL (l)
0
0
(l)
are individual densities.
l=1 k(t,x) (t , x ) where k
For example, in the Wikipedia edit modeling domain,
(1)
k(t,x) can produce events similar to x at a time close
(2)
k(t,x)

to t, whereas
can correspond to more thoughtful
responses that occur later but also differ more substantially from the event that caused them. Since the
EM algorithm introduces a latent variable for every
additive component inside the logarithm, the separation of some components into a further sum can be

i6=j

t,x∈D t ,x ∈D0:t

The exact solution for a single wj is readily obtained,
so we can optimize L by either coordinate descent or
gradient steps. An alternative approach based on Poisson thinnings is described in Simma [2010].
Combining Fertilities It is also possible to build a
fertility model that combines additive and multiplicative components:


(0)
α(x) = α0 + β (0)T x + exp α01 + β (1)T x + · · · .
The EM algorithm distributes credit between the con
stant term β (0)T x and the terms exp α01 + β (1)T x .

A possible concern is that this requires fitting a large
number of parameters. A special case is when x has
a particular structure and there is reason to believe
that it is composed of groups of variables that interact
multiplicatively within the group, but linearly among
groups, in which case the multiplicative models can be
used on only a subset of variables.
Additionally, it is possible to build a fertility model of
the form


(0)
α(x) = α0 + β (0)T x · exp α01 + β (1)T x
by using linearity to additively combine intensities
and using thinning to handle the multiplicative factors [Simma, 2010].
2.4

Computational Efficiency

In this section we briefly consider some of the principal challenges that we needed to face to fit models to
massive data (in particular for the Wikipedia data).
For certain selections of delay and transition distributions, it is possible to collapse certain statistics together and significantly reduce the amount of bookkeeping required. Consider a setting in which there
are a small number of possible labels, that is, xi ∈
{1 . . . L} for small L, and the delay distribution h(t)
is the exponential distribution hλ (t) = 1(λ) exp (−λx).
We can use the memorylessness of the exponential distribution to avoid the need to explicitly build a distribution over the possible causes of each event.
Order the events by their times t1 , . . . , tn and let
lij

=

exp (λti−1 − λti ) bi−1,j (li−1,j + ti − ti−1 ) /bij

bij

=

exp (λti−1 − λti ) bi−1,j + α(xi )g(j|xi ).

Let i(s) = inf{ti : ti < s} and note that the intensity
at time s for a label of type j is

exp λti(s) − λs bi(s),j + fbase (s, j),
and the weighted-average delay is li(s),j + s − ti(s) .
Counting the number of type j events triggering type
k can be done with similar techniques by letting bi,j,k
(the intensity at time i(s) for events j caused by k)
change only when an event k is encountered. If the
transition density is sparse, only some bij need to be
incremented and the rest may be left unmodified, as
long as the missing exponential decay is accounted for
later. While this computational technique works for
only a restricted set of models and has computational
complexity O(|D|z̄) where z̄ is the average number of
non-zero k(·, x) entries, it is much more computationally efficient than the direct method when there are a
large number of somewhat closely spaced events.

For large-scale experiments on Wikipedia, we use
Hadoop, an open-source implementation of MapReduce [Dean and Ghemawat, 2004]. The object that we
map over is a collection of a page and its neighbors in
the link graph.1 Each map operation also accesses the
hyperparameters shared across pages and runs multiple EM iterations over the events associated with that
page. The learned parameters are returned to the reducer which updates the hyperparameters and another
MapReduce job fits models with these updated hyperparameters. Thus, the reduce step only accumulates
statistics for the hyperparameters, as well as collects
log-likelihoods.
Hadoop requires that each object being mapped over
be kept in memory, which requires careful attention to
representation and compression; these memory limits
have been the key challenge in scaling. If each neighborhood does not fit in memory, it is possible to break
it into pieces, run the E step in the Map phase and
then use the Reduce phase to sum up all the sufficient
statistics and maximize parameters, but this requires
many more chained MapReduce jobs, which is inefficient. For our experiments, careful engineering and
compression was sufficient.

3

Twitter Messages

Twitter is a popular microblogging website that is
used to quickly post short comments for the world
to see. We collected Twitter messages (composed of
the sender, timestamp and body) that contained references to stock tickers in the message body. Some
messages form a conversation; others are posted as
a result of a real-world event inspiring the commentary. The dataset that we collected contains 54717
messages and covers a period of 39 days. For modeling, each message can be represented as a triple of
a user, timestamp and a binary vector of features. A
typical message
User:

SchwartzNow

Time:

2009-12-17T19:20:15

Body: also for tommorow expect
high volume options traded stocks
like $aapl,$goog graviate around the
strikes due to the delta hedging
1
This is generated with a sequence of MapReduce jobs
where we first compute diffs and featurize, then for each
page we gather a list of neighbors that require that page’s
history, and finally each page sends a copy of itself to all
its neighbors. A page’s body is insufficient to determine
its neighbors since the body only contains outgoing (not
incoming) links so the incoming links need to be collected
first.

occurs on 2009-12-17 at 19:20:15 and has the features
$AAPL and $GOOG and is missing features such as
$MSFT and HAS_LINK. Due to length constraints
and Internet culture, the messages tend to not be completely grammatical English and often a message is
simply a shortened Web link with brief commentary.
In addition to the stocks involved and whether links
are involved, features also denote the presence or absence of keywords such as “buy” or “option.”

Train log−liklelihood

Test log−liklelihood

Mix 4 Unif
Mix 2 Unif
Unif(0,2000)
Unif(0,1000)
Gamma(k=0.5)
Gamma(k=0.6)
Gamma(k=0.7)

Baseline Intensities The simplest possible baseline
intensity is a time-homogeneous Poisson process, but
the empirical intensity is very periodic. A better baseline is to break up the day into intervals of (for example) an hour, assume that the intensity is uniform
within the hour and that the pattern repeats. So,
h(t) = pbt/24c . The log-likelihoods for these baselines
are reported in Table 1. It is worth noting that the
gain from incorporating periodicity in the baseline is
much smaller than the gain from the other parts of the
model.
This timing model must be combined with a feature
distribution. We use a fully independent model, where
each feature is present independently of the others.
Q g (x)
1−g (x)
That is, g(x) = i pi i (1 − pi ) i , where gi is
the ith feature. Clearly, the MLE estimates for pi are
simply the empirical fraction of the data that contains
that feature.
3.1

Intensity and Delay Distributions

When events can trigger other events, each induces
a Poisson process of successor events.
We factor the intensity for that process as k(t,x) (t0 , x0 ) =
α(x)g(x0 |x)h(t0 − t), with the constituents described
in Eq. 1. For the intensity, we implemented a multiplicative model where the expected number of events
is α(x) = exp(β T x). The delay distribution h must
capture the empirical fact that most responses occur
shortly after the original message, but there exist some
responses that take significantly longer, meaning that
h needs a sufficiently heavy tail. As candidates, we
consider uniform, piecewise uniform, exponential and
gamma distributions.
Log-likelihoods for different delays are reported in Figure 2. The transition function used, gγ , is described
later. The best performing delay distribution is the
gamma, with shape parameters less than 1; the shape
parameter is also estimated in the results of Table 1.
Note that the results show that the choice of a delay
distribution has a smaller impact on the overall likelihood than the transition distribution. This is due
in part to the fact that for an individual event the
features are embedded in a large space and there is

Gamma(k=0.8)
Gamma(k=0.9)
Exponential
−1.44 −1.45 −1.46 −1.47 −1.48 −1.49 −5.7
Log−likelihood (1e5)

−5.75
−5.8
Log−likelihood (1e4)

−5.85

Figure 2: Log-likelihoods for various delay functions.
more to explain. The predictive ability of the Poisson
process associated with an event to explain the specific features of a resultant event is the predominant
benefit of the model.
3.2

Transition Distribution

The remaining aspect of the model is the transition
distribution g(x|x0 ) that specifies the types of events
that are expected to result from an event of type
x0 . Let’s consider the possible relationships between
a message and its trigger:
1. A simple ‘retweet’—a duplication of the original
message.
2. A response—a message either prompts a specific
response to the content of the message, or motivates another message on a similar topic.
3. After a message, the probability of another (possibly unrelated) message is increased because the
original event acts as a proxy for general user activity. These kinds of messages represent variation in the baseline event rate not captured by
the baseline process and are unrelated to the triggering message in content, so they should take on
a distribution from the prior.
We construct a transition function parametrized by γ
that is a product of independent per-feature transitions, each a mixture of the identity function and the
prior:


Y
x0
1−x0
gγ (x, x0 ) =
(1 − γ) 1(xi =x0 ) + γpi i 1 − pi i .
i

i

Note that gγ is not a mixture of the identity and the
prior.

Table 1: Log-likelihoods for models of increasing sophistication.

800
600
400
200

Proportion of Intensity

Mean Delay for Component(secs)

Component-wise mean delay

1000

00
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0.00

5

10

15

20
Iteration

Independent Component
g Component
Identical Component
Overall
25

30

35

40

Mixture Components
Independent Component
g Component
Identical Component

5

10

15

20
Iteration

25

30

35

40

Figure 3: Trace of parameters of the individual mixture components in model 5.
We denote two important special cases as g1 , where
each resultant event is drawn independently, and g0 ,
where the caused events must be identical to the trigger. With an exponential delay distribution and α(x)
fixed at 1, g0 is equivalent to setting the Poisson intensity to an exponential moving average with decay
parameter determined by λ. The EM algorithm can
be used to find the optimal decay parameter, but as
the reported results show, this model is inferior to one
that utilizes the features of the events.
Earlier, we enumerated relationships between a message and its trigger. For example, the retweets are
completely identical to the original, with the possible exception of a “@username” reference tag, so the
transition would be g0 . A response would have similar
features but may differ in a few features, and a densityproxy message would have features independent of the
causing message, corresponding to gγ for 0 < γ < 1.
g1 models the density-proxy phenomenon.
Let us now consider some possible models, where the
Greek letters represent parameters to be estimated:

k1(t,x) (t0 , x0 ) = exp α1 + β1T x h1 (t0 − t) g1 (x, x0 )

k2(t,x) (t0 , x0 ) = exp α2 + β2T x h2 (t0 − t) gγ (x, x0 )

k3(t,x) (t0 , x0 ) = exp α3 + β3T x h3 (t0 − t) g0 (x, x0 )

k4(t,x) (t0 , x0 ) = exp α4 + β4T x h4 (t0 − t) ×

Type
Homogeneous Baseline Only
Periodic Baseline Only
Exp
Delay,
Independent
transition(k1 )
Intensity doesn’t depend on features, Exp Delay, gγ transition
Feature-dependent intensity, Exp
Delay, Identity transition (k3 )
Exp Delay, hγ transition (k2 )
Shared intensity, shared Exp delay,
mixture transition (k4 )
Mixture of (intensity, exp delay,
different transitions) (k5 )
Mixture of (intensity, gamma delay,
different transitions)

Train
-167810
-164695
-161905

Test
-66050
-64758
-63017

-145752

-57383

-146558

-57810

-145557
-145629

-57313
-57379

-145152

-57130

-144621

-56966

the ith phenomenon, while k4 and k5 are intended to
capture all three effects.
´ Both g and h are densities, so
it’s easy to compute k(t,x) (t, x, t0 , x0 )dt0 dx0 . The results, shown in Figure 1, indicate that models 4 and 5
are significantly superior to the first three, demonstrating that separating the multiple phenomena is useful.
For h, we use an exponential distribution.
In model 4, all the transition distributions share the
same fertility and delay functions,whereas in model 5,
each distribution has its own fertility and delay. As
shown in Figure 3, the latter performs significantly
better, indicating that the three different categories of
message relationships have different associated fertility
parametrizations and delays. The top plot shows the
proportions of each component in the mixture, defined
as the ratio of the average fertility of the component to
the total fertility. The bottom plot demonstrates that
while the mean delay of the overall mixture remains
almost constant throughout the EM iterations, different individual components have substantially different
delay means.
3.3

Results and Discussion

Table 1 reports the results for a cascade of models of increasing sophistication, demonstrating the gains that
result from building up to the final model. The first
stage of improvements, from the homogeneous to the
periodic baseline and then to the independent transition model focuses on the times at which the events
occur, and shows that roughly equivalent gains follow
0
0
0
(η1 g1 (x, x ) + η2 gγ (x, x ) + η3 g0 (x, x )) from modeling periodicity and from further capturing
less periodic variability with an exponential moving
3
X
average. The big boost comes from a better labeling
0
0
0
0
k5(t,x) (t , x ) =
ki(t,x) (t , x ).
distribution that allows the features of events to dei=1
pend on the previous events, capturing both the topicThe models ki for i from 1 to 3 are designed to capture
wise hot trends and specific conversations.

Of course, the shape of the induced Poisson process has
an effect. The different types of transitions have distinctly different estimated means for their delay distributions, which is to be expected since they capture different effects. As seen in Figure 3 the overall-intensity
proxying independent transition has the highest mean,
since the level of activity, averaged over labels, changes
slower than the activity for a particular stock or topic.
For shape, lower k, higher-variance gamma distributions work best.
The final component is a fertility model that depends
on the features of the event and allows some events
to cause more successors than others. This actually
has less impact on the log-likelihood than the other
components of the model.

4

Wikipedia

Wikipedia is a public website that aims to build a
complete encyclopedia through user edits. We work
to build a probabilistic model for predicting edits to
a page based on revisions of the pages linking to it.
Causes outside of that neighborhood are not considered. The reasons for that restriction are primarily computational—considering all edits as potential
causes for all other edits, even within a short time
window, is impractical on such a large scale. As a
demonstration of scale, we model 414,540 pages with a
total of 71,073,739 revisions (the raw datafile is 2.8TB
in size), involving billions of considered interactions
between events.
4.1

Structure in Wikipedia’s History

As we build up a probabilistic model for edits, it’s
useful to consider the kinds of structure we would like
the model to capture. Edits can be broadly categorized
into:
Minor Fixes: small tweaks that include spelling corrections, link insertion, etc. Only one or a few words
in the document are affected.
Major Insert: Often, text is migrated from a different page such that we obtain the addition of many
words and the removal of none or very few. From
the user’s perspective, this corresponds to typing or
pasting in a body of text with minimal editing of the
context.
Major Delete: The opposite of a major insert. Often
performed by vandals who delete a large section of the
page.
Major Change: An edit that affects a significant
number of words but is not a simple insert or delete.

Self delay, component 1

0

50

Neighbor delay, component 1

100
150
Mean (hours)
Self delay, component 2

200

0

50

100
150
Mean (hours)
Neighbor delay, component 2

0

1

2
3
Mean (hours)
Self delay, component 3

4

5

0

1

0

0.1

0.2
0.3
Mean (hours)

0.4

0.5

0

0.1

2
3
4
Mean (hours)
Neighbor delay, component 3

0.2
0.3
Mean (hours)

0.4

200

5

0.5

Figure 4: Delay distribution histogram over all pages.

Revert: Any edit that reverts the content of the page
to a previous state. Often, this is the immediately
previous state but sometimes it goes further back. A
revert is typically a response to vandalism, though edits done in good faith can also be reverted.
Other Edit: A change that affects more than a couple
of words but is not a major insert or delete.

4.2

Delay Distributions

Since most pages have many neighbors, each event has
a large number of possible causes and the mean measure at each event is the sum over many possible triggers. This means the exact shape of the delay distribution is not as important as in cases when only a few
possible triggers are considered. We model the delay
as a mixture of three exponentials, intending them to
capture short, medium and longer-term effects. For
each page, we estimate both the parameters and the
mixing weights. Figure 4 shows a histogram of the
estimated means.
One component is a very fast response, with an average of 3.6 minutes for the same-page and 13.8 minutes
for the adjacent-page delay. On the same page, the
component captures edits caused by each other, either
when an individual is making multiple modifications
and saving the page along the way, or when a different user noticing the revisions on a news feed and instantly responding by changing or undoing them. The
remaining components capture the periodic effects and
time-varying levels of interest in the topic, as well as
reactions to specific edits.

The model needs to capture the significant attributes
of the revision, in addition to its timestamp, but we
don’t aim to completely model the exact content of the
edit, as the inadequacies of that aspect of the model
would dominate the likelihood. Instead, we identify
key features (type—revert, major insert, etc—whether
the edit was made by a known user, and the identity
of the page) of the edits and build a distribution over
events as described by those features, not the raw edits.

Log-likelihood

Transition Distribution

8.90 1e7
8.95
9.00
9.05
9.10
9.15
9.20
9.25
9.30
9.35
No Neighbors
2.36

1e7

Train

Neighbors,
Neighbors,
Same Transition Test Diff Transition

Unregularized
Transition
Regularized
Transition
Neighbors,
Own Intensity

2.38
Log-likelihood

4.3

2.40

2.42

2.44

Unregularized

2.46

Regularized

Transition

Transition

No Neighbors

2.48

When a page with features x triggers an event with features x0 , the latter vector is drawn from a distribution
over possible features. When the number of possible
feature combinations is small, the transition matrix
can be directly learned, but when there are multiple
features, or features which can take on many values,
we need to fit a structured distribution. We partition
the features into two parts as x = (x1 , x2 ), where x1
are features that can appear in any revision (such as
the type of the edit and whether the editor is anonymous) and where x2 is the identity of the page. Note
that x2 can take on very many values, each one appearing relatively infrequently. There are a vast number of
observations and we can directly learn the transition
matrix h1 (x1 , x01 ). For each target page x02 , we model
an x1 transition as
x01 |x1 , x2
θx1 ,x2

∼ Dirichlet (γx1 )

• No Neighbors: The revisions on each page can
be caused either by the baseline or a previous revision on that page but not by revisions of the
neighbors:
0

0

= 1(x2 =x? ) αs g(x0 |x)hs (t0 − t)
2
+ 1(x2 ∈δx? ) αn g(x0 |x)hn (t0 − t).
2

Figure 5 shows log-likelihoods of successive iterations
of the model. The regularized versions use the Dirichlet prior; the others estimate θ on each page independently. The bars correspond to:

0

Neighbors,
Own Intensity

Poisson process of edits on the page. That process has its own delay distribution and intensity,
but those are the same for all neighbors. The
transition conditional distribution is the same for
both events
x?

which, due to conjugacy, corresponds to shrinkage towards γx1 . As more transitions are observed, the
page’s transition probability becomes more driven by
the specific observed probabilities on that page. The
allocation over components of γ is directly maximized,
while the magnitude of γ is chosen over a validation
set. x2 is handled by fixing a particular page that we
refer to as x?2 and fitting a model for revisions of that
page, (x1 , x?2 ). Then, the process over all the pages is
a superposition of processes over each possible x2 .

x?
2

Neighbors,
Diff Transition

Figure 5: Log-Likelihoods of various models. Models with regularized transition matrices perform significantly better on unseen data, but non-trivially worse
on the training set, indicating strong regularization.
The baseline-only is not shown but has −1.48 × 108
training and −3.98 × 107 test log-likelihoods.

2
k(t,x)
(t0 , x0 )

∼ Multinomial (θx1 ,x2 )

Neighbors,
Same Transition

0

Parameters for functions with different subscripts
are estimated separately.
• Neighbors, Different Transitions: Same as
above, but uses different transition distributions
for x?2 and its neighbors:
x?

2
k(t,x)
(t0 , x0 )

=
+

1(x2 =x? ) αs gs (x0 |x)hs (t0 − t)
2
1(x2 ∈δx? ) αn gn (x0 |x)hn (t0 − t).
2

Here, the parameters for the two different g are
estimated separately and are regularized towards
γ same or γ neighbor , respectively.
• Neighbors, Own Intensities: Each neighbor
has its own α parameter:
α(x, x0 ) = 1(x? =x0 ,x2 neighbor of
2
2

αx2 .
x?
2)

0

k(t,x) (t , x ) = 1(x2 =x? ) αg(x |x)h(x, x , t − t).
2

• Neighbors, Same Transition: Revisions to the
neighbors of the page in the link graph cause a

For most pages there is insufficient data to estimate the individual αs accurately; regularization
of α is required and is discussed later.

agonal is predominantly positive, indicating that an
event of a particular type on a neighbor makes an
event of the same type more likely on the current
page. Note the significantly positive rectangle for transitions between massive inserts, deletions and changes.
The magnitude of the ratio is almost identical in the
rectangle; significant modifications induce other large
modifications but the specific type of modification, or
whether it is made by a known user, are irrelevant.
Large changes act as indications of interest in the topic
or significant structural changes in the related pages.

REVERT
UNKNOWN_CONTRIB

REVERT
KNOWN_CONTRIB

MINOR_TWEAK
KNOWN_CONTRIB

MINOR_TWEAK
UNKNOWN_CONTRIB

Caused Event

MASS_INS
UNKNOWN_CONTRIB

MASS_INS
KNOWN_CONTRIB

MASS_DEL
UNKNOWN_CONTRIB

MASS_DEL
KNOWN_CONTRIB

MASS_CHANGE
KNOWN_CONTRIB

MASS_CHANGE
UNKNOWN_CONTRIB

DEFAULT
UNKNOWN_CONTRIB

REVERT
UNKNOWN_CONTRIB
!SELF
REVERT
KNOWN_CONTRIB
!SELF
MINOR_TWEAK
UNKNOWN_CONTRIB
!SELF
MINOR_TWEAK
KNOWN_CONTRIB
!SELF
MASS_INS
UNKNOWN_CONTRIB
!SELF
MASS_INS
KNOWN_CONTRIB
!SELF
MASS_DEL
UNKNOWN_CONTRIB
!SELF
MASS_DEL
KNOWN_CONTRIB
!SELF
MASS_CHANGE
UNKNOWN_CONTRIB
!SELF
MASS_CHANGE
KNOWN_CONTRIB
!SELF
DEFAULT
UNKNOWN_CONTRIB
!SELF
DEFAULT
KNOWN_CONTRIB
!SELF
REVERT
UNKNOWN_CONTRIB
SELF
REVERT
KNOWN_CONTRIB
SELF
MINOR_TWEAK
UNKNOWN_CONTRIB
SELF
MINOR_TWEAK
KNOWN_CONTRIB
SELF
MASS_INS
UNKNOWN_CONTRIB
SELF
MASS_INS
KNOWN_CONTRIB
SELF
MASS_DEL
UNKNOWN_CONTRIB
SELF
MASS_DEL
KNOWN_CONTRIB
SELF
MASS_CHANGE
UNKNOWN_CONTRIB
SELF
MASS_CHANGE
KNOWN_CONTRIB
SELF
DEFAULT
UNKNOWN_CONTRIB
SELF
DEFAULT
KNOWN_CONTRIB
SELF
DEFAULT
KNOWN_CONTRIB

Features of the Causing Event

Baseline

Figure 6: Learned Transition Matrix. The area of
the circles corresponds to the logarithm of the conditional probability of the observed feature, divided by
the marginal. The yellow, light-colored circles correspond to the transition being more likely than average;
red correspond to the transition being less likely.

4.4

Learned Transition Matrices

Figure 6 shows the estimated transition matrix. Each
circle denotes log(g(x, x0 )/p(x0 )); when it is high, that
label of the caused event is much more likely than it
would be otherwise.
The top row represents the intensity for the baseline,
the labels of events whose cause is not a previous
event. Positive values correspond to event types that
the events-triggering-events aspect of the model is less
effective in capturing and thus are over-represented in
the otherwise-unexplained column. Reverts, both by
known and anonymous contributors, are significantly
underrepresented, indicating that the rest of the model
is effective in capturing them. Revisions made by
known contributors are under-represented, as the rest
of the model captures them better than the edits made
by anonymous contributors. Events generated from
this row account for 23.87% of total observed events.
The next block corresponds to edits on neighbors causing revisions of the page under consideration and are
responsible for 19.11% of observed events. The di-

The remaining block represents edits on a page causing
further changes on the same page and is responsible for
57.02% of the observations. There is a stronger positive diagonal component here than above, as similar
events co-occur. Large changes, especially by anonymous users, lead to an over-representation of reverts
following them. On the other hand, reverts result in
extra large changes, as large modifications are made,
reverted and come back again feeding an edit war.
Reverts actually over-produce reverts. This is not a
first-order effect, since reverts rarely undo the previous undo, but rather captures controversial moments.
The presence of a revert is an indication that previously, an unmeritorious edit was made, which suggests
that future unmeritorious edits (that tend to be long
and spammy) that need to be reverted are likely.
4.5

Regularizing Intensity Estimates

When for a fixed page x?2 an edit occurs on its neighbor, one would expect the identity of the neighbor to
affect its likelihood of causing an event on x?2 . As
it turns out, effectively estimating the intensities between a pair of pages is impractical unless a very large
number of revisions have been observed. Even in the
high-data regimes, strong regularization is required.
We tried regularizing fertilities both towards zero and
toward a common per-page mean, using both L1 and
L2 penalties, but these regularizers empirically led to
poorer likelihoods than using a single scalar α for all
neighbors, suggesting that there is not enough data to
accurately estimate individual αs. One reason is that
pages with a large number of events also have a large
number of neighbors, so the estimation is always in a
difficult regime. Furthermore, the hypothetical ‘true’
values of these parameters will change with time, as
new neighbors appear and change.
Let mi be the number of revisions of the ith neighbor
page and let ni be the expected number of events triggered by that neighbor’s revisions. One approach that
works in high-data regimes is to let
P
ni
j nj
+ (1 − λ)
,
α̂i,REG = λ P
m
m
j
i
j

Table 2: Sample list of pages (in bold) and the intensities estimated for them and their top neighbors.
This is under strong regularization, which explains the
similarity of the weights.
Page
AH-64 Apache

Int.
0.49

Page
South Pole

Int.
0.46

AH-1 Cobra
CH-47 Chinook
101st Airborne
Division
Mil Mi-24
Flight simulator
List of Decepticons

0.063
0.040
0.040

Equator
Roald Amundsen
Ernest Shackleton

0.017
0.016
0.016

0.037
0.037
0.034

0.015
0.015
0.014

Tom Clancy’s Ghost
Recon Advanced
Warfighter
Command & Conquer

0.034

Geography of Norway
Navigation
South Georgia and
the South Sandwich
Islands
National Geographic
Society
List of cities by
latitude

0.014

0.033

0.014

for a parameter λ between zero and one, which yields
an average between the aggregate and individual maximizers. The regularizer forces the P
lower weights
to
P
clump as each is lower-bounded by λ nj / mj . On
a subset of the Wikipedia graph that includes only
pages with more than 500 revisions, this improves
held-out likelihoods compared to having a single α for
all neighbors. The improvement is very small, however, certainly smaller than the impact of other aspects
of the model. Example pages and intensities estimated
for their neighbors are shown in Table 2.

5

Conclusions

We have presented a framework for building models of
events based on cascades of Poisson processes, demonstrated their applications and demonstrated scalability on a massive dataset. The techniques described in
this paper can exploit a wide range of delay, transition
and fertility distributions, allowing for applications to
many different domains.
One direction for further investigation is to provide
support for latent events that are root causes for some
of the observed data. Another is a Bayesian formulation that integrates instead of maximizes parameters;
this may work better for complex fertility or transition distributions that lack sufficient observations to
be accurately fit with maximum likelihood. Both extensions complicate inference and reduce scalability;
indeed, Wingate et al. [2009] propose a Bayesian model
with latent events but scaling is an issue. Furthermore, allowing the parameters of the model to depend
on time (for example, letting the fertility be a draw
from a Gaussian process) would be very useful, though
again, computational issues are a concern.

6

Acknowledgements

We gratefully acknowledge support for this research
from Google, Intel, Microsoft and SAP.

