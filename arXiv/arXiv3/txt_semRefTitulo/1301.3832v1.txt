

In this paper we present a propositional
logic programming language for reasoning
under possibilistic uncertainty and represent­
ing vague knowledge. Formulas are repre­
sented by pairs (ip, a), where ip is a many­
valued proposition and a E [0, 1] is a lower
bound on the belief on ip in terms of necessity
measures. Belief states are modeled by pos­
sibility distributions on the set of all many­
valued interpretations. In this framework, (i)
we define a syntax and a semantics of the gen­
eral underlying uncertainty logic; (ii) we pro­
vide a modus ponens-style calculus for a sub­
language of Horn-rules and we prove that it
is complete for determining the maximum de­
gree of possibilistic belief with which a fuzzy
propositional variable can be entailed from a
set of formulas; and finally, (iii) we show how
the computation of a partial matching be­
tween fuzzy propositional variables, in terms
of necessity measures for fuzzy sets, can be
included in our logic programming system.
1

INTRODUCTION

Logic programming languages have been applied to a
wide range of areas such as Artificial Intelligence or
Deductive Databases. Among these languages, Prolog
is the most representative but it is not powerful enough
for reasoning and representing knowledge in situations
where there is vague, incomplete or imprecise informa­
tion. To overcome this problem, new logic program­
ming languages have been developed. They are based
on a variety of non-standard logics such as multiple­
valued logics [Ishizuka and Kanai, 1985; Mukaidono et
al., 1989; Li and Liu, 1990; Alsinet and Manya, 1996;
Vojtas, 1998], possibilistic logic [Dubois et al., 1991],
probabilistic logic [Heinsohn, 1994; Lukasiewicz, 1998],
evidential logic [Baldwin, 1987; Baldwin et al., 1995] or
fuzzy operator logic [Weigert et al., 1993]. Depending
on the underlying logic some systems are more suit­
able for dealing with vague knowledge, while others

Lluis Godo
AI Research Inst. (IliA)
CSIC
08193 Bellaterra, Spain
godo@iiia.csic.es

are more appropriate for reasoning under incomplete
or imprecise knowledge. Although all of the fuzzy ex­
tensions of logic programming implement proof proce­
dures for fuzzy reasoning, only some of them allow to
represent ill-known information in the language.
Our first objective in this paper is to define a proposi­
tional logic programming language for reasoning under
possibilistic uncertainty and representing vague knowl­
edge. We represent formulas by pairs (ip, a), ip being a
many-valued proposition built on fuzzy propositional
variables and a E [0, 1] being a lower bound on the
belief on ip in terms of necessity measures.
On the one hand, fuzzy propositional variables pro­
vide us a suitable representation model in situations
where there is vague, incomplete or imprecise infor­
mation about the real world. For instance, the fuzzy
statement "Peter is abouL35 years old" can be nicely
represented by the fuzzy proposition P eter _is_about35
defined over the finite domain years_old. In the case
abouL35 denotes a crisp interval of ages, the above
proposition can be interpreted as "3x E about35 such
that Peter is x years old". In the case abouL35 denotes
a fuzzy interval with a membership function /-Labout-35,
the above proposition can be interpreted in possibilis­
tic terms as "3x E [P,abouL35]a such that Peter is x
years old is certain with a necessity of at least 1- a"
for each a E [0,1] , where [!-LabouL35] a denotes the a-cut
of /-Labout-35. So, fuzzy propositions can be seen as
(flexible) restrictions on an existential quantifier (see
[Dubois et al., 1998]).
On the other hand, since we want to deal with fuzzy
propositional variables in the language, the truth eval­
uation of formulas cannot be Boolean but many­
valued, and thus, our possibilistic logic programming
language should be based on a many-valued logic as
in [Alsinet et al., 1999]. Moreover, like in classi­
cal propositional logic programming systems, the lan­
guage should enable us to define an efficient proof
method based on a complete calculus for determin­
ing the maximum degree of possibilistic belief with
which a fuzzy propositional variable can be entailed
from a set of formulas. To this end, first we define
a general possibilistic logic based on the propositional

2

UNCERTAINTY IN ARTIFICIAL INTELLIGENCE PROCEEDINGS 2000

Godel fuzzy logic and then, we focus our attention on
the possibilistic language that results from considering
the Horn-rule sublogic of Godel fuzzy logic.
The reason for choosing Godel logic as the underlying
many-valued logic where to model fuzziness is two-fold:
first, truth-functions of Godel logic are purely ordinal,
that is, they are definable just from the ordering of the
truth scale (see next section), no further algebraic op­
erations are required, and thus the use of this logic is in
accordance with the simplest understanding, in terms
of an ordering, of what a fuzzy, gradual property can
be; and second, and non negligible at all, Godel logic
has been proved to be fully compatible with an already
proposed and suitable extension of necessity measures
for fuzzy events, in the sense that Godel logic will al­
low to define a well behaved and featured possibilistic
semantics on top of it (see Sections 3 and 4).
Our second objective is to extend the possibilistic logic
programming language with a partial matching mech­
anism between fuzzy propositional variables based on
a necessity-like measure. As we have recently proved
in [Alsinet and Godo, 2000b], this extension preserves
completeness for a particular class of formulas. In our
opinion, this is a key feature that justifies by itself the
interest of such a logic programming system.
The paper is organized as follows. In Section 2, we
present the syntax and the many-valued semantics of
the language of propositional Godel fuzzy logic. In
Section 3 we extend the language to allow possibilistic
reasoning. In Section 4 we describe the uncertainty
sublogic that our proof method can deal with and we
prove that it is complete for determining the maximum
degree of possibilistic entailment of fuzzy propositional
variables. In Section 5, we show how the proof method
can be extended to allow a semantical matching be­
tween fuzzy propositional variables. And, finally, in
the last section we discuss some related work. Be­
cause of the lengthy proofs, proofs of propositions can
be found in [Alsinet and Godo, 2000a].
2

MANY-VALUED SEMANTICS:
GODEL LOGIC

Following [Hajek, 1998] , the language of propositional
Godel fuzzy logic (denoted hereafter G) is built in the
usual way from a (countable) set of propositional vari­
ables, a conjunction A, an implication-tand the truth
constant 0. Further connectives are defined as follows:
<p V 'ljJ is ((<p -t'If;)-t'If;) 1\ (('If;-t<p)-t<p)
•<p
is <p-t0
<p=:'lj; is (<p-t'lj;)l\('1/;-t<p)
The semantics of G is given by interpretations I of the
propositional variables into the real unit interval [0, 1]
which are extended to arbitrary formulas by means of
the following rules:
I(O)

=

0

I(<pi\'1/J)
I(<p -t'lj;)

{

min(I(<p), I('If;))
1,
if I(<p) � I('lj;)
I('ljJ), otherwise

For the derived connectives the truth-interpretations
take these forms:

{
{

max(I(<p), I('If;))
1, if I(<p) 0
0, otherwise
=

1,
if I(<p) I('lj;)
min(I(<p), I('lj;)), otherwise
=

The following is an axiomatization1 of G:
(A1)
(A2)
(A3)
(A4)
(AS)
(A6)
(A7)
(A8)

(<p-t'1/J)-t(('1/J-tx) -t (<p-tx))
(<pl\'lj;)-t<p
(<p 1\ 'If;)-t ('If; 1\ <p)
(<p 1\ (<p-t'If;))-t ('If; 1\ ('If;-t<p))
(<p -t('1/J -t x)) = ((<p A '1/J)-tx)
((<p-t'1/J)-tx)-t((('1/J-t<p)-tx)-tx)
0-t<p
<p-t<p 1\ <p
The deduction rule of G is modus ponens. The no­
tion of proof is as usual. Completeness for G reads as
follows: <p is provable in G, written f-a <p, iff I(<p) = 1
for any interpretation I. Furthermore, G enjoys strong
completeness as well. Namely, let T be an arbitrary
theory over G, i.e. just a set of formulas. An inter­
pretation I is a model ofT iff I('If;) 1 for all 'ljJ ET.
Then, T proves <p, written T f- <p, iff I(<p) 1 for any
interpretation I which is a model ofT.
=

=

3

GENERAL POSSIBILISTIC

REASONING OV ER GODEL

LOGIC

We have seen that fuzzy propositional variables are
suitable for representing imprecise information as in
the statement "Peter is abouL35 years old". Now,
we are interested in extending the fuzzy propositional
language to allow fuzzy reasoning under uncertainty
which leads us to a more expressive language. For in­
stance, the statement "it is almost sure that Peter is
abouL35 years old" is represented in this setting by a
certainty-weighted fuzzy proposition
(Peter _is_about35, 0.9),

where the certainty value 0.9 expresses how much is
believed the fuzzy statement "Peter is abouL35 years
old" in terms of necessity measures.
In general, certainty weights are employed to model
statements of the form "<p is a-certain", where <p repre­
sents vague, incomplete or imprecise knowledge about
the real world. In this framework, this is formalized
1 Actually, logic G is equivalent to the extension of lntu­
itionistic logic with the pre-linearity axiom ( <p -t 1/J) V ( 1/J -t

<p).

UNCERTAINTY IN ARTIFICIAL INTELLIGENCE PROCEEDINGS 2000

as "rp is certain with a necessity of at least a" and is
represented through a certainty-weighted Godel logic
formula (rp,a).
Within the possibilistic model of uncertainty, belief
states are modeled by normalized possibility distribu­
tions 1r : I -+ [0,1] on a set of interpretations I. In
the standard possibilistic logic, the uncertainty about
whether a (Boolean) formula holds true or not is esti­
mated by the necessity measure
N([rp]l1r)

=

inf{1-1r(I) I IE I, I(r.p) =0}.

However, in our framework and according to the pre­
vious subsection, the truth evaluation of a formula r.p
in each interpretation I is a value I(r.p) E [0, 1]. There­
fore, each formula does not induce a crisp set of inter­
pretations, but a fuzzy set of interpretations [rp], defin­
ing JL['P] (I) =I(r.p), for each interpretation I. Hence,
to measure the uncertainty induced on a formula by
a possibility distribution on the set of interpretations
I we have to consider some extension of the notion
of necessity measure for fuzzy sets, in particular for
fuzzy sets of interpretations. In [Dubois and Prade,
1991] the authors propose to define
N([rp] l 7r) =inf 1r(I):::} JL['PJ(I),
lEI
where JL['PJ(I) =I(r.p) E [0,1] and :::} is the reciprocal
of Godel's many-valued implication, which is defined
as x:::} y =1 if x :S y and x:::} y 1- x, otherwise.
=

The following remarks are worth noticing. The first
one is that this definition is indeed an extension of
the classical definition, in the sense that we recover it
whenever [rp] is a crisp set. The second one is that
with this definition, the condition N([rp] I 1r) 2: a is
equivalent to
1r(I) :S max(1- a,JL['P] (I))
for every I E I, analogously to the crisp case as well.
And the third one is that the equivalence
N((rp] l1r) =1 iff 1r :S JL["'J
is also an interesting consequence. It is not difficult to
see that this kind of necessity measures on fuzzy sets
is characterized by the following set of axioms:
N1
N2
N3
N4

N(D.) =1
N(0) =0
N(A n B) =min(N(A),N(B))
( N(niEIAi) =inf iEI N(Ai) )
if A is crisp,
1,
if 1- a :S N(A)
.
then N(A U a) = N(
A), otherw1se

{

3

Definition 2 (Possibilistic satisfaction and en­
tailment) A possibilistic model 7r : I - + [0,1] sat­

isfies a weighted formula (rp,a), written 1r I= (rp,a ) ,
iff N([rp] I 1r) 2: a. Now let r be a set of weighted
formulas. We say that r entails a weighted formula
(rp,a), written r I= (rp,a), iff every possibilistic model
satisfying all the weighted formulas in r also satisfies

(rp,a).

We propose now a Hilbert-style axiomatization2 of this
logic: axioms of PGL (for Possibilistic Godel logic) are
Godel logic axioms weighted by 1 plus the triviality
axiom (rp,0), and PGL inference rules are :
Generalized modus ponens:

(rp-+ '1/J,a)
(r.p,/3)
('l/;,min(a,/3))
Weakening:

(rp,a)
[if f3 <a]
(r.p,/3)

Then the notion of proof in PGL is as usual and it will
be denoted as f-PG. The soundness of this axiomatic
system is given in the next theorem.
Theorem 1 PGL is sound with respect the possibilis­
tic entailment, i.e. iff f- PG (rp,a) then f F (rp,a ) .
Proof: Soundness of the axioms and the weakening
rule is straightforward, thus we only prove the sound­
ness of the modus ponens rule. This reduces to
check, for all possibilistic distribution 1r on I, that if
N([r.p-+ '1/J] I1r) 2: a and N([rp] l 1r) 2: /3, then N(['l/J] I
1r) 2: min(a,(3). The two conditions amount to, for
each interpretation I E I, 1r(I) :::} I(r.p -+ '1/J) 2: a
and 1r(I) :::} I(rp) 2: /3. Thus,1r(I) :::} min(I(rp - +
'1/J),I(r.p)) ;::: min(a,/3). But, by Godel semantics,
min(I(rp - + '1/J),I(r.p)) = min(I('l/;),I(r.p)) :S I('lf;).
Therefore, we have that 1r(I) :::} I('lf;) 2: min(a,/3)
for each interpretation IE I, and thus, N( ['l/J] I 1r) 2:
D
min(a,(3).

Unfortunately we have not been able so far to prove
whether PGL is complete or incomplete. So it remains
as an open question to be solved in the near future.
4

A POSSIBILISTIC LOGIC

PROGRAMMING LANGUAGE

Definition 1 (Possibilistic model) Let I be the set

In the previous section we have defined PGL, a general
possibilistic logic over the many-valued Godel logic.
Our aim in this section is, as in classical propositional
logic programming systems, to define a sublanguage

of (many-valued) Godel interpretations over a given
language. A possibilistic model is a normalized possi­
bility distribution1r : I- + [0,1] on the set of interpre­
tations I.

[Dubois et a!., 1994c], here we have just replaced the ax­
ioms of classical propositional logic with those of many­
valued Godel logic.

Now let us go into formal definitions.

2Notice the analogy with the classical Possibilistic logic

4

UNCERTAINTY IN ARTIFICIAL INTELLIGENCE PROCEEDINGS 2000

for logic programming which would enable us to de­
sign an efficient proof algorithm, based on a complete
calculus for computing the maximum degree of pos­
sibilistic entailment of a propositional variable, called
goal, from a set of weighted formulas.
To this end, we restrict ourselves to a Horn-rule sub­
language of the logic G, i.e. to formulas of the form:
1\ Pk -+ q
P1 1\
with k 2: 0, where p1, . . . , Pk , q are propositional vari­
ables, in the traditional logic programming style. As
usual, we shall refer to the conclusion q and the set of
premises p1, . . . , Pk as the head and the body, respec­
tively. We distinguish between two types of formulas
in this sublanguage: fact when k = 0 (empty body)
and are simply written q, and rule, otherwise.
· ·

·

Definition 3 (PGL clause) A PGL clause is a pair
of the form (£P,a), where £P is either a fact or a rule
and a E [ 0,1] is a lower bound on the belief on £P in

terms of necessity measures.

For PGL clauses we shall develop a simple and efficient
calculus which will not need the whole logical appara­
tus of PGL of the previous section. But before we need
to introduce some extra definitions and results.
Definition 4 (Maximum degree of possibilistic
entailment) The maximum degree of possibilistic en­

tailment of a goal q from a set of PGL clauses P, de­
noted by llqiiP , is the greatest lower bound a E [0,1]
on the belief on q such that P f= (q, a). Thus,
llqiiP =sup {a E [0,1] 1 P f= (q, a)} .

Theorem 2 The maximum degree of possibilistic en­

Axiom: (£P, 0)
Generalized modus ponens:

1\ Pk -+ q, 'Y)
(Pl 1\
(Pl, /31), , (pk , f3k )
( q, min ('Y, /31, ..., /3k ))
·

· ·

·

·

·

Obviously, the axiom is a valid PGL clause and the in­
ference rule is sound as already proved in the previous
section.
Definition 5 (Degree of deduction) A goal q is
deduced with a degree of deduction a from a set of
PGL clauses P, denoted by P f-* (q, a), iff there exists
a finite sequence of PGL clauses C1, ..., Cm such that
Cm = (q, a) and, for each i E {1, . . . , m}, it holds that
Ci E P, Ci is an instance of the axiom or Ci is ob­

tained by applying the above inference rule to previous
clauses in the sequence.

Next, we define the syntactic counterpart of maximum
degree of possibilistic entailment.
6 (Maximum degree of deduction)
The maximum degree of deduction of a goal q from
a set of PGL clauses P, denoted lqlp, is the greatest
a E [0,1] such that P f-* (q, a).

Definition

As the only inference rule of our proof method is the
generalized modus ponens, within the framework of
logic programming in which P is always a finite set of
PGL clauses, there exists a finite number of proofs of
a goal q from P, and thus, the above definition turns
into lqlp =max{a E [0,1] 1 P f-* (q, a)}.

tailment of a goal q from a set of PGL clauses P is
the least necessity evaluation of q given by the models
of P. Thus, llqiiP inf{N([ q] l 7r ) l1r f= P}.

The following propositions are needed to prove com­
pleteness.

Proof: We define a1 = sup{a E [0,1] I P f= (q, a)}
and az= inf {N([q] l1r) l1r f= P}.

Proposition

=

az 2: a1: As a1 = sup{a E [0,1] I P f= (q, a)} we
have that P f= (q, a), for all a < a1. Then, for
every model1r of P we have that N([q] l1r) 2: a
for all a < a1. Thus, az = inf { N([ q] l1r) l1r f=
P} 2: a, for all a < a1, hence, az 2: a1.
az ::; a1: As az = inf{N([q] l1r) l1r f= P} we have
that N([q] l1r) 2: a2 for all model1r of P, that is
P f= (q, az), and thus, az ::; sup{a E [0,1] 1 P f=
(q, a)}= a1.
0
Corollary 1 Let P be a of PGL clauses and let s be
a propositional variable. Then, P f= (s, l l sl l p).

To provide our possibilistic logic programming lan­
guage with a complete calculus for determining the
maximum degree of possibilistic entailment we only
need the triviality axiom and a particular instance of
the generalized modus ponens rule introduced in the
previous section:

1 If the only formulas in P with head q
are recursive3, then llqiiP= lqlp = 0.

Proposition 2 Let (p, /3 ) and (p

clauses such that p "# q.
min(/3, 'Y).

-t q, 'Y) be two PGL
Then, llqll{(p ,/3),(p-+q,-y)}
=

3 Let P be a set of PGL clauses and let
(r -t q, 'Y) be a clause of P. If llqiiP > llqiiP\{(r-+q,-y)}'
then llqiiP = llqll{(r,<>r),(r-+q,-y)}> where ar = llriiP·

Proposition

Proposition 4 Let P be a set of PGL clauses and let
(q -t p,"f) be a clause of P. It holds that llq llp =
llqiiP\{(q-tp,-y)}
·

Theorem 3 (Completeness) Let P be a set of PGL
clauses and let q be a goal. Then, llqiiP= lqlp.

Proof: By the soundness of the modus ponens infer­
ence rule, we have llqiiP 2: l ql p. Therefore, we must
3A

with

recursive formula is of the form Pl 1\ ·
0.

k�

· ·

1\pk 1\ q-+ q

UNCERTAINTY IN ARTIFICIAL INTELLIGENCE PROCEEDINGS 2000

prove llqiiP :::; lqlp and we proceed by induction on n,
where n is the number of clauses of P.

If llqiiP > llqiiP', by Proposition 3, llqiiP =
llqll{(p ,ap),(p--+q,7)}, where a p == IIPIIP, and, by
Proposition 2, llqll{(p ,ap),(p--+q,7)} = min(ap,"'f).
Now,by Proposition 4, IIPIIP =IIPIIP' and,by the
induction hypothesis,IIPIIP' :::; IPIP'· Since IPIP' :::;
IPIP and (p--+ q, "'f)E P,applying the modus po­
nens inference rule, we get P f-* (q, min(IPIP,"'f))
with min(IPIP,"'f) 2 min (ap ,"'f). Then, lqlp =
max{a E [0, 1]1 P f-* (q, a)} 2 min(IPIP,"'f), and
thus, lqlp 2 min(a p ,"Y) =llqiiP·
D

If n =1,then it must be that P contains only either
one certainty-weighted fact or rule. We assume that
q occurs in P as the head of a non recursive formula;
otherwise,by Proposition 1, we have llqiiP =lqlp =0.
Suppose that P contains only the certainty-weighted
fact (q, "'(). Let I0 and h be two interpretations such
that Io(q) < 1- "'( and ft(q) = 1. Now, let 1r be a
possibility distribution with the following definition:
1r(I) =

{

1,
if I =I1
1- "'f, if I =Io
0,
otherwise

It is easy to check that 1r f= (q,"'f) and N([q]I 1r)
"'f· Then, by Theorem 2, we have llqiiP =inf{N([qJI
1r ) I 1r f= (q,"'()} :::; "Y· Now, lqlp =max{a E [0, 1]I
(q,"'() f-* (q,a )} ="'(,and thus, llqiiP:::; lqlp .
Suppose that P contains only the certainty-weighted
rule (r --+ q, 'Y). Let I0 be an interpretation such that
I0 (r) :::; I0 (q) < 1 and let 1r be a possibility distribution
with the following definition:
7r (I) =

{

1, if I = I0
0, otherwise

5

In the particular case that we do not allow recursive
formulas in the language, the underlying uncertainty
logic of our logic programming system is syntactical
equivalent to the family of infinitely-valued proposi­
tional logics the interpreter defined in [Escalada-Imaz
and Manya, 1995] can deal with. The interpreter is
based on a backward proof algorithm for computing
the maximum degree of deduction of a propositional
variable from a set of formulas whose worst-case time
complexity is linear in the total number of occurrences
of propositional variables in the set of formulas. We
show bellow an example of PGL clauses the interpreter
can deal with.
Example 1 The maximum degree of deduction of the

It is easy to check that1r f= (r --+ q, "'f) and N([qJI 1r)
0. Then, by Theorem 2, we have llqllp =inf { N ( [q]l
1r ) l1r f= (r--+ q,"'() } = 0, and thus,llqiiP:::; lqlp .

goal friend_Mary_J ohn from the set of clauses

=

Suppose now that for any set P' that contains n clauses
it holds that llsiiP' :::; lsiP' for any propositional vari­
able s, and suppose that P contains n + 1 clauses.
Since we are assuming that q occurs in P as the head
of a non recursive formula, let (<.p,"'f) be a clause of
P such that <.p is a non recursive formula with head q
and "'( 2 8, for any clause ( 'ljJ, 8) of P such that 'ljJ is
a non recursive formula with head q. We distinguish
two cases:
Case ( <.p, 'Y) =(q, "'(). Let I0 and h be two interpreta­
tions such that I0(q) < 1- "'( and Io(p) = 1 for
any propositional variable p =J. q, and h ( s) =1
for any propositional variable s. Now,let 1r be a

possibility distribution with the following defini­
tion:
1,
if I =I1
1r(I) = 1- "'f, if I =Io
otherwise
0,
Since "'( 2 8 for any non recursive clause ('1/J,8) of
P such that q is the head of 'ljJ, we have that1r f= P
and N([q]l1r) ='Y· Therefore,by Theorem 2, we
have llqiiP =inf{N([qJ I 1r) I 1r f= P} :::; "Y· Now,
lqlp =max{a E [0, 1] I P f-* (q,a )} 2 "'(, and
thus, llqiiP :::; lqlp .

{

Case (<.p,"'f) = (p--+ q,"'(). If we define P' =P\{(p--+
q, "'()} we have that llqiiP 2 llqiiP'·
If llqiiP =llqiiP', by the induction hypothesis, we
have that llqiiP':::; lqiP', and thus,llqiiP :::; lqiP·

P={ (Mary_i s_young, 0.8),
(John_is_young, 0.9),
(Mary_is_young 1\ John_is_young--+
friend_Mary_John, 0.6) },
is 0.6 which corresponds with the deduction degree
comp uted by the interp reter when taking as triangular
norm the min -conjunction function and as imp lication
Godel's many-valued imp lication function.
5

ADDING FUZZY UNIFICATION

Our aim is to extend the calculus of our possibilistic
language to allow a semantical matching between fuzzy
propositional variables based on a necessity evaluation
of fuzzy events. For instance, given the set of PGL
clauses
P={ (Mary_is_young, 0.8),
(John_is_aboutr6, 0.9),
(Mary_is_young 1\ John_is_young--+
friend_Mary_John, 0.6) },
where John_is_young and John_is_about16 are two
fuzzy propositional variables,the maximum degree of
deduction of the goal friend_Mary_John from P is 0
unless we be able to compute the necessity evaluation
of the propositional variable John_is_young from the
fact that the propositional variable John_is_about16 is
certain with a necessity of at lest 0.9.
To tackle the fuzzy unification problem within our pos­
sibilistic framework we are lead (i) to fix a domain
and an interpretation of fuzzy propositional variables

6

UNCERTAINTY IN ARTIFICIAL INTELLIGENCE PROCEEDINGS 2000

in terms of its membership functions, otherwise we
would not be able to identify when two propositional
variables A and B are related and, furthermore, we
would not be able to reason about the certainty of
the propositional variable B from the fact that the
domain-related propositional variable A is certain with
a necessity of at least o:; and (ii) to define some mea­
sure to compute the necessity evaluation of a fuzzy
propositional variable B based on a domain-related
fuzzy propositional variable A.
5.1

PROPOSITIONAL VARIABLES WITH
FINITE DOMAINS

With respect the underlying uncertainty logic de­
scribed in Section 2, the main difference is that now
we attach propositional variables with a sort. In doing
so, we are introducing a minor change in the seman­
tics. Many-valued interpretations should map a sort
into a non-empty domain and a propositional variable
into a value of its domain, and thus, in turn we need
to provide a new notion of interpretation.
A more rigorous approach should be to define a first­
order language with typed regular predicates and
sorted fuzzy constants (cf. [Alsinet et al., 1999]) which
would allow us to represent, for instance, the fuzzy
statement "Mary is young" as age(M ary, young).
However, since variables and function symbols are not
allowed in the language, fuzzy propositional variables
give us a more simple representation model without
lost of expressiveness.
Definition 7 (Extended many-valued interpre­
tation) An interpretation I= (U, i, m) maps:
1. each sort

a

into a non-empty domain U,;

2. all propositional variables p of sort

value i(p) E U,; and

3. a propositional variable p of sort

malized} fuzzy set m(p): U,

--t

a

a

[0, 1].

into a same
into a (nor­

Notice that an interpretation I = (U, i, m) is disjunc­
tive in the sense that i(p) is a unique value of the
domain U, for any propositional variable p of sort a,
and i(p) =/:. i(p') iff p and p' are of different sorts.
In what follows, we shall denote by J.Lm(p) the member­
ship function of m(p). The truth value of a proposi­
tional variable p under an interpretation I= (U, i, m),
denoted by I(p), is computed as
I(p)= J.Lm(p) (i(p)).

fuzzy set m(p). Therefore, in order to measure the
certainty of a sorted propositional variable in a possi­
bilistic model we cannot take into account any possible
interpretation, but only those which share a common
interpretation of propositional variables, and hence
which also share their domain. This leads us to de­
fine the notion of context (cf. [Alsinet et al., 1999])
8 (Context) Let U be a collection of
non-empty domains and let m be an interpretation
of propositional variables over U such that for every
propositional variable p there exist u,v E U,, a being
the sort of p, such that J.Lm (p) (u)= 0 and J.Lm (p) (v) 1.
We define the context determined by U and m, denoted
by 'Iu,m , as the set of extended many-valued interpre­
tations having U as domain and m as interpretation
of propositional variables. Thus,

Definition

=

'Iu,m = {IE 'I I I= (U, i, m)},
where 'I denotes the set of all extended many-valued
interpretations.
Remark that given a context 'Iu,m and a proposi­
tional variable p, there exist at least two interpreta­
tions Io,l1E 'Iu,m such that Io(p)= 0 and h (p) = 1.
Let us briefly discuss the reason for defining the notion
of context by means of an example.
Example 2 Let age_Mary_around19 be a proposi­

tional variable of sort Mary_years_old and let Io
(U, i, mo) and h = (U, i, m1) be two interpretations
such that
=

•

UMary_years-old = [0, 120](years) ,

•

i(age_Mary_around19) = 20,

•

mo(age_Mary_aroundlg) = [17; 18; 20; 21]-trape­
zoidal fuzzy set4- and

•

m1 (age_M ary_around19)= [18; 19; 19; 20].

Although the age of Mary is the same value in both
interpretations, we have a different truth value in each
interpretation depending on the membership function
of the fuzzy set assigned to the propositional variable.
Thus,
Io(age_Mary_aroundlg)= J.L[l7;1B;20;21] (20)= 1
and
Il(age_Mary_aroundlg)= J.L[l8;19;19;20J (20)= 0.
Then, for instance, the possibility distributions 1r that
satisfy the PGL clause
(age_Mary_around1g, 1)

These truth evaluations extend to rules in the usual
way by using the truth functions described in Sec­
tion 2.

are those such that 1r(I0) � 1 and1r(h )= 0, and thus,
Io can be fully plausible while h is inadmissible, how­
ever, Mary is twenty years old in both interpretations.

Remark that the truth value of a propositional vari­
able p under an interpretation I = (U, i, m) depends
not only on the value i(p) assigned to p, but on the

4
We represent a trapezoidal fuzzy set as [t1; tz; t3; t4],
where the interval [h, t4] is the support and the interval
[tz, t3] is the core.

UNCERTAINTY IN ARTIFICIAL INTELLIGENCE PROCEEDINGS 2000

Therefore, when fixing a particular context we are en­
suring that belief states modeled by normalized possi­
bility distributions on a set of possible interpretations
(or possible states) are consistent, in the sense that
possible states are sharing a common view of the real
world.
Finally, the notion of possibilistic satisfaction can be
easily extended in a particular context Iu,m in the fol­
lowing way. Given a context Iu,m, the models of a
set of PGL clauses P are the normalized possibility
distributions on the set of extended many-valued in­
terpretations Iu,m that satisfy all the clauses in P.
5.2

EXTENDED INFERENCE WITH
POSSIBILISTIC PATTERN
MATCHING

To provide PGL with a semantical matching mecha­
nism we need a measure for computing the necessity
evaluation of the propositional variable B based on
the domain-related propositional variable A. Further­
more, this measure should enable us to include new in­
ference patterns in our previous calculus of Section 4 in
order to keep completeness for determining the maxi­
mum degree of possibilistic entailment of a goal form
a set of PGL clauses in a particular context.
Again there are several alternatives. After a careful
analysis we have chosen the same type of measure
used when defining the possibilistic semantics for PGL.
Namely, given a context Iu,m, the necessity evaluation
of B based on the domain-related propositional vari­
able A is defined as
N (m (B) I m(A)) = inf f.-Lm(A)(u) =? f.-Lm(B)(u),
uEU�
where =? is the reciprocal of Godel's many-valued im­
plication.
At this point we are ready to extend the calculus
to allow a semantical matching of propositional vari­
ables with finite domains through a possibilistic pat­
tern matching measure based on a necessity evaluation
of fuzzy events. Although there may exist several ap­
proaches, we have finally decided to extend the calcu­
lus with three inference rules. Given a context Iu,m,
these inference rules are defined as follows:
Semantical unification:

(p, a)
[SU ]'
(p', min(a,;3))
where ;3 =N(m (p') I m (p)).
Intersection:
(Pl, a), (p2, ;3)
[I N]'
(p',min(a,;3))
if f.-Lm(p');::: min(f.-Lm(p,)' f.-Lm(p2))·
Resolving Uncertainty:
(p, a)
[U N]'
(p'' 1)
if f.-Lm(p') ;::: max(1- a,f.-Lm(p))·

7

Theorem 4 The SU, IN and UN inference rules are

sound in a context Iu,m with respect to the possibilistic
entailment of PGL clauses.

Proof: Soundness of the IN and UN rules is straight­
forward, thus we only prove the soundness of the SU
rule. We must prove that for all possibilistic distri­
bution 7r : Iu,m -+ [0, 1], if 7r I= (p, a) then 7r I=
(p',min(a,;3)), where ;3
N (m (p') I m(p)). Assume
that 7r I= (p, a). This means that, N ([P] I 1r) ;::: a, and
thus, 1r(I) =? I(p);::: a, for all interpretation IE Iu,m·
Then, we have the following consecutive inequalities:
=

1. 1r(J)

=?

f.-Lm(p)(i (p)) 2 a

2. min(1r(I) =? f.-Lm(p)(i (p)),
f.-Lm(p)(i (p)) =? 1-Lm(p')(i (p')));:::
min(a,f.-Lm(p)(i (p)) =? f.-Lm(p')(i (p')))
J..lm(p)(i (p)),
i
(
(
f.-Lm(p) p)) =? /-Lm(p')(i (p'))) �
(I)
7r
=} f.-Lm(p')(i ( p'))

3. min(1r(I)

=?

4. 1r(I) =? f.-Lm(p')(i (p'));:::
min(a,f.-Lm(p)(i (p)) =? f.-Lm(p')(i (p')))
5. inflEiu,m 1r(J ) =? f.-Lm(p')(i (p'));:::
infiEiu,m min (a,f.-Lm(p)(i (p)) =? f.-Lm(p')(i (p')))

6. inflEiu,m 1r(I) =? f.-Lm(p')(i (p' ));:::
min(a,infiEiu,m f.-Lm(p)(i (p)) =? f.-Lm(p')(i (p')))
7. N ([p'] l1r);:::
min(a,infuEU� f.-Lm(p)(u) =? f.-Lm(p')(u))
8. N ([p' ] l1r) ;::: min(a, N (m (p' ) I m (p)))
Thus, 7r I= (p' , min (a , N (m (p') I m (p)))) as well.

D

Moreover, for a given a context Iu,m, the modus­
ponens style calculus extended with the SU, IN and
UN inference rules is complete for determining the
maximum degree of possibilistic entailment of a goal
from a particular class of PGL clauses called well­
formed and satisfiable PGL programs. The formaliza­
tion of the notion of well-formed and satisfiable PGL
program and the proof of completeness for this class
of PGL clauses can be found in [Alsinet and Godo,
2000b].
3 Let John_is_about16, John_is_14_16 and
John_is_16_18 be three propositional variables of sort
John_year s_old, and let Iu,m be a context such that

Example

•

U J ohn_years-old =[0, 120] (yearS),

•

m (John_is_aboutl6) =[14; 16; 16; 18],

•

m (John_is_14_16) = (12; 14; 16; 18] and

•

m(John_is_16_18)

=

(14; 16; 18; 20] .

UNCERTAINTY IN ARTIFICIAL INTELLIGENCE PROCEEDINGS 2000

8

Now, given the set of PGL clauses

[Formato et al., 2000] extended the unification algo­
rithm of Martelli-Montanari to allow a partial match­
ing between crisp constants through similarity rela­
tions. Finally, [Dubois et al., 1998] proposed an exten­
sion of possibilistic logic dealing with fuzzy constants
and fuzzily restricted quantifiers (called PLFC), and
[Alsinet et al., 1999] provided PLFC logic with a for­
mal semantics and a sound resolution-style calculus by
refutation.

P={ (John_is_14_16, 1),
(John_is_16_18, 1) },
we have that
N(m(John_is_abouh6) I m(John_is_14_16))

=

0

and
N(m(John_is_aboutl6) I m(John_is_16_18)) = 0.
However, each model 1r
that

:

Iu,m -+ [0, 1] of P verifies

1r(I) ::=; min(J(John_is_14_16), I(John_is_16_18)),
for all I E Iu,m. Therefore, because of the three
propositional variables have the same domain, we
have that i (John_is_14_16)
i (John_is_16_18)
i(John_is_aboutl6) , for all IE Iu,m· Then, because of
this particular interpretation m of propositional vari­
ables,
=

=

7r (I ) :::; JLm(John_is_aboutl6) (i (John_is_aboutl6)),
for all I E Iu,m· Hence, P f= (John_is_aboutl6, 1),
1. On the other
and thus, 11John_is_about16IIP
hand, applying the IN rule to (John_is_14_16, 1) and
(John_is_16_18, 1) we deduce (John_is..aboutl6, 1) ,
and thus, 1John_is_abouh61P 11John_is_abouh611P·
=

=

6

RELATED WORK

The introduction of fuzzy constants in logic program­
ming languages was suggested in the early eighties by
[Cayrol et al., 1982] and [Bel et al., 1986] with the
aim of including fuzzy values in a pattern matching
procedure. Subsequently, [Umana, 1987] defined a
fuzzy pattern matching process using the extension
principle for one and two variate functions, and in
[Baldwin et al., 1995] the authors implemented a se­
mantic unification procedure based on the theory of
mass assignments which allows a unified framework for
the treatment of fuzzy and probabilistic data. [Godo
and Vila, 1995] proposed a possibilistic-based logic to
deal with fuzzy temporal constraints based on many­
valued semantics and a necessity-like measure to allow
a pattern matching mechanism between fuzzy tempo­
ral constraints. [Virtanen, 1998] defined a fuzzy unifi­
cation algorithm based on fuzzy equality relations and
[Arcelli et al., 1998] proposed three different kinds of
unification in the fuzzy context: the first one is based
on similarity relations, the second one identifies sim­
ilar objects through an equivalence relation and the
last one uses "semantic constraints" for defining a
more flexible unification. More recently, [Gerla and
Sessa, 1999] formalized a methodology for transform­
ing an interpreter for SLD Resolution into an inter­
preter that computes on abstract values which express
similarity properties on the set of predicate and func­
tion symbols of a classical first-order language and

The main differences between this framework and
PLFC [Alsinet et al., 1999] are (i) at the level of the
syntax and semantics of the language, (ii) at the level
of providing the language with a complete calculus,
and (iii) at the level of defining a semantical unifica­
tion mechanism between fuzzy propositions.
In PLFC, formulas are pairs of the form (<p(x), f (Y)),
where x and y denote sets of free and implicitly uni­
versally quantified variables and y ;2 x, <p(x) is a dis­
junction of literals with fuzzy constants, and f (Y) is a
valid valuation function which expresses the certainty
of <p(x) in terms of necessity measures. Basically, val­
uation functions f (Y) are constant values and vari­
able weights which are not considered in our possibilis­
tic language. Variable weights [Dubois et al., 1994a;
1994b] are suitable for modeling statements of the form
"the more x is A (or x belongs to A), the more certain
is p(x)", where A is a fuzzy set. This is formalized in
PLFC as, for all x, "p(x) is true with a necessity of at
least JLA(x)", and is represented as (p(x), A(x)) . When
A is imprecise but not fuzzy, the interpretation of such
a formula is just "VxE A, p(x)". So A acts as a (flexi­
ble if it is fuzzy) restriction on the universal quantifier.
On the other hand, fuzzy constants in PLFC can be
seen as (flexible) restrictions on an existential quanti­
fier. In general, "L(B) is true at least to degree o:", is
represented in PLFC as (L(B), o:), where L is either
a positive or a negative literal and B is a fuzzy set.
For instance, if B is imprecise but not fuzzy, (p(B), o:)
and (•p(B), o:) have to be read as "3xE B, p(x)" and
"3x E B, •p(x)", respectively.
Therefore, because of the calculus for PLFC is defined
by refutation through a generalized resolution rule be­
tween positive and negative literals, the unification (in
the classical sense) between fuzzy constants is not al­
lowed. For instance, from
s1: (•p(A) V '1/J, 1) and s2: (p(A), 1),
which, if A is not fuzzy, are interpreted respectively as
"(3x E A, •p(x)) V 'l/J" and

"3x E A, p(x)",

we can infer '1/J iff A is a precise constant. However,
a semantical unification between fuzzy events is per­
formed through variable weights and fuzzy constants.
For instance, from
s1: (•p(x) V '1/J (x), A(x)) and s2: (p(B), 1),
which, if A and B are not fuzzy, are interpreted re­
spectively as

UNCERTAINTY IN ARTIFICIAL INTELLIGENCE PROCEEDINGS 2000

"YxE A, •p(x) V 7/J(x)" and

"3xE B, p (x)",

9

