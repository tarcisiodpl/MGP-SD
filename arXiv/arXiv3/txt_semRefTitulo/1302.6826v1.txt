

is being used, new data about the domain can be ac­
cumulated, perhaps from the cases the network is used

We explore the issue of refining an exis­
tent Bayesian network structure using new
data which might mention only a subset of
the variables. Most previous works have
only considered the refinement of the net­
work's conditional probability parameters,
and have not addressed the issue of refin­
ing the network's structure. We develop

on, or from other sources. Hence, it is advantageous
to be able to improve or refine the network using this
new data. Besides improving the network's accuracy,
refinement can also provide an adaptive ability. In par­
ticular, if the probabilistic process underlying the re­
lationship between the domain variables changes over
time, the network can be adapte d to these changes and
its accuracy maintained through a process of refine­
ment. One way the underlying probabilistic process
can change is via changes to variables not represented
in the model. For example, a model of infectious dis­
ease might not include variables for public sanitation,

a new approach for refining the network's
structure. Our approach is based on the
Minimal Description Length (MDL) princi­
ple, and it employs an adapted version of

but changes in these variables could well affect the
variables in the modeL

a Bayesian network learning algorithm de­
veloped in our previous work. One of the
adaptations required is to modify the previ­
ous algorithm to account for the structure
of the existent network. The learning algo­
rithm generates a partial network structure
which can then be used to improve the exis­

A number of recent works have addressed the issue of

refining a network, e.g., [Bun91, Die93, Mus93, SL90,

SC92]. However, most of this work has concentrated
on improving the conditional probability parameters
associated with the network. There has been very lit­
tle work on actually improving the structure of the
network. Clearly errors in the construction of the
original network could have just as easily yielded in­

tent network. We also present experimental
evidence demonstrating the effectiveness of
our approach.

1

Introduction

A number of errors and inaccuracies can occur dur­
ing the construction of a Bayesian net. For example,
if knowledge is acquired from domain experts, mis­
communication between the expert and the network
builder might result in errors in the network model.
Similarly, if the network is being constructed from raw
data, the data set might be inadequate or inaccurate.
Nevertheless, with sufficient engineering effort an ade­
quate network model can often be constructed. Such a
network can be usefully employed for reasoning about
its domain. However, in the period that the network
*Wai Lam's work was supported by an OGS schol­

arship.

Fahiem

the Canadian

Bacchus's

work

was

supported

by

Govenunent through the NSERC and
IRIS programs.
The authors' e-mail addresses are

[wlamllfbacchus]tlogos.uwaterloo.ca.

accurate structures as inaccurate probability param­
eters. Similarly, changes to variables not included in
the network could result in structural as well as para­
metric changes to the probabilistic process underlying
the network variables. This paper presents a new ap­
proach to the problem of structural refinement. The
approach uses new data, which might be only partially
specified, to improve an existent network making it
more accurate and more useful in domains where the
underlying probabilistic process changes over time.
It is not uncommon that practical Bayesian network
structures involve a fairly large number (e.g.,> 100) of
nodes. However, inaccuracies or changes might affect
only some subset of the variables in the network. Fur­
thermore, new data collected about the domain might
be only partial. That is, the data might contain infor­
mation about only a subset of the network variables.
When the new data is paitial it is only possible to re­
fine the structural relationships that exist between the

Lam and Bacchus

384

variables mentioned in the new data. Our approach
performs refinement locally; i.e., it uses an algorithm
that only examines a node and its parents. This al­
lows us to employ partial data to improve local sections
of the network. Furthermore, by taking advantage of
locality our approach can avoid the potentially very
expensive task of examining the entire network.
Our approach makes use of the Minimal Description
Length MDL principle Ris89 . The MDL principle
is a machine learning paradigm that has attracted the
attention of many researchers, and has been success­

{

)

[

]

fully applied to various learning problems, see, e.g.,
GL89, QR89, LB92 . Specifically, we adapt the MDL
learning algorithm developed in our previous work
LB93 to the refinement task, and perform experi­
ments to demonstrate its viability.

[

]

[

]

In the subsequent sections we first present, more for­
mally, the problem we are trying to solve. After an
overview of our approach we show how the MDL prin­
ciple can be applied to yield a refinement algorithm.
This requires a further discussion of how the compo­
nent description lengths can be computed. The refine­
ment algorithm is then presented. Finally, we present
some results from experiments we used to evaluate our
approach. Before, turning to these details, however let
us briefly discuss some of the relevant previous
ork
on refinement.

�

[SL90,

Spiegelhalter et al.

]

SC92 developed a method

to update or refine the probability parameters of a
Bayesian networks using new data. Their method was
subsequently extended by other researchers Die93,
Mus93 . However, all of these approaches were re­
stricted to refining the probability parameters in a
fixed network. In other words, they were not capable

[

]

of refining or improving the network's structure. Bun­

[

]

tine Bun91 proposed a Bayesian approach for refin­
ing both the parameters and the structure. The initial
structure is acquired from prior probabilities associ­
ated with each possible arc in the domain. Based on
the new data, the structure is updated by calculating
the posterior probabilities of these arcs. Buntine's ap­
proach can be viewed as placing a prior distribution on
the space of candidate networks which is updated by
the new data. One can also view the MDL measure as
placing a prior distribution on the space of candidate
networks. However, by using an MDL approach we
are able to provide an intuitive mechanism for specify­
ing the prior distribution that can be tailored to favour
preserving the existent network to various degrees. Fi­

[

]

nally, Cowell et al. CDS93 have recently investigated
the task of monitoring a network in the presence of
new data. A major drawback of their approach that
it can only detect discrepancies between the new data
and the existent network, it cannot suggest possible
improvements; i.e., it cannot perform refinement.

2

The Refinement Problem

The refinement problem we address in this work is as
follows: Given a set of new, partially specified data
and an existent network structure, the objecti e is t
produce a new, refined, network. The refined network
should more accurately reflect the probabilistic struc­
ture of the new data, and at the same time retain as

�

�

much of the old network structure as is consistent with
the new data. The refinement process can be naturally
viewed as a learning task. Specifically, the source data
for the learning task consists of two pieces of informa­
tion, namely the new data and the existent network
structure. The goal of the learning task is to discover
a more useful structure based on these two sources of
information.
There are a number of features we desire of the learned
network structure. First, the learned structure should
accurately represent the distribution of the new data.
Second, it should be similar to the existent structure.
Finally, it should be as simple as possible. The jus­
tification of the first feature is obvious. The second
arises due to the fact that the task is refinement, which
carries with it an implicit assumption that the exis­
tent network is already a fairly useful, i.e., accurate,
model. And the last feature arises from the nature of
Bayesian network models: simpler networks are con­
ceptually and computationally easier to deal with ( see

[LB92]

)

for a more detailed discussion of this point .

It is easily observed that in many circumstances these
requirements cannot be fulfilled simultaneously. For
example, a learned structure that can accurately rep­
resent the distribution of the new data may possess a
large topological deviation from the existent network
structure, or it may have a very complex topologi­
cal structure. On the other hand, a learned structure
that is close to the existent structure might represent a
probability distribution that is quite inaccurate with
respect to the new data. Thus, there are tradeoffs
between these criteria. In other words, the learned
network structure should strike a balance between its
accuracy with respect to the new data, its closeness to
the existent structure, and its complexity. The advan­
tage of employing the MDL principle in this context is
that it provides an intuitive mechanism for specifying
the tradeoffs we desire.
2.1

The form of the new data

We are concerned with refining a network containing
n nodes.
These nodes represent a collection of do­
main variables X = {X1, . . , X.,}, and the structure
and parameters of the network represents a distribu­
tion over the values of these variables. Our aim is to
construct a refinement algorithm that can refine parts
of the original network using new data that is partial.
Specifically, we assume that the data set is specified
as a p-cardinality table of cases or records involving
.

a subset

Xp

of the variables in

X (i.e., Xp � X

and

Using New Data to Refine a Bayesian Network

385

I!Xpll =: p:::; n) . Each entry in the table contains an
instantiation of the variables in X . the results of a
p where n = 100,
single case. For example, in a domain
suppose that each variable X; can tale on one of the
five values {a, b, c, d, e }. The following is an example
of a data. set involving only 5 out of the 100 variables.

In this paper, we extend our learning approach to take
into account the existent network structure. Through
the MDL principle, a natural aggregation of the new
data and the existent network structure is made dur­
ing the learning process. At the same time, a natural
compromise will be sought if the new data and the
existent structure conflict with each other.

X2o

The MDL principle provides a metric for evaluating
candidate network structures. A key feature of our ap­
proach is the localization of the evaluation of the MDL

x4
b

x12
a

b
b

b

d
b

a

:

:

:

:

:

:

a

X21
e
c

b
:
:

X4s
c

a
b
:
:

Using this data set we can hope to improve the original
network by possibly changing the structure (the arcs)
between the variables x4, x12, X:w, x21! and x4S·
The data set could possibly be used to improve the
rest of the network also, if we employed techniques
from missing data analysis, e.g., [SDLC93]. However,
here we restrict ourselves to refinments ofthe structure
between the variables actually mentioned in the data
set.
3

Our Approach

As mentioned above, we employ the MDL principle in
our refinement algorithm. The idea is to firs t learn a
partial network structure from the new data and the
existent network via an MDL learning method. This
partial network structure is a Bayesian network struc­
ture over the subset of variables contained in the new
data. Thus, it captures the probabilistic dependencies
or independencies among the nodes involved. Based on
this partial network, we analyze and identify particu­
lar spots in the original network that can be refined.
The process of constructing the partial network struc­
ture is like an ordinary learning task. The new data
contains information about only a partial set of the
original network variables. However, it is complete
with respect to the partial network structure; i.e., it
contains information about every variable in the par­
tial structure. Hence, constructing the partial struc­
ture is identical to a learning task of constructing a
Bayesian network given a collection of complete data
points and additionally an existent network structure
over a superset of variables.
In our previous work, we developed a MDL approach

for learning Bayesian network structures from a col­
lection of complete data points [LB93]. Unlike many
other works in this area, our approach is able to make
a tradeoff between the complexity and the accuracy
of the learned structure. In essence, it prefers to con­
struct a slightly less accurate network if more accurate
ones require significantly greater topological complex­
ity. Ou:r approach also employed a best-first search
algorithm that did not require an input node order­
ing.

metric. We develop a scheme that makes .it possible to

evaluate the MDL measure of a candidate network by
exa.ming the local structure of each node.
3.1

Applying the MDL Principle

The MDL principle states that the best model to be
learned from a set of source data is the one the min­
imizes the sum of two description (encoding) lengths:
(1) t he description lengt h of the model, and (2) the
description length of the source data given the model.
This sum is known as the total description {encoding)
length. For the refinement problem, the source data
consists of two components, the new data and the ex­
istent network structure. Our objective is to learn a
partial network structure Hp from these two pieces of
information. Therefore, to apply the MDL principle
to the refinement problem, we must find a network Hp
(the model in this context) that minimizes the sum of
the following three items:
its own description length, 1.e., the description
length of Hp,
2. the description length of the new data given the
network Hp, and
3. the description length of the existent network
structure given the network Hp.
1.

The sum of the last two items correspond to the de­
scription length of the source data given the model
(item 2 in the MDL principle). We are assuming that
these two items are independent of each other given
Hp, and thus that they can be evaluated separately.
The desired network structure is the one with the min­
imum total description (encoding) length. Further­
more, even if we cannot find a minimal network, struc­
tures with lower total description length are to be pre­
ferred. Such structures are superior to structures with
larger total description lengths, in the precise sense
that they are either more accurate representations of
the distribution of the new data, or are topologically
less complex, or are closer in structure to the original
network. Hence, the total description length provides
a metric by which alternate candidate structures can
be compared.
We have developed encoding schemes for representing
a given network structure (item 1) , as well as for rep­
resenting a collection of data points given the network
(item 2) (see [LB92] for a detailed discussion of these

386

Lam and Bacchus

encoding schemes). The encoding scheme for the net­
work structure has the property that the simpler is the
topological complexity of the network, the shorter will
be its encoding. Similarly, the encoding scheme for
the data has the property that the closer the distribu­
tion represented by the network is to the underlying
distribution of the data, the shorter will be its encod­
ing (i.e., networks that more accurately represent the
data yield shorter encodings of the data). Moreover,
we have developed a method of evaluating the sum of
these two description lengths that localizes the com­
putation. In particular, each node has a local measure
known as its node description length. In this paper,
we use DLi1d to denote the measure of the i-th node.1
The measure DLf1d represents the sum of items 1 and
2 (localized to a particular node i), but it does not
take into account the existent network; i.e., it must
be extended to deal with item 3. We turn now to a
specification of this extension.
The Existent Network Structure

4

Let the set of all the nodes (variables) in a domain be
X == {Xt, ... , Xn}, and the set of nodes in the new
data be Xp � X containing p :S: n nodes. Suppose
the existent network structure is H,.; Hn contains of
all the nodes in X. Through some search algorithm,
a partial network structure Hp containing the nodes
Xp is proposed. We seek a mechanism for evaluating
item 3, above; i.e., we need to compute the description
length of Hn given Hp.
To describe Hn given that we already have a descrip­
tion of Hp, we need only describe the differences be­
tween H., and Hp. If Hp is similar to Hr., a description
of the differences will be shorter than a complete de­
scription of Hn, and will still enable the construction
of H.,. given our information about Hp. To compute
the description length of the differences we need only
develop an encoding scheme for representing these dif­
ferences.
What information about the differences is sufficient to
recover Hn from Hp? Suppose we are given the struc­
ture of Hp, and we know the following information:
•

•

•

a listing of the reversed arcs (i.e., those arcs in Hp
that are also in H.,. but with opposite direction),
the additional arcs of H., (i.e., those arcs in H,.
that are not present in Hp), and
the missing arcs of H.,. (i.e., those arcs that are
in Hp but are missing from H.,).

It is clear that the structure of H,. can be recovered
from the structure of Hp and the above arc informa­
tion. Hence, the description length for item 3, above,
1This

[LB93].

was

denoted

as

simply DL, in our previous paper

can be taken to be simply the length of an encoding
of this collection of arc information.
A simple way to encode an arc is to describe its two
associated nodes (i.e., the source and the destination
node). To identify a node in the structure Hn, we
need log n bits. Therefore, an arc can be described
using 2log n bits. Let r, a, and m be respectively
the number of reversed, additional and missing arcs
in Hn with respect to a proposed network Hp. The
description length Hn given Hp is then given by:

( r +a+ m)2log n.

(1)

Note that this encoding allows us to recover Hn from

Hp.

This description length has some desirable features.
In particular, the closer the learned structure Hp is to
the existent structure H.. , in terms of arc orientation
and number of arcs in common, the lower will be the
description length of H.. given Hp. Therefore, by con­
sidering this description length in our MDL metric, we
take into account the existent network structure, giv­
ing preference to learning structures that are similar
to the original structure.
Next, we analyze how to localize the description length
of Equation 1. Each arc can be uniquely assigned to
its destination node. For a node X; in Hn let r;, a; and
m; be the number of reversed, additional, and missing
arcs assigned to it given Hp· It can easily be shown
that Equation 1 can then be localized as follows:

L (r; +a;+ m;)2log n.

(2)

X,EX

Note that each of the numbers r;, a,, m;, can be com­
puted by examining only X; and its parents. Specifi­
cally, at each node X; we need only look at its incom­
ing arcs (i.e., its parent nodes) in the structure Hn and
compare them with its incoming arcs in the structure
Hp, the rest of H.,. and Hp need not be examined.
Based on new data, i can be partitioned into two
disjoint sets namely Xp and Xq, where Xq is the set
of nodes that are in X but not in Xp· Equation 2 can
lienee be expressed as follows:

L

(r;+a;+m;)2logn+

L

(r;+a;+m;)2logn.

The second sum in the above equation specifies the
description lengths of the nodes in X,. Since these
nodes are not present in the new data (i.e., they are
not in Xp), the corresponding r;'s and m;'s must be
0. Besides, the a; 's in the second sum are not affected
by the partial network structure Hp. That is, if we are
searching for a good partial network, this part of the
sum will not change as we consider alternate networks.
As a result, the localization of the description length
of the existent network structure (i.e., Equation 1) is

Using New Data to Refine a Bayesian Network

given by:
p. +

L:

X;EXp

h

(3)

+a.;+ 111-;)2log n

5

Given the new data and an existent network struc­
ture, a partial network structure can be learned via
the MDL principle by searching for a network with low
total description length. The search algorithm evalu­
ates the total description length of candidate networks
using this to guide its search. As pointed out in Sec­
tion 3.1, in previous work [LB93] we have been able to
localize the computation of the first two components
of the description length, generating a node measure
function
Similarly, in the previous section we
have shown how the third component of the descrip­
tion length can be localized. Combining these results,
we introduce a new node description length measure
for the refinement task. This is a local measure that
assigns a weight to each node, and can be computed
by examining only the node and its parents. The total
description length of the network is then computed by
simply summing over the nodes.

DLold.

Xi

DLi

=

is defined as:

DL'ild + (r,: + a,:+ 111-;)2logn,

DLi

for
(4)

where
is the local measure given in our previous
work [LB93].

DLfd

Note that any constant terms can be dropped as they
do not play a role in discriminating between alternate
proposed partial network structures Hp. Now the total
de!lcription length of a proposed network structure Hp
is simply (modulo a constant factor) the LX;EXp

DLi.

To obtain the desired partial network structure, we
need to search for the structure with the lowest to­
tal description length. However, it is impossible to
search every possible network: there are exponentially
many of them. A heuri!!tic search procedure was devel­
oped in our previous work [LB93] that has preformed
successfully even in fairly large domains. This search
algorithm can be applied in this problem to learn par­

tial network structures by simply substituting our new
description length function DL for the old one

DLold

6

Refining Network Structures

Once we have learned a good partial network structure
we can refine the original network H,. by using

H'P

{Xl! x2, ...I Xn}

be the nodes in an exis­

tent Bayesian network H,., Xp be any subset of X,
and
::::: Z:x,EX
where
is defined by
p

DLx.,

DLi,

DL;

Equation 4. Suppose we find a new topology for the

stituted into

Structure

the node

=

subgraph formed by the nodes in X'P such that this
new topology does not create any cycles when sub­

Learning the Partial Network

Definition 5.1 The node description length

information contained in Hp. The manner in which Hp
can be used is based on the following theorem about
the node description length measure.
Let X

where p. is a constant that can be ignored when com­
paring the total description lengths of candidate net­
work structures.

387

H,.;

i.e., we find a new way to connect

nodes in Xp that does not create any cycles with the
rest of H,.. This new topology will alter the node de­
scription lengths of the nodes in Xp. Let

DLj/'JJ
p

be

the sum of the node description lengths of Xp under
this new topology. Let n;:•w denote the new network
formed from Hn by replacing the connections between

the nodes in Xp by their new topology.

Theorem 6.1

If DLn.ew
x,

<

DLx-"

then HJ:•w will

ha1!e a lower total description length than H,..

A proof of this theorem is given in [Lam94].
This theorem says that we can improve a network (i.e.,
find one with a lower description length) by improv­
ing one of its subgraphs. The only restriction is that

the resulting network must remain acyclic. The the­
orem demonstrates the importance of our localization
of the total description length metric into a node de­
scription length metric. The node description length
metric allows us to refine a particular part of the net­
work without having to evaluate the total description
length of the entire network; a potentially expensive
task if the network is very large.

Despite the fact that the new data only mentions a
subset Xp of observed nodes from X, it still repre­

sents a probability distribution over the nodes in Xp.
Hence, it contains information about the probabilistic

dependencies or independencies among the nodes in

Xp, and as we have demonstrated, a partial network
structure Hp can be learned from the new data and
the original network. In general, the structure Hp is
not a subgraph of the original network. Nevertheless,

it contributes a considerable amount of new informa­
tion regarding the interdependencies among the nodes

in Xp. In some cases, Hp provides information that
allo ws us to refine the original network, generating
a better network with lower total description length.
An algorithm performing this task is discussed below.
In other cases, it can serve as an indicator for locat­
ing particular areas in the existent network that show
dependency relationships contradicting the new data.
These areas are possible areas of inaccuracy in the orig­
inal network. This issue of using new data to monitor
a network will be explored in future work.

388

6.1

Lam and Bacchus

A Refinement Algorithm

Suppose the existent network structure is

H.. ,

and

the learned partial structure is Hp. The objective of
the refinement process is to obtain a. refined structure
of lower total description length ( hopefully minimum )
with the aid of the existent structure Hn and the par­
tial structure Hp.
Say we have a. node X,.,. in Hp. In Hp this node has
some set of parents Par( X,.,., Hp)1 and a. its description
length DLi Defn. 4 in Hp can be computed. In the
existent network H.., however, X,.,. will in general have
a. different set of parents Par(Xm., Hn) and a different

description length. If Par(Xm., Hn) rt. Xp, then these
two description lengths are incomparable. In this case
Xm has a parent in Hn that does not appear in the
new data; hence the new data cannot tell us anything
about the effect of that parent on Xm 's description
length. We identify all of the nodes Xm whose parents
in H,. are also in Hp and call these the set of marked
nodes.
Suppose for a certain marked node Xm, we decide to
substitute the parents of Xm in H .. with the parents
of Xm in Hp. After the substitution, a. new structure
Hn1 is obtained. Usually the total description length
of H,.1 can be calculated simply by adding the total
description length of the old structure Hn to the dif­
ference between the local description lengths of Xm in

Hn and Hp. The new total description length of H n1
can be evaluated in this way if the substitution of the
parents of X,.,. in Hn does not affect the local descrip­
tion lengths of any other node in H .. . In fact, the only
situation where this condition fails is when the parents
of Xm in Hp contain a reversed arc ( as compared to
Hn)· Under this circumstance, we need to consider
the node X,. associated with this reversed arc. If X,.
is also a marked node, we need to re-evaluate its lo­
cal description length since it will be affected by the
substitution of Xm 's parents. Recursively, we must
detect any other marked nodes that are, in turn, af­
fected by the change in X,. 's description length. It can
be easily observed that these affected nodes must all
be connected. As a result, we can identify a marked
subgraph unit that contains only marked nodes and
which can be considered together as an unit when the
replacement is performed.
Actually, we can obtain the same subgraph unit if we
had started off at any node in the subgraph due to
the symmetrical nature of the influence between the
nodes in the subgraph. For instance, returning to the
previous example, if we considered X,. first, we would
have detected that the local description length of Xm
would be affected by the substitution of X,. 's parents.
The process would have continued and we would have
obtained the same subgraph.
Figure 1 shows the algorithm for the identification of a
marked subgraph unit with respect to Xm. Initially, Q
is a set containing the single node

Xm.

and it grows as

construct-subgraph ( Q ,Xm,M)
Let R be a set of reversed arcs from
set in Hp
For each X,. in R

Xm 's

parent

M=M- {X,.}
X,. is "marked" and Xr 1- Q then
Q = Qu{X,.}
construct-subgraph (Q,Xr,M)

If

Figure 1: The Algorithm for Identification of a Marked
Subgraph Unit

partition-into-subgraph (M,
while M #- 0
X,. is a node from M

M = M-{Xm}
Q = {Xm}

construct-subgraph

S=SU{Q}

S)

(Q,Xm,M)

Figure 2: The Algorithm for Identification of All Sub­
graph Units

the algorithm progresses. Q will contain the required
marked subgraph when the algorithm terminates. Ini­
tially, M is a set containing some nodes that could
be transferred to Q. It shrinks as the algorithm pro­
gresses and contains the remaining marked nodes that
are not included in Q.
Now, we can identify all marked subgra.ph units in Hp·
Parent substitution is to be done for all the nodes in
the subgraph if this subgra.ph is chosen for refinement.
A useful property of the subgraph is that the change
in description length of each subgraph is independent
of all other subgraphs. Figure 2 shows the algorithm
for identifying all marked subgraph units in Hp. Ini­
tially

M contains

all of the marked nodes and

§ = 0.

All subgraph units will be contained in S when the
algorithm terminates. Q is a local variable containing
the nodes for the current subgraph unit.
The refinement problem now is reduced to choosing
appropriate subgraphs for which we should perform
parent substitution in order to achieve a refined struc­
ture of lowest total description length. Although each
subgraph substitution yields an independent reduction
in description length, these substitutions cannot be
preformed independently as cycles may arise.
We use best-first search to find the set of subgraph
units that yields the best reduction in description
length without generating any cycles. To assist the

search task, we construct a list §
{S1, S2, , S1} by
ranking all subgraphs in ascending order of the benefit
gained if parent substitution was to be performed us­
ing that subgraph. The OPEN list contains search ele­
ments which consist of two components ( H, S), where
=

. . •

Using New Data to Refine a Bayesian Network

389

H is a refined network structure and S is the next
subgraph unit to be substituted into H. The elements
in the OPEN list are ordered by the sum of the de­
scription length of H and the benefit contributed by
the subgraph unit S. The initial OPEN list consists
of the search elements {Hi, Si+l) where Hi is obtained
by substituting Si into the existent structure Hn for
i = 1 tot-l.
1. Extract the first element from the OPEN list. Let

it be

{H, S;).

Put H on to the CLOSED list.

2. Construct a new refined structure
porating S; into H.

Hnew

by incor­

3. Insert the element {H, Si+t} into the OPEN list.
If Hnew is acyclic, we also insert the element
{Hnew1 SHt} into the OPEN list.

in existent s.trocture�
but not in true $tr·ucture
)II
arc

arc

in true structure.

but not in existent structure
······ ------�--

o-

Figure 4: The Existent Structure for the First Exper­
iment

4. Terminate if our resource limits are exceeded.

7

Experimental Results

8

Figure 5: The Learned Partial Network Structure for
the First Experiment

8

network, Figure 4, so that it became identical to the
true network, i.e., Figure 3, correcting all errors in the
structure.
The second experiment used new data mentioning 24

Figure 3: The True Structure Used To Generate The
Data Set
Two experiments were conducted to verify our ap­
proach to refinement. The data used in these experi­
ments was extracted from collection of complete data
points that were generated from the ALARM struc­
ture shown in Figure 3. For the first two experiments,
the new partially specified data was obtained by ex­
tracting from the complete data points the values of a
subset of the variables. The extraction of partial data
corresponds to performing a relational algebra "pro­
jection" on the full data set.
The first experiment used new data mentioning 17
nodes. The specific variables extracted for this ex­
periment were variables number 1, 2, 3, 6, 7, 8, 9, 10,
17, 18, 21, 25, 26, 27, 28, 29, and 30.
The existent network structure before refinement was
as shown in Figure 4. Note that we deliberately chose
a slightly different topology from the correct one. The
partial network structure recovered after the learning
process is shown in Figure 5. Our refinement algorithm
was then invoked. It succeeded in refining the existent

nodes, specifically nodes 4, 5, 6, 10, 11, 13, 14, 16, 19,
20,21,22, 23,24, 26, 27, 29, 31, 32, 33, 34,35, 36,and
37. The existent network structure before refinement
was shown in Figure 6. After the refinement process,
the structure was improved to the point where it be­
came identical to the true network, Figure 3, except
for the arc between nodes 10 and 21, which remained
reversed. This result, in fact, demonstrates the capa­
bility of our approach to optimize different features.
If the issue of accuracy with respect to the new data
was the only one considered, the arc connecting node
10 and 21 could be assigned in either direction: both
directions yield the same accuracy. Any distribution
that can be represented by the true structure, Figure 3,
can be equally well represented by a structure in which
the arc between 10 and 21 is reversed but is otherwise
identical. This follows from the results of Verma and
Pearl [VP90] . However, under the MDL metric used
in our refinement approach, the direction from node
10 to 21 (i.e., 10 -+ 20 ) is preferred due to the bias
from the existent structure, Figure 6. In other words,
although accuracy with respect to the data is unable
to decide a direction for this arc, the bias from the
existent network makes our algorithm prefer to pre-

390

Lam and Bacchus

[LB93]

W. Lam and F. Bacchus. Using causal infor­
mation and local measure to learn Bayesian
networks. In Proceedings of the Confer­
ence on Uncertainty in Artificial Intelli­
gence, pages 243-250, 1993.

(Mus93]

R. Musick. Minimal assumption distribu­
tion propagation in Belief networks.
In
Proceedings of the Conference on Uncer­
tainty in Artificial Intelligence, pages 251258, 1993.

but not ln true structure

but not in existent structure
······· ·----·--

(QR89]

J. R. Quinlan and R. 1. Rivest.

[Ris89]

J. Rissanen. Stochastic Complezity in Sta­
tistical Inquiry. World Scientific, 1989.

(SC92]

D.J. Spiegelhalter and R.G. Cowell. Learn­
In
ing in probabilistic expert systems.
Bayesian Statistics 4, pages 447-465. Ox­
ford University Press, 1992.

>

Figure 6: The Existent Structure for the Second Ex­
periment

serve the causal structure of the existent network if no
information in the data contradicts this choice.

Acknowledgments
We would like to thank E. Herskovits and M. Singh
for providing the ALARM network database, and the
referees for some insightful comments.

[SDLC93] D.J. Spiegelhalter, A.P. Da.wid, S.L. Lau­
ritzen, a.nd R.G Cowell. Bayesian analy­
sis in expert systems. Statistical Science,
8(3):219-283, 1993.
[5190]

D.J. Spiegelhalter and S.L. Lauritzen. Se­
quential updating of conditional probabilities on directed graphical structures. Net­
works, 20:579-605, 1990.

[VP90j

T. Verma and J. Pearl. Equivalence and
synthesis of causal models. In Proceedings
of the Conference on Uncertainty in Artifi­

