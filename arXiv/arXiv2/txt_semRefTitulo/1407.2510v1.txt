. According to the Erdős discrepancy conjecture, for any infinite ±1
sequence, there exists a homogeneous arithmetic progression of unbounded discrepancy. In other words, for any ±1 sequence
(x1 , x2 , ...) and a discrepancy C,
P
there exist integers m and d such that | m
i=1 xi·d | > C. This is an 80-year-old
open problem and recent development proved that this conjecture is true for discrepancies up to 2. Paul Erdős also conjectured that this property of unbounded
discrepancy even holds for the restricted case of completely multiplicative sequences (CMSs), namely sequences (x1 , x2 , ...) where xa·b = xa · xb for any
a, b ≥ 1. The longest CMS with discrepancy 2 has been proven to be of size
246. In this paper, we prove that any completely multiplicative sequence of size
127, 646 or more has discrepancy at least 4, proving the Erdős discrepancy conjecture for CMSs of discrepancies up to 3. In addition, we prove that this bound is
tight and increases the size of the longest known sequence of discrepancy 3 from
17, 000 to 127, 645. Finally, we provide inductive construction rules as well as
streamlining methods to improve the lower bounds for sequences of higher discrepancies.

Introduction
Discrepancy theory addresses the problem of distributing points uniformly over some
geometric object, and studies how irregularities inevitably occur in these distributions.
For example, this subfield of combinatorics aims to answer the following question: for
a given set U of n elements, and a finite family S = {S1 , S2 , . . . , Sm } of subsets of U ,
is it possible to color the elements of U in red or blue, such that the difference between
the number of blue elements and red elements in any subset Si is small?
Important contributions in discrepancy theory include the Beck-Fiala theorem [1]
and Spencer’s Theorem [2]. The Beck-Fiala theorem guarantees that if each element
appears at most t times in the sets of S, the elements can be colored so that the imbalance, or discrepancy, is no more than 2t
p− 1. According to the Spencer’s theorem, the
discrepancy of S grows at most as Ω( n log(2m/n)). Nevertheless, some important
questions remain open.
According to Paul Erdős himself, two of his oldest conjectures relate to the discrepancy of homogeneous arithmetic progressions (HAPs) [3]. Namely, a HAP of length
k and of common difference d corresponds to the sequence (d, 2d, . . . , kd). The first
conjecture can be formulated as follows:
*Submitted on April 14, 2014 to the 20th International Conference on Principles and Practice
of Constraint Programming.

2

Conjecture 1. Let (x1 , x2 , ...) be an arbitrary ±1 sequence. The discrepancy of x w.r.t.
HAPs mustPbe unbounded, i.e. for any integer C there is an integer m and an integer d
m
such that | i=1 xi·d | > C.

This problem has been open for over eighty years, as is the weaker form according
to which one can restrict oneself to completely multiplicative functions. Namely, f is
a completely multiplicative function if f (a · b) = f (a) · f (b) for any a, b. The second
conjecture translates to:
Conjecture 2. Let (x1 , x2 , ...) be an arbitrary completely multiplicative ±1 sequence.
The discrepancy of xP
w.r.t. HAPs must be unbounded, i.e. for any integer C there is a
m
m and a d such that | i=1 xi·d | > C.

Hereinafter, when non-ambiguous, we refer to the discrepancy of a sequence as its
discrepancy with respect
P to homogeneous arithmetic progressions. Formally, we denote
disc(x) = maxm,d | m
i=1 xi·d |. We denote E1 (C) the length for which any sequence
has discrepancy at least C + 1, or equivalently, one plus the maximum length of a
sequence of discrepancy C. Similarly, we define E2 (C) the length for which any completely multiplicative sequence has discrepancy at least C + 1. 1
A proof or disproof of these conjectures would constitute a major advancement in
combinatorial number theory [4]. To date, both conjectures have been proven to hold
for the case C ≤ 2. The values of E1 (1), E2 (1), and E2 (2) have been long proven to be
12, 10, and 247 respectively, while recent development proved E1 (2) = 1161 [5]. Konev
and Lisitsa [5] also provide a new lower bound for E1 (3). After 3 days of computation,
a SAT solver was able to find a satisfying assignment for a sequence of length 13, 000.
Yet, it would fail to find a solution of size 14, 000 in over 2 weeks of computation. They
also report a solution of length 17, 000, the longest known sequence of discrepancy 3.
In this paper, we substantially increase the size of the longest sequence of discrepancy
3, from 17, 000 to 127, 645. In addition, we claim that E2 (3) = 127, 646, making this
bound tight, as Plingeling was able to prove unsat and Lingeling generated an
UNSAT proof in DRUP format [6].
This paper is organized as follows. The next section formally defines the Erdos
discrepancy problems (for the general case and the multiplicative case) and presents
SAT encodings for both problems. We then investigate streamlined search techniques to
boost the search for lower bounds of these two problems, and to characterize additional
structures that appear in a subset of the solutions. Furthermore, in a subsequent section,
we provide construction rules that are based on these streamliners and allow to generate
larger sequences of limited discrepancy from smaller ones. The last section presents the
results of these approaches.

Problem Formulation
In this section, we first formally define the two conjectures as decision problems and
then propose encodings for these problems.
1

Note that, if Conjecture 1 (resp. Conjecture 2) were to be rejected, E1 (C) (resp. E2 (C) ) would
correspond to infinity.

3

Definition 1 (EDP1 ). Given
Pm two integers n and C, does there exist a ±1 sequence
(x1 , . . . , xn ) such that | i=1 xi·d | ≤ C for any 1 ≤ d ≤ n, m ≤ n/d.

Konev and Lisitsa [5] provide a SAT encoding for this problem that uses an automaton accepting any sub-sequence of discrepancy exceeding C. A state sj of the
automaton corresponds to the sum of the input sequence, while the accepting state
sB captures whether the sequence has exceeded the discrepancy C. A proposition
Pm−1
(m,d)
is true whenever the automaton is in state i=1 xi·d after reading the sequence
sj
(xd , . . . , x(m−1)d ). Let pi be the proposition corresponding to xi = +1. A proposition
that tracks the state of the automaton for an input sequence (xd , x2d , . . . , x⌊n/d⌋d ) can
be formulated as:
n/d

φ(n, C, d) =

(1,d)
s0

^ 

m=1

(m+1,d) 

(m,d)

∧ pid → sj+1

(m,d)

∧ pid → sj+1

^

sj

^

sj

−C≤j<C

∧

(m+1,d) 

−C<j≤C

∧

(m,d)


∧ pid → sB ∧


(m,d)
s−C ∧ pid → sB
sC

(1)

In addition, we need to encode that the automaton is in exactly one state at any point
in time. Formally, we define this proposition as:

χ(n, C) =

^

1≤d≤n/C,1≤m≤n/d



_

(i,d)

sj

^

∧

−C≤j≤C

(i,d)

sj1

−C≤j1 ,j2 ≤C



(i,d) 

∨ sj2

(2)

Finally, we can encode the Erdős Discrepancy Problem as follows:
EDP1 (n, C) : sB ∧ χ(n, C) ∧

n
^

φ(n, C, d)

(3)

d=1
(m,d)

of the automaton do not
Furthermore, as the authors of [5], the actual states sj
require 2C + 1 binary variables to represent the 2C + 1 values of the states. Instead,
one can modify this formulation and use ⌈log2 (2C + 1)⌉ binary variables to encode the
automaton states.
For the completely multiplicative case, we introduce additional constraints to capture the multiplicative property of any element of the sequence, i.e. xid = xi xd for any
1 ≤ d ≤ n, 1 ≤ i ≤ n/d. With respect to the boolean variables pi , pd and pid , such a
constraint acts as XNOR gate of input pi and pd and of output pid . Formally, we denote
this proposition M(i, d) and define:
M(i, d) = (pi ∨ pd ∨ pid ) ∧ (pi ∨ pd ∨ pid ) ∧ (pi ∨ pd ∨ pid ) ∧ (pi ∨ pd ∨ pid ) (4)

4

Importantly, for completely multiplicative sequences, the discrepancy of the subsequence (xd , ..., xmd ) of length m and common difference d will bePthe same as
m
the
discrepancy of the P
subsequence (x
Pm
P1m, ..., xm ). Indeed , we have | i=1 xi·d | =
m
| i=1 xi xd | = P
|xd | · | i=1 xi | = | i=1 xi |. Therefore, one needs only check that
m
the partial sums i=1 xi , 1 ≤ m ≤ n never exceed C nor go below −C. Furthermore,
note that a completely multiplicative sequence is entirely characterized by the values it
takes at prime positions, i.e. {xp |p is prime}. In addition, if there exists a completely
multiplicative sequence sequence (x1 , ..., xp−1 ) of discrepancy C with p prime, then
1Pm
the sequence (x1 , ..., xp−1 , (−1) i=1 xi ≥0 ) will also be a CMS of discrepancy C. As
a result, E 2 (C) cannot be a prime number.
Overall, for the completely multiplicative case, we obtain:
^
M(i, d)
(5)
EDP2 (n, C) : sB ∧ χ(n, C) ∧ φ(n, C, 1)
1≤d≤n,1≤i≤n/d

Streamlined Search
The encoding of EDP1 given in the previous section has successfully led to prove a
tight bound for the case C = 2 [5]. On an Intel Core i5-2500K CPU, it takes about 800
seconds for Plingeling [7] to find a satisfying assignment for EDP1 (1160, 2) and
less than 6 hours for Glucose [8] to generate a proof of E1 (2) = 1, 161. Nevertheless,
for the case C = 3, it requires more than 3 days of computation for Plingeling to
find a sequence of size n = 13, 000, and fails to find a sequence of size 14, 000 in over
two weeks of computation.
In this section, in order to improve this lower bound and acquire a better understanding of the solution space, we explore streamlining techniques that identifies additional
structure occurring in a subset of the solutions. Among the solutions of a combinatorial problem, there might be solutions that possess regularities beyond the structure of
the combinatorial problem itself. Streamlining [9] is an effective combinatorial search
strategy that exploits these additional regularities. By intentionally imposing additional
structure to a combinatorial problem, it focuses the search on a highly structured subspace and triggers increased constraint reasoning and propagation. This search technique is sometimes referred to as “tunneling” [10]. In other words, a streamlined search
consists in adding specific desired or observed regularities, such as a partial pattern that
appears in a solution, to the combinatorial solver. These additional regularities boost
the solver that may find more effectively larger solutions that contain these regularities.
If no solution is found, the observed regularities were likely accidental. Otherwise, one
can analyze these new solutions and suggests new regularities. This methodology has
been successfully applied to find efficient constructions for different combinatorial objects, such as spatially-balanced Latin squares [11], or graceful double-wheel graphs
[12].
When analyzing solutions of EDP1 (n, 2) for n ∈ [1, 1160], there is a feature that
visually stands out of the solutions. When looking at a solution as a 2D-matrix with
entries in {−, +} and changing the dimensions of the matrix, there seems to be clear
preferred matrix dimensions (say m-by-p) such that the m rows are mostly identical for

5

the columns 1 to p − 1, suggesting that xi = xi mod p for 1 ≤ i ≤ p − 1. We denote
period(x, p, t) the streamliner that enforces this observation and define:
period(x, p, t) : xi = xi mod p ∀1 ≤ i ≤ t, i 6≡ 0 mod p

(6)

First, while this observation by itself did not allow to improve the current best lower
bound for E1 (3), it led to the formulation of the construction of the next section. Second,
it also led to the re-discovery of the so-called ’improved Walters sequence’ [13], defined
as follows:


if i is 1 mod 3
+1,
µ3 (i) = −1,
(7)
if i is 2 mod 3


−µ3 (i/3), otherwise.

In the following, we denote walters(x, w) the streamliner imposing that the first w
elements of a sequence x follow the improved Walters sequence, i.e.:
walters(x, w) : xi = µ3 (i) ∀1 ≤ i ≤ w

(8)

One can easily see that the improved Walters sequence is a special case of the periodic sequence defined previously. Namely, for any sequence x where walters(x, w)
holds true, then we have period(x, 9, w).
Finally, another striking feature of the solutions of EDP1 (n, 2) is that they tend to
follow a multiplicative sequence. Interesting, EDP2 restricts EDP1 to the special case
of multiplicative functions and we observe for the case C = 2 that this restriction
substantially impacts the value of the best bound possible (i.e. E1 (2) = 1, 161 whereas
E2 (2) = 247). Nevertheless, the solutions of EDP1 (n, 2) exhibit a partial multiplicative
property and we define:
mult(x, m, l) : xi·d = xi xd ∀2 ≤ d ≤ m, 1 ≤ i ≤ n/d, i ≤ l

(9)

In the experimental section, we show the speed-ups that are triggered using these
streamliners, and how the best lower bound for EDP1 (n, 2) gets greatly improved.

Construction Rule
In this section, we show how we used insights from the period(x, p, t) streamliner in
order to generate an inductive construction rule for sequences of discrepancy C from
sequences of lower discrepancy.
Consider a sequence x that is periodic of period p, as defined in the previous section,
i.e. period(x, p, |x|) holds true, and is of length n = p ∗ k. Then, the sequence x can be
written as:
x = (y1 , y2 , . . . , yp−2 , yp−1 , z1
y1 , y2 , . . . , yp−2 , yp−1 , z2
...
y1 , y2 , . . . , yp−2 , yp−1 , zk )

(10)

6
′
Let C be
discrepancy
Pthe
Pmof z = (z1 , z2 , ..., zk ) and C the discrepancy of (y1 , ..., yp−1 ).
m
Given that i=1 xip = i=1 zi for any 1 ≤ m ≤ k, we have disc(x) ≥ C. Note that
if x was completely multiplicative, then it would hold disc(x) = C. We study the general case where x is not necessarily multiplicative, and investigate the conditions under
which disc(x) is guaranteed to be less or equal to C + C ′ .
For a given common difference d and length m, we consider the subsequence
p
. Given the definition 10 of x, the subsequence
(xd , x2d , ..., xmd ). Let q = gcd(d,p)
(xd , x2d , ..., xmd ) corresponds to:

(yd mod p , y2d mod p , ..., y(q−1)d mod p , zq ,
yd mod p , y2d mod p , ..., y(q−1)d mod p , z2q ,
yd mod p , ...)

(11)
(12)
(13)

Note that if p divides d or d divides p, this subsequence becomes (zq , z2q , ..., zqm )
and is of discrepancy at most C. As a result, a sufficient condition for x to be of discrepancy at most C + C ′ is to have yd mod p , y2d mod p , ..., y(q−1)d mod p of discrepancy
C ′ and summing to 0. We say that such a sequence has a discrepancy modp of C ′ .
Formally, we define the problem of finding such sequences as follows:
Definition 2 (Discrepancy mod p). Given two integers p and C ′ , does there exist a ±1
sequence (y1 , . . . , yp−1 ) such that:
|

m
X

yi·d mod p | ≤ C ′ , ∀1 ≤ d ≤ n, m <

i=1

p
gcd(d, p)

(14)

p
−1
gcd(d,p)

X

yi·d mod p = 0, ∀1 ≤ d ≤ n

(15)

i=1

Notice that, given the equation 15, p should be odd for such a sequence to exist.
We encode this problem as a Constraint Satisfaction Problem (CSP) in a natural way
from the problem definition. We provide the experimental results in the next section.

Results
All experiments were run on a Linux (version 2.6.18) cluster where each node has an
Intel Xeon Processor X5670, with dual-CPU, hex-core @2.93GHz, 12M Cache, 48GB
RAM. Unless otherwise noted, the results were obtained using the parallel SAT solver
Plingeling, version ats1 for the SAT encodings, and using IBM ILOG CPLEX
CP Optimizer, release 12.5.1 for the CP encodings.
First, we evaluate the proposed streamliners for the two problems. Table 1 reports
the length of the sequences that were successfully generated, as well as the computation
time. The first clear observation is that, for EDP1 , the streamlined search based on the
partial multiplicative property significantly boosts the search and allows to generate
solutions that appear to be out of reach of the standard search approach. For example,
while it takes about 10 days to find a solution of length 13, 900 without streamliners, the

7

streamlined search generates a substantially-large satisfying assignment of size 31, 500
in about 15 hours. Next, we study streamliners that were used for EDP2 , i.e. partially
imposing the walters sequence. The results clearly show the speed up triggered by the
combination of the new encoding for EDP2 with the walters streamliners. Interestingly,
the longest walters sequence of discrepancy 3 is of size 819. Nevertheless, one can
successfully impose the first 800 elements of the walters sequence and still expand it to
a sequence of length 108, 000. Furthermore, when imposing walters(730), it takes less
than 1 hour and an half to find a satisfying assignment for a sequence of size 127, 645.
Moreover, without additional streamliners, it takes about 60 hours to prove unsat for the
case 127, 646 and allows us to claim that this bound is tight. Nevertheless, the solver
generates a DRUP proof of size 335GB, which lies beyond the reach of traditional
checkers [6].

Encoding

EDP1

EDP2

Streamliners

Size of sequence Runtime (in sec)

mult(120,2000)
mult(150,2000)
mult(200,1000)
mult(700,10000)
mult(700,20000)

13,000
13,500
13,900
15,600
18,800
23,900
27,000
31,500

286,247
560,663
770,122
4,535
8,744
12,608
45,773
51,144

walters(800)
walters(800)
walters(700)
walters(730)

81,000
108,000
112,000
127,645

1,364
4,333
5,459
4,501

Table 1: Solution runtimes of searches with and without streamliners. The streamlined
search leads to new lower bounds for the 2 EDP problems.

In terms of the inductive construction described in the previous section, we can generate sequences whose discrepancy modp is 1, for p in 1, 3, 5, 7, and 9, while it also
generates sequences of discrepancy modp equal to 2 for p in 11, 13, 15, 17, 25, 27, 45,
and 81. Overall, this proves that one can take any sequence x of length |x| and discrepancy C and generate one of length 9|x| and of discrepancy C + 1, or of length
81|x| and of discrepancy C + 2. As a result, this provides a new bound for the case
of discrepancy 4, and proves E1 (4) > 9 ∗ 127645 = 1, 148, 805. Interestingly, such a
long sequence suggests that the proof of the Erdos conjecture for C > 3 may require
additional insights and analytical proof, beyond the approach proposed in this work.

Conclusions
In this paper, we address the Erdos discrepancy problem for general sequences as well
as for completely multiplicative sequences. We adapt a SAT encoding previously pro-

8

posed and investigate streamlining methods to speed up the solving time and understand additional structures that occur in some solutions. Overall, we substantially improve the best known lower bound for discrepancy 3 from 17, 001 to 127, 646. In addition, we claim that this bound is tight, as suggested by the unsat proof generated
by Lingeling. Finally, we propose construction rules to inductively generate longer
sequences of limited discrepancy.

Acknowledgments
This work was supported by the National Science Foundation (NSF IIS award, grant
1344201). The experiments were run on an infrastructure supported by the NSF Computing research infrastructure for Computational Sustainability grant (grant 1059284).

