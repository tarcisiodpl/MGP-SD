
We propose a directed graphical representation of util­
ity functions, called UCP-networks, that combines as­
pects of two existing preference models: generalized
additive models and CP-networks. The network de­
composes a utility function into a number of additive
factors, with the directionality of the arcs reflecting
conditional dependence in the underlying (qualitative)
preference ordering under a ceteris paribus interpreta­
tion. The CP-semantics ensures that computing opti­
mization and dominance queries is very efficient. We
also demonstrate the value of this representation in de­
cision making. Finally, we describe an interactive elic­
itation procedure that takes advantage of the linear na­
ture of the constraints on "tradeoff weights" imposed
by a UCP-network.

1

Introduction

Effective representations for preferences and utility func­
tions are critical to the success of many AI applications.
A good preference or utility representation should capture
statements that are natural for users to assess, or are easy
to learn from data; it should offer the compact expression
of preferences or utilities; and it should support effective
inference.
·

A useful design stance for such representation is to exploit
the structure of utility functions using notions from multi­
attribute utility theory, such as conditional preferential in­
dependence, mutual utility independence, etc. [10]. Re­
cent work has exploited such structure to develop graphical
models: Bacchus and Grove [1, 2] propose an undirected
network representation for (quantitative) utility that cap­
tures conditional additive utility independencies; Boutilier,
Brafman, Hoos and Poole [3] propose a directed network
representation for (qualitative) preference functions that
captures conditional preference statements under a ceteris
paribus (all else equal) assumption. La Mura and Shoham
[II] describe a hybrid representation for combining both
probabilistic and utility information in a Wldirected graph­
ical model representing expected utilities directly.

In this paper, we propose a new directed network represen­
tation for utility functions that combines certain aspects of

the first two of these approaches. The UCP-network for­
malism can be viewed as an extension of the CP-network
model [3] that allows one to represent quantitative utility
information rather than simple preference orderings. The
formalism also utilizes the notion of generalized additive
independence (GAl) [1]. By employing a directed graph,
UCP-nets allow one to make more powerful statements that
are often more natural and lead to more effective infer­
ences. In particular, we will show that dominance and op­
timization queries can be answered directly in UCP-nets.
In addition, the formalism can be used in an interactive
elicitation process to determine relevant parameters of the
UCP model in a specific decision scenario. We propose a
technique for elicitation-much like that proposed by Cha­
jewska, Koller, and Parr [4]-that exploits the linear con­
straints imposed by a partially-specified UCP-model to de­
termine an "optimal" sequence of queries.
The rest of this paper is organized as follows: Section 2
provides necessary background. Section 3 describes UCP­
nets, their properties, and their relation to GAl decomposi­
tions of utility functions and CP-networks. Section 4 dis­
cusses the problem of optimization in the context of UCP­
nets, and shows the advantage of this representation tool.
Section 5 explains how elicitation and optimization can be
performed concurrently in order to recognize near-optimal
choices with minimal questioning. We conclude in Sec­
tion 6 with a discussion of future work.
2

Background Concepts

We begin with an outline of some relevant notions from
multiattribute utility theory [10]. We assume a set of ac­
tions A is available to a decision maker, each action hav­
ing one of a number of possible outcomes. The set of all
outcomes is designated 0. A preference ranking is a total
preorder t over the set of outcomes: o 1 t o2 means that
outcome 01 is equally or more preferred by the decision
maker than o2. A utility function is a bounded, real-valued
function u : 0 f-t R. A utility function u induces a pref­
erence ordering t such that 01 t 02 iffu(ot) � u(o2). A
utility function also induces preferences over lotteries, or
distributions over outcomes, where one lottery is preferred
to another when its expected utility is greater. When actions

BOUTILIER ET AL.

UAI 2001

57

have uncertain outcomes, thereby generating a distribution
over outcomes, preferences for actions can be equated with
preferences for the corresponding lotteries [12].
One difficulty encountered in eliciting, representing, and
reasoning with preferences and utilities is the size of
the outcome space, which is generally determined by a
set of variables. We assume a set of variables V
{X1, . . . , X n} characterizing possible outcomes. Each
variable X; h as domain D o m (X ; ) = {x i , ... ,x . } . The
set of outcomes is 0 = Dom(V)
Dom(X1) x · · · x
Dom(Xn)· Thus direct assessment of a preference func­
tion is generally infeasible due to the exponential size of
0. Fortunately, a preference function can be specified con­
cisely if it exhibits sufficient structure. We describe certain
standard types of structure here (see [10] for further de­
tails).
=

Figure 1: A CP-Network

�

=

We denote a particular assignment of values to a set X � V
as x, and the concatenation of two non-intersecting partial
assignments by xy. If XU Y
V, xy is a complete
outcome, and xy is a completion of the partial assignment
x. Comp(x) denotes the set of completions ofx.
=

A set of features X is preferentially independent of its com­
plementY = V- X iff, for all x1, xz, y1, yz, we have

X1 Y1 � X2Y1

iff

X1Y2 � XzYz

We denote this as PI(X, Y). In other words, the structure
of the preference relation over assignments to X, when all
other features are held fixed, is the same no matter what
values these other features take. If PI(X,Y) and X 1Y �
x2y for any assignment y to V- X, then we say that x1
is preferred to x 2 ceteris paribus. Thus, one can assess the
relative preferences over assignments to X once, knowing
these preferences do not change as other attributes vary. We
define conditional preferential independence analogously.
Let X, Y, and Z be nonempty sets that partition V. X
and Y are conditionally preferentially independent given
an assignment z to Z (denoted CPI(X, z,Y)) iff, for all
XI,Xz,YI,Y2, we have

In other words, the preferential independence of X andY
holds when Z is assigned z. If we have CPI(X, z,Y) for
all z E Dom(Z), then X andY are conditionally preferen­
tially independent given Z, denoted CPI(X, Z,Y).
Decomposability of a preference function often allows one
to identify the most preferred outcomes rather readily. Un­
fortunately, the ceteris paribus component of these defini­
tions means that the CPI statements are relatively weak.
In particular, they do not imply a stance on specific value
tradeoff's. For instance, suppose PI( A,B) and PI(B, A)
so that the preferences for values of A and B can be as­
sessed separately, with a1 >- az and b1 >- bz. Clearly, a1b1
is the most preferred outcome and a2b2 is the least; but if
feasibility constraints make a 1 b1 impossible, we must be
satisfied with one of a1b2 or a2b1. With just preferential
independence we cannot tell which is most preferred us­
ing these separate assessments. Stronger conditions (e.g.,

mutual preferential independence [ 1 0]) are required before
such tradeoff's can be easily evaluated.
CP-nets [3] are a graphical representation for structuring
In particular, CP-nets are directed acyclic
graphs whose nodes are the variables of V. We associate a

CPI statements.

conditionalpreference table (CPT) with each node X spec­
ifying a preference order over X's values given each in­
stantiation of its parents U, and require that CPI(X, U, Z)
hold, where Z = V- (U U {X}). CP-nets structure these
CPI statements so as to support useful inferences about the
underlying preference order [3]. In Fig. 1 we see a CP-net
defined over a set of four boolean variables, where, e.g.,
the CPT for
specifies that c is preferred to c when a and
b hold. An important property of CP-nets is the induced
importance it assigns to different variables: nodes "higher­
up" in the graph are more important than their descendants.
Thus, it is more important to obtain preferred values for a
node than for any one of its descendants. For example, in
the CP-net above, we can see that abed (in which a less pre­
ferred value of
appears) is preferred to abed (in which a
less preferred value of A appears). This property plays an
important role in UCP-nets.

C

C

Let X1, . . . , Xk be sets of not necessarily disjoint vari­
ables such that V
uiX;. X1, .. . ,Xk are generalized
additive independent (GAl) for an underlying utility func­
tion u if, for any two probability distributions Pr1 and Pr2
over Dom(V) that have the same marginals on each of the
sets of variables Xi, u has the same expected value under
Pr1 and Pr2• In other words, the expected value of u is not
affected by correlations between the X i. It depends only
on the the marginal distributions over each the X i.
=

xk are GAl iff u can be
J;(Xi). That is, u can be de­

It can be shown [1] that xl,.'.

L:�=l

I

written as u(V) =
composed into a sum of factors over each of these sets of
variables. This property generalizes the standard definition
of additive utility independence, which requires that the Xi
partition V. For UCP-nets the ability to deal with overlap­
ping sets of variables is critical.

3

Adding Utilities to CP-Nets

As noted above, the precision of a utility function (as op­
posed to a preference ordering) is often needed in decision
making contexts where uncertainty is a factor. The rep­
resentation of utility functions should be natural, easy to
elicit, compact (in typical cases), and support effective in­
ference. There are two basic types of queries with regard

BOUTILIER ET Al.

58

h(a,b,c)

UA12001

=

0.6, while h(a,b,c)

=

0.1. Thus, the CPT

tables along with the GAJ i nterp r eta tion provide a full spec­

ification of the utility function. For example, we have that

u(a,b,c,d) = fi(a) + h(b)
5 + 5 + 0.1 + 0.3 = 10.4.
Figure 2: A UCP-Network
to outcomes one will often ask: 1
(a) Dominance queries: does one outcome have higher
utility than another (i.e., u(vt) :?: u(v2))?

(b) Outcome optimization queries: what outcome has
maximum utility given some partial assignment (i.e.,
what is ar g m ax {u(v ) : v E Comp(x)})?
GAl-models allow dominance testing to be performed very
effectively: the utility of outcome v is readily determined
by looking up the value /i(v) of each factor applied to v,
and summing them to obtain u(v). In contrast, CP-nets
do not allow straightforward dominance tests, generally re­
quiring reasonably sophisticated search techniques for all
but the simplest network topologies. The relative attrac­
tiveness of the two approaches is, however, reversed when
one considers optimization queries. In CP-nets, determin­
ing the (conditional) maximal outcome in a preference re­
lation is straightforward. In contrast , maximization in a
GAl model requires the use of variable elimination [6, 13],
whose complexity depends on the structure of the modeL 2

+

h(a,b,c)

+

j4(c,d)

=

Notice however that the factors h and h are redundant in
the sense that they refer to variables that are included in
!J. Thus, this utility function could be represented more
concisely using a GAl decomposition containing two fac­
tors: j4(C,D) and j5(A,B,C) = JI(A) + h(B) +
h(A, B, C). The directionality of the utility-augmented
CP-network, on the surface, seems to serve no purpose
other than to break up the GAl-factors unnecessarily.
However, we can use this directionality to represent CP
conditions on the utility function u, and thus provide a sim­
ple and natural interpretation for the individual factors of u.
In particular, we interpret the fact that A and B are parents
ofC as asserting that CPJ(C, {A, B}, D), and thus the fac­
tor h(A, B,C) specifies the utility of C given A and B.
The fact that each node is isolated from the rest of the net­
work given the values of its parents greatly simplifies utility
assessment. Furthermore , this structure supports more ef­
ficient inference for certain queries than the standard GAl
representation.
Definition 1 Let u(X 1, . .. , Xn) be a utility function with
induced preference relation�- A UCP-networkfor u is a
DAG Gover X1, ... , Xn and a quantification (i.e., a set of
factors /;(X;, Ui) where Ui are the parents of Xi) s.t.:

(a) u(Xt, ... ,Xn)
Ldi(X;, U;)
(b) The DAG G is a valid CP-network for �; i.e.,
satisfies CPI(Xi, U;, Z;) for each X;, where Z;
=

We propose in this section a new network representation
for utilities that combines aspects of both CP-nets and GAl
models. The model is directed, like CP-nets, but prefer­
ences are quantified with utilities. The semantics is given
by generalized additive independence along with the con­
straint that the directed influences reflect the ceteris paribus
condition underlying CP-nets. By extending CP-nets with
quantitative uti lity information, expressive power is en­
hanced and dominance queries become computationally ef­
ficient. By introducing directionality and a ceteris paribus
semantics to the GAl model, we allow utility functions
to be expressed more naturally, and permit optimization
queries to be answered much more effectively.
A UCP-net extends a CP-net by allowing quantification of
nodes with conditional utility information. Semantically,
we treat the different factors as generalized additive in­
dependent of one another. For example, the network in
Fig. 1 can be extended with utility information by includ­
ing a factor for each family in the network, specifically,
11 (A), h(B), h(A, B, C), and j4(C,D) (see Fig. 2).
We interpret this network using GAl: u(A,B,C, D)
!I(A) + h(B) + h(A,B,C) + j4(C,D). Each of these
factors is quantified by the (now quantitative) CPT ta­
bles in the network. For example, in Fig. 2 we have that

V- (U;

u

>­

{Xi})

Condition (a) means that every UCP-net specifies a GAl
decomposition of the underlying utility function u. How­
ever, the acyclic restriction means that not every GAl de­
composition can be represented in a UCP-net. For exam­
ple, the GAl decomposition u(A, B, C)
h (A, B,C) +
h(C,B) would have to converted to the decomposition
u(A,B,C) = h(A,B,C), where h
!I + /2, before
it could be represented as a UCP-net. Nevertheless, there
is a simple case where a GAl decomposition can easily be
seen to be representable using a UCP-net topology.
=

=

Proposition 1 If there exists a ordering of the variables
such that under this ordering the last variable in every GAl
factor is unique (i.e., no variable is last in more than one
factor), then the GAl decomposition can be represented
with a UCP-net topology.

=

1
Queries regarding optimization with respect to actions are
discussed in the next section.

2GAI optimization can be effected using cost networks

[7).

To construct the UCP-net in this case, for every factor we
make every "last" variable a child and all of the prior vari­
ables its parents.
Even if we can represent a GAl decomposition in a UCP­
net topology and we parameterize the net using the GAl

BOUTILIER ET AL.

UAI2001

59

dren. It requires that we check that, for each instantiation
of X's children and the parents of its children, whether the
decrease in local utility (i.e., in factor f x) dominates the
(potential) increase it causes in the local utilities of its chil­
dren.
With this definition, we can specify a straightforward nec­
essary and sufficient condition that ensures a DAG satisfies
the CP conditions required by the definition of a UCP-net.

Figure 3: The Domination Relation

factors, the the result might not be a UCP-net, since the
utility function might not satisfy the CP requirements of
condition (b). For example , let u be a utility function over

the boolean variables A and B with u(ab)
9, u(ab)
1, u(ab)
2 and u(iib) = 8. No UCP-net can represent
=

=

=

To see this, first notice PI( A, B) fails to holds, since
preferences for B depend on A. But we cannot make A a

u.

B, since the preferences for A depend on B;
can we make B a parent of A for a similar reason. 3

parent of

nor

This example shows that, for a fixed set of variables, UCP­
nets define a proper subset of all utility functions; but this
subset has certain attractive computational properties as
well as pragmatic advantages when it comes to elicitation.
Given a UCP-network U for utility function u, verifying
that it satisfies the CP-relationships among variables re­
quired by its definition can be accomplished by tests in­
volving the local neighborhoods of each node in the net­
work.

Definition 2 Let X be a variable in a quantified DAG with
parents U and children Y = {Y1, . .. ,Yn}, and let Z;
be the parents of Y;, excluding X and any elements of
U. Let Z
U Z;. Let U; be the subset of variables
in U that are parents of Y; (the relationships among these
=

variables is shown in Fig. 3).

We say X dominates its
if, for all x 1, x2 such that

children given u E Dom(V)
fx(x!, u) ;:::: /x(x2, u), for all z
(y1, ... ,yn) E Dom(Y):

E

Dom(Z),

and for all

fx(xl, u)- fx(x2, u);::::

L jy, (y;, X2, u;, z;) - jy, (y;, x1, u;, z;)
i

X dominates its children if this holds for all u

E

Dom(V).

Testing whether X dominates its children is a local test, in­
volving only the factor for variable X and those of its chil3

The example above can be accommodated by clustering the
dependent variables. That is, we can define a new variable C with
Dom(C) = Dom(A) x Dom(B). In general, any utility function
can be represented in a UCP-net by clustering appropriate sets of
variables. This can be a reasonable approach if the clusters remain
relatively small. It is also possible to generalize the definition of
a UCP-net to allow cycles. This example could be represented by
allowing A and B to be parents of one another. Cycles allow one
to express a larger set of utility functions, but still do not permit all
utility functions to be represented. They also may admit inconsis­
tency: certain network structures with cycles do not correspond
to a consistent utility function satisfying the CP·constraints (an
impossibility in acyclic graphs). We refer to [3] for details.

Proposition 2 Let G be a DAG over {Xi} whose factors
fi reflect the GAl-structure of utility function u. Then G is
a UCP net iff each variable Xi dominates its children.
Proof: We need only show that the CP-condition holds for
iff X dominates its children. Assume the same vari­
ables stand in relation to X as in the definition of domina­
tion above, and let W
V- (U U {X} U Y U Z) (i.e.,
all of the other variables in the network). X satisfies the
CP-condition iff, for all x1, x2, u: x1 uyzw t x2uyzw
implies x1u(yzw)' � x2u(yzw)' for all (yzw)'. Now
x1 uyzw t x2uyzw iffu(x1 uyzw) � u(x2uyzw), iff

X

=

fx(x!, u)- !x(x2, u);::::

L jy, (yi, x2,

u;,

zi)

-

jy, (yi, x1, u;, z;)

since the only factors whose values can vary between these
two terms are f x and the fy,. By definition this relation
holds for all values of

y

and

X dominates its children. <IIIII

z

(and trivially for all w) iff

Determining if a quantified network is in fact a UCP­
network requires a case-by-case analysis for each "ex­
tended family" in the network involving a number of tests
exponential in the size of the extended families (by this we
refer to a variable, its parents, its children, and its children's
parents). Several stronger sufficient conditions exist that
are easier to test. Here we present a particularly simple
one.

Proposition 3 Let G be a quantified DAG over the set of
variables V. For each variable X let U be its set ofparents
in G. For X1, X2 E Dom(X), let

Minspan(x1,x2)
Minspan(X)

=

=

min

uEDom(U)
min

xl,x2EDom(X)

(lfx(xt,u)- fx(x2,u)l),

Minspan(x1, x2).

Define Maxspan(X) analogously with max replacing min.
Then G is a UCP-net ifMinspan(X) ;:::: Li Maxspan(Y;)
where the Y; are the children ofX.
The values of Maxspan and Minspan can be computed for
each variable X in 0(IDom (X) II f xI) time. Thus, this con­
dition can be checked in time polynomial in the number of
network parameters.
For purposes of elicitation and computation, it is often con­
venient to normalize utilities over the range [0, 1]. Simi­
larly, it is useful to normalize the individual factors of a

BOUTILIER ET AL.

60

UAI2001

UCP-net. In Section 5 we will consider a normalized vari­
ant of the UCP-net model in which the "rows" of each fac­
tor are normalized and "tradeoff' weights are used to cali­

instantiation of its parents in v i-1, with all other variables
retaining their values from Vi-1; (c) if Xi E Z, then

brate them. Specifically:

by the forward sweep
algorithm (assuming ties are broken in the same way as

(a) For each variable X, with parents U and factor f x,
and each u E Dom(U), we normalize the function
fx(x, u) so that its values lie in the range [0, 1].
That is, we insist that minx fx(x, u) = 0 and
1. We denote the normalized func­
maxx fx(x, u)
tion v x and call it the local value function for X given
=

u.

(b) For each

X and instantiation of its

ify a multiplicative tradeoffweight

tradeoffweight a-x.

parents
1r

u,

we spec­

x, and an additive

parents. It is not hard to see, by the usual transformation

results in utility theory, that every UCP-net has an equiva­
lent normalized representation.

in the procedure). since v n t vz for any outcome v z
consistent with the evidence, the forward sweep procedure
yields an optimal outcome. <ill

This algorithm illustrates the sharp contrast between UCP­
nets and GAl representations. Effective outcome optimiza­
tion in a GAl model requires that one use a dynamic pro­
gramming algorithm like variable elimination. As a conse­
quence, the complexity of such an algorithm-exponential
in the induced tree width of the GAl model-depends crit­

Thus, UCP-nets offer a valuable restriction of GAl models
and generalization of CP-nets. In particular, they impose
restrictions on the relative strength of the GAl factors, and
generalize CP-nets to allow for the representation of quan­
titative utilities. But we preserve the convenient graphical
representation of CP-nets, and gain considerable computa­
tional benefits over both models.
One of the main reasons to move from qualitative to quan­

Optimization Algorithms

The two types of queries discussed above, dominance
queries and optimization queries, can both be answered di­
rectly in UCP nets. Dominance queries can be answered
trivially: determining whether u(vl) ;=: u(v2) for two
complete outcomes simply requires that one extract and
sum the values of each factor in the network and then com­
pare the sums. This can be done in time linear in the size of
the network. Thus UCP-nets offer the advantages of other
additive decompositions. In contrast, dominance testing in
CP-nets is computationally difficult precisely because the
tradeoffs between the (conditional) preference levels for
different variables have not been specified.
Outcome optimization queries can also be answered di­
rectly given a UCP-net, taking linear time in the network

z E Dom(Z), deter­
Comp(z)) can be effected

size. Given a partial instantiation

mining argmax{u(o) : o E
by a straightforward sweep through the network.

Let

X1, ... , Xn

be any topological ordering of the network
variables excluding Z. We set Z = z, and instantiate each
xi in turn to its maximal value given the instantiation of its
parents. This procedure exploits the considerable power of
the CP semantics to easily find an optimal outcome given

certain observed evidence (or imposed constraints).

Proposition 4 The forward sweep procedure constructs

the optimaloutcomeargmax{u(v): v

Proof: Let

Yi-1· The last outcome

ically on the "topology'' of the model and the ability to find
good elimination orderings.

The semantics of such a normalized UCP-net is as follows:
the utility of any outcome is given by the sum of the terms
(for each variable X) 7rxvx(x) + a-x, where x is the in­
stantiation of variable X and u is the instantiation of its

4

v i = Vj-1. By construction, Vi t
vn is precisely that constructed

E

Comp(z)}.

vz be any outcome in the set of completions

of z. Define a sequence of outcomes vi, 0 � i � n, as
follows: (a) Vo = Vz; (b) if xi 'it Z, Vj is constructed by
setting the value of Xi to its most preferred value given the

titative preference models is to support decisions under
(quantified) uncertainty. Naturally, given a decision prob­
lem and a fully specified UCP-network, determining an
optimal course of action is (conceptually) straightforward.
W hen the distributions induced by actions can be structured
in a Bayes net, UCP-nets can be used to help structure the
decision problem. Suppose that the distribution over vari­
ables V determined by an action a is represented as a Bayes
net (possibly with a choice node if we wish to represent all
actions) and the utility function over outcome space is de­
termined by a UCP-net.4 To compute the optimal action,
we can construct an influence diagram by adding one utility
variable Fi for each (nonconstant) factor f x, in the UCP­
network.

Fi

has as parents both

X,

and the parents of Xi

in the UCP-net, and is quantified using factor f x, from the

UCP-net. Variable elimination (e.g., Dechter's

[6]

MEU

variant) can be used to determine the optimal action. 5

This approach uses the GAl factorization of utilities af­
forded by the UCP-net, but not the CP-semantics. We can
improve upon these ideas by noticing that our goa is to
select the optimal action, not (necessarily) compute tts ex­

�

pected utility. In any GAl representation, we can bound

the error associated with ignoring a utility variable Fi with
parents U as follows. L et ei
m axu Fi{u)- minu Fi(u).
=

The expected value EV(a) of any action

a

is given by

L Pr(vla)(l: Fi(v)) L(L Pr(vla)F,(v))
=

vEV

i

i

vEV

40ften utilities are elicited only over variables that are directly
related to preferences. The variables in the Bayes net may include
variables not contained in the UCP-net.
50ne might also consider how expected utility networks [l l]
might be used in this regard.

UA12001

BOUTILIER ET AL.

Let EV-i(a) be the expected value of action a with re­
spect to all utility variables except Fi. Then IEV(a) -

61

tion problem. Given a specific set of questions that can

such that

be posed to the user, the (myopic) value of information for
each question with respect its reduction of the minimax re­

a•

gret can also be computed by solving a linear program. As

is optimal without having to compute the i'th term in the
above summation. Analogous statements hold for ignoring
any subset F of the utility variables, setting ep = LiEFej.

such, an incremental procedure can be used to compute a
greedy query plan that will ask just enough questions of the
user to decide on a course of action whose regret is below
some prespecified threshold (if this threshold is set to zero,
then the optimal action will be recommended).

EV-i(a) I ::; e;. Thus
EV-;(a*) - EV_;(a) �

if there is some

€; for all

a

-::j:. a•,

a•

we know

This suggests an incremental technique for computing
an optimal (or near-optimal) action that exploits the CP­
semantics of a UCP-net. Let X 1, . . . Xn be a topological
ordering of the variables in the UCP-net. Our technique
runs in (at most)

n

stages, where at stage

k,

we compute

EV_{i>k}(a) for each action a. If for some a* we have
EV_{i>k} (a*)- EV -{i>k} (a) 2: E{i>k} for all a -::j:. a*, we
know a• is optimal and we can terminate without comput­
ing any further terms. Furthermore, we can remove from
consideration at subsequent stages any action whose partial
utility differs by more thane {i>k} from the (estimated) op­
timal action at this stage. The motivation for this approach
lies in the fact that in a UCP network, variables near the top
of the UCP-net have a larger impact on utility, and are thus
more likely to lead to the separation of actions than factors
lower in the net. For example, if action a has high probabil­
ity of making the most important variable

X1

take its most

desired value, while action b is likely to ensure its least de­
sired value, we may be able to eliminate b from considera­
tion by just computing the first term of above summation.

We can also terminate when the error associated with a* is
below some threshold, even if it is not optimal.
The computational benefits arise when one considers that
computing EV -{i2":k} (a) requires one to do inference only

on those variables that are relevant to predicting F {i>k}.
Furthermore, at each each stage we need only compute the
expected value with respect to the newly added utility vari­
_

able. In a problem with no evidence, for example, this can
be accomplished by considering only ancestors of the vari­
ables F; in the Bay es net. An important issue with this iter­

To make this more precise, we define a
to be a set of actions A

out too much difficulty.

Structure elicitation, involving

questions regarding the relative importance of different at­
tributes, as well as the dependence of these assessments on
other attributes should not be especially onerous. Eliciting

value function v x requires ordering a small number of val­
ues, given a specific parent context, and calibrating these
value using (local) standard gambles, again, a relatively un­

problematic task.
Although the structure and value functions are thus de­
termined, the tradeoff weights for the normalized UCP­
network remain unknown. The utility of any outcome v
is a linear function of these weights: specifically, ifv in­
stantiates each variable

Xi

to Xi and parent set

Ui

to ui,

then

u(v)

=

"\'"" 7TU;
L._...
X; VU;
X; ( x·� )

+

(JUi

i

X;

Let W be the set of possible instantiations of the tradeoff
weights, and u(v, w ) denote the utility ofv for a particular

instantiation w E W. The expected value of any action a i
is also a linear function of the tradeoff weights:

EV(a;, w )

rithmic question.

Elicitation with UCP-nets

decision scenario
where each action

the elicitation of both structure and local value functions
is something that users will often be able to provide with­

results---determining such orderings is an interesting algo­

5

, an,

As a starting point, we assume that we have been provided
with a normalized UCP-network, whose structure and local
value functions v x have been provided, but whose trade­
off weights 1Tx and ox remain unspecified. We feel that

reusing information computed in earlier iterations. This is

VE is used it might be possible to find variable orderings
for each computation that facilitate the reuse of previous

. ..

ai E A induces a distribution Pri(V) over outcomes. Let
0; denote the support set for Pr; (i.e., the set of outcomes
v for which Pr i(V) > 0). We generally assume that Oi is
small relative to Dom(V).

ative procedure is how to minimize overall computation by
plausible since (utility) factors generally overlap, and these
factors generally have common influences. For example, if

= a1,

=

L

vEO;

Pr i (v ) u (v, w )

Note that by assumption !Oil is relatively small, so this sum

--;

should contain only a small number of terms.
One of the key problems facing the use of decision­
theoretic models is the elicitation of preference informa­
tion. In this section we describe one possible procedure for
exploiting the structure and semantics of a UCP-network
to facilitate an incremental elicitation process. More pre­
cisely, given a specific decision scenario--i.e., a set of pos­
sible actions and the corresponding distributions over out­
comes they induce-and a set of constraints on the tradeoff
weights of a normalized UCP-network, the

regret

of the

best action can be computed as a simple linear optimiza-

We define the optimal action a :., with respect to an instan­
tiation w of the tradeoff weights to be

a:_.= argmaxEV(a;, w )
a;

utility function were known to have weights w, a;,
would be the correct choice of action. The regret of action
ai with respect to w is
If the

R(a;, w )

=

EV(a;,, w ) - EV(ai, w )

BOUTILIER ET AL.

62

i.e., the loss associated with executing ai instead of acting
optimally. Let C be a subset of the set of possible instanti­
ations of the tradeoff weights, W. We define the maximum
regret of action ai with respect to C to be

Finally, we define the action a0 with minimax regret with
respect to C:
a0

=

ar g min
a;

MR (ai , C)

The (minimax) regret level of weight set C is MMR( C)
MR(aC:, C). If the only information we have about a user's
utility function is that it lies in the set C, then a 0 is a
reasonable choice of action. Specifically, without distribu­
tional information over the set of possible utility functions,
choosing (or recommending) a c minimizes the worst case
loss with respect to possible realizations of the utility func­
tion.
=

If C is defined by a set of linear constraints on the weights,
then a0 as well as MMR(C) can be computed using a set
of linear programs. First note that we can compute

for any pair of actions ai and ai using a linear program:
we are maximizing a linear function of the weights sub­
ject to the linear constraints that define C. Solving O(n 2)
such linear programs, one for each ordered pair of actions,
allows us to identify the action a0 that achieves minimax
regret and to determine the minimax regret level MMR( C).

MMR(C) tells us how bad off we could be recommend­
ing a0. In particular if MMR(C) = MR(a0, C) = 0 then
a0 dominates all other actions: it is at least as good as any
other action for every feasible set of tradeoff weights. How­
ever, unless C is very refined (i.e., is defined by strong con­
straints), multiple actions will potentially be optimal (i.e.,
will be maximal in certain regions of weight space). To de­
termine which of these actions to recommend, we need to
refine the constraints defining C further.
C can contain a range of different linear constraints. One
class of constraints in C is imposed by the structure of
the network. In particular, each variable must dominate its
children: this is a necessary condition in any UCP-net. Us­
ing the same notation for variable X's neighborhood as in
Defn. 2, domination imposes the following linear constraint
on the weights: for each u, z, y and pair x l> x2 E Dom ( X)
such that v� ( xt ) 2 v� ( x2 ) , we must have:

Another class of constraints is the set of bounds that re­
strict each tradeoff weight 1r� and u� to a specific range.
Such bounds are required in order to keep the LP problems

UAI2001

we have proposed using bounded. Eliciting such bounds
from the user is not a difficult task, as one can always start
with very loose bounds. For example, the minimum and
maximum utility of any possible outcome is a simple uni­
form bound on the tradeoff weights. Besides these required
constraints, C could contain other nonstructurallinear con­
straints provided by the user, e.g., constraints on the rela­
tive magnitudes of different weights (reflecting degree of
importance) or constraints on the relative expected utility
of different actions in certain fixed contexts.
If minimax regret is zero, or lies below some acceptable
threshold, the action a0 can be recommended. Otherwise,
questions can be asked of the user to help differentiate be­
tween possible actions. The solution to the above set of
O(n2) linear programs can provide some guidance. For
example, the linear program for solving MR(ai, C) also
yields a solution to the dual problem. This solution pro­
vides a multiplicative factor associated with every inequal­
ity in C that tells us how much of a change we can produce
in MR( ai, C) (in the neighborhood of the optimal solution)
by modifying the inequality. Say that the k-th inequality is
the upper bound 1r� � 290, and that the value of the k-th
variable in the dual solution is 100. This tells us that if we
can get the user to tighten their upper bound on 1r Jl by 9
units this might yield a 900 unit decrease in MR(ai, C). By
examining the factors associated with the bounds imposed
on the weights, those weights that have the most potential
to influence MMR( C) could be identified. Furthermore, af­
ter we have queried the user and obtained an updated bound
we need not resolve the linear programs from scratch to re­
compute the maximum regret of each action. There are
many techniques in the LP literature on sensitivity analysis
that can be employed to minimize the amount of computa­
tion that needs to be performed [5].
However, generally for realistic elicitation we cannot rely
solely on the recommendations of the linear programs. In
particular, sharpening the inequality recommended by the
dual solution might not be an easy task for the user. The
types of questions that can (reasonably) be asked will be
domain dependent, and influenced by factors such as the
complexity of the domain (e.g., if the number of attributes
is manageable, asking a user to compare full outcomes may
be acceptable, but otherwise not), the sophistication of the
user, and the importance of the decision to be made. To
address the general problem here, we will assume a (finite)
set of possible questions Q = {q1, ... ,qk}, with each Qi
having m possible responses r } , ... , rf' (we fix the num­
ber of responses simply to streamline the presentation). We
suppose that every response adds an additional linear con­
straint to C (this subsumes the case of sharpening an ex­
isting constraint). Let C(d) denote the set of weights that
satisfy C U {r{ } . Then asking a question qi and receiving
a response r{ will reduce minimax regret by the amount
MMR(C)- MMR(C(r{)).
This suggests a querying strategy in which questions that
have the ability to reduce minimax regret the most are
asked first. In a certain sense, asking questions that reduce

UAI2001

BOUTI LIER ET AL.

63

determine if an optimal decision can be made. If no action

minimax regret can be seen as a distribution-free analog
of traditional value of information approaches to query­

dominates all others, further preferences are elicited. Our

ing. Specifically, the procedure we suggest strongly par­
allels the elicitation method proposed in [4], where a dis­

approach extends this basic viewpoint in a number of ways,
including the utilization of richer utility models and a min­

tribution over possible utility functions is used to guide

imax regret model that supports decisions even when no

the interactive elicitation process. In our distribution-free
model, we cannot define the expected value of a ques­
tion, but instead use the worst-case response to define

action is dominant. ISMAUT does not generally describe
means for generating queries automatically or making de­
cisions when no action is dominant.

the minimal improvement we can obtain from some ques­
tion. The minimax improvement of question q i , Ml(q;)

{

is mini MMR(C) - MMR(C(r ) ) . The minimax optimal
query with respect to C is that query with maximal im­
provement M/(qi) .6 We note that the improvement M/(qi)
for any query must be nonnegative, since q ; will always re­
duce the size of the feasible weight space, and generally
will be nonzero.
This suggests the following abstract elicitation strategy,

rf is obtained,
refined weight space C(r{). Then

imal improvement is asked, and response

MMR(C(rt ) ) is computed by solving the previously spec­

rf .

ified linear programs with the added constraint
Tech­
niques for sensitivity analysis can be utilized to minimize
the work involved in doing these computation. This pro­
cess is repeated until one of two conditions is met: (a)
the current weight space admits an action with regret less

than some threshold r; or (b) no query has an improve­
ment score greater than the cost of that query. This latter
condition is typically important in interactive elicitation:
while one could ask many questions to narrow down a util­
ity function so that a (near) optimal decision can be made,
one must account for the cost of these questions (e.g., the
burden they impose on the user).
Making this procedure concrete requires having a set of
possible questions whose responses induce linear con­
straints on weight space.

As pointed out above, such

questions will in general be domain dependent. However,
they might include asking the user to quantify the relative
strengths of various tradeoff weights associated with a sin­
gle variable ax and 1r x . For example, asking the user for
a value of k such that a�1 � ka�2 • Since this involves the
outcomes of a common variable it should be relatively easy
for the user to answer. Assessing relative tradeoff weights
associated with different variables is a similar, albeit more
difficult, question. Sharpening an upper or lower bound on
a weight was addressed above. One more type of ques­

tion might be to ask the user which of actions a i or aj she
would prefer in a specific context. The answer to this ques­
tion again imposes a linear constraint on weight space.
This approach is very similar to that utilized in imprecisely
specified multiattribute utility theory (ISMAUT) [9]. In
such work, standard additive independent utility models are
assumed and constraints on tradeoffs weights are used to
6

The

sequences

of

questions that reduce regret may not be considered if the
individual questions in the sequence do not. Circumvent­
ing this requires l ookahead or some form of dynamic pro­
gramming. This problem is common to most value of in­
formation approaches (e.g., [4]). The use of minimax re­
gret to select actions should be viewed as reasonable in the

which myopically attempts to improve minimax regret.
Given a set of feasible weights C, the query q; with max­
resulting in a more

Our elicitation procedure has several drawbacks.
greedy nature of the algorithm means that

Queries can be ranked simply using their worst-case minimax
regret, rather than their worst-case improvement, since the term
MMR( C) is common to all queries and responses.

absence of distributional information. However, selecting
queries so that the worst response has maximal improve­
ment may not always be appropriate; and comparing this
worst case improvement to the cost of the query may also
be questioned, but other strategies are possible.
We are currently exploring the use of distributions over
weight space (i.e., over utility functions) to guide the elici­
tation process. In the abstract, such a model would be sim­
ilar to that of Chajewska, Koller, and Parr [4].

The dif­

ferences lie in the use o f UCP-nets as the underlying util­
ity representation, and the use of dynamic programming to
construct optimal query sequences (rather than using my­
opic value of information). Integrating this with linear op­
timization poses some interesting challenges.

6

Concluding Remarks

We have proposed a new directed graphical model for rep­
resenting utility functions that combines appealing aspects
of both CP-nets and GAl models. The UCP-net formal­
ism has a number of conceptual and computational advan­
tages over these models, providing leverage with respect
to inference and elicitation. Clearly, practical experience
and empirical studies are needed to gauge the ultimate ef­
fectiveness of UCP-nets. However, we are encouraged by
the widespread use of additive models, and more recently,
by the successful application of CP-nets to the problem of
preference-based Web page content configuration [8].
We are currently in the process of implementing the inter­

active elicitation algorithm described in Section 5. Future
research includes the inclusion of distributional informa­
tion over utility functions (or tradeoff weights), and devel­

oping algorithms that compute and use value of informa­
tion to construct optimal query plans. Another fundamental
question pertains to determining optimal query plans when
the query space is large or infinite, involving parameterized
queries (e.g., standard gambles). We expect that the con­
siderable structure exhibited by the problem (e.g., the fact

that the set of actions divides weight space W into a set
of convex regions where each action is optimal) will allow
optimization over each query type to be effected, without
explicit enumeration of all instances.

64

BOUTILIER ET AL.

UAI2001

The investigation of the suggested optimization algorithms,

and trade-off weight determination under uncertainty.

specifically, empirical validation of the incremental vari­
able elimination approach to decision making described in
Section 4, is a high priority.

IEEE Transactions on Systems, Man and Cybernetics,

Acknowledgements

[ 1 0] R. L. Keeney and H. Raiffa.

Decisions with Multiple
Objectives: Preferences and Value Trade-offs. Wiley,

New York, 1 976.

Craig Boutilier and Fahiem Bacchus were supported by
Communications and Information Technology Ontario, the
Institute for Robotics and Intelligent Systems, and the
Natural Sciences and Engineering Research Council of
Canada. Ronen Brafman was supported by the Paul lvanier
Center for Robotics and Production Management.

