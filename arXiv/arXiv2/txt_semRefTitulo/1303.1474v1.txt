
Probabilistic conceptual network is a knowl­
edge representation scheme designed for
reasoning about concepts and categorical
abstractions in utility-based categorization.
The scheme combines the formalisms of ab­
straction and inheritance hierarchies from
artificial intelligence, and probabilistic net­
works from decision analysis. It provides
a common framework for representing con­
ceptual knowledge, hierarchical knowledge,
and uncertainty. It facilitates dynamic con­
struction of categorization decision models at
varying levels of abstraction. The scheme is
applied to an automated machining problem
for reasoning about the state of the machine
at varying levels of abstraction in support
of actions for maintaining competitiveness of
the plant.

Figure 1: Using a pc-net in utility-based categorization
1

Introduction

A probabilistic conceptual network (pc-net) is a
knowledge representation scheme designed to support
utility-based categorization ( Poh, 1993). In contrast
to the traditional approaches which are logic and
similarity-based ( Smith & Medin, 1981), utility-based
categorization considers the usefulness of the infor­
mation conveyed by the concepts, the actional con­
sequences, the desirability of the consequences of ac­
tions, the computational or cognitive resource require­
ment and availability, and the uncertainty about the
environment.

limited observations. It must conceptualizes the sit­
uation and decide on the most appropriate course of
action. It does so by solving a categorization decision­
model. However, different models at different lev­
els of categorical abstraction can be used. Each of
these models has different expected value of the recom­
mended action and different computational resource
requirement. The agent must therefore decide on the
best level of abstraction to construct the model so as to
achieve the best trade off between the expected value
of the recommended action and cost of computation.

We have developed a decision-theoretic approach for
utility-based categorical reasoning as shown in Figure
1, in contrast to previous work on abstraction in prob­
abilistic reasoning ( Horvitz, Heckerman, Ng, & Nath­
wani, 1989; Horvtiz & Klein, 1992) which were more
narrowly focused. In our view, a resource-constrained
agent operating in an uncertain world is given a set of

A probabilistic representation of conceptual categories
called a pc-net is used to represent the agent's knowl­
edge about the world. A level of conceptual abstraction
for a building a model is obtained by selecting a con­
ceptual cover from the pc-net. As illustrated in Figure
1, a conceptual cover is obtained by selecting a set of
mutually exclusive and exhaustive concepts from dif­
ferent levels in the pc-net1

• Also at Dept. of Industrial & Systems Engineering, N a­
tiona} University of Singapore, Kent Ridge, Singapore 0511

1

The notion of conceptual coverage in abstraction hier-

Probabilistic Conceptual Network

We have developed an incremental algorithm whereby
the reasoner iteratively specializes or generalizes the
conceptual cover. A concept is specialized by breaking
it up into a set of more specific subconcepts. A group
of concepts may be generalized by replacing them with
a single super-concept. At each iteration, changes are
made in order to achieve the highest expected im­
provement in overall utility (Poh, 1993). The proce­
dure applies the principles of decision-theoretic control
(Horvitz, 1987, 1990; Fehling & Breese, 1987; Russell
& Wefald, 1991) to iteratively decide between alloca­
tion of additional resources to refine the current set
of concepts, or to act immediately based on the cur­
rent action recommended by the model. This model
refinement approach is a special application of a more
general approach for refining general decision models
(Poh & Horvitz, 1993).
In this paper, we describe probabilistic conceptual net­
works and show how they may be used to repre­
sent both categorical and uncertain knowledge and
to facilitate the dynamic construction of categoriza­
tion decision models at varying levels of abstraction.
We present an example from automated machining.
We also compare our scheme with similarity net­
works (Heckerman, 1991) and other approaches to
knowledge-based decision model construction.
2

Integrating Uncertainty and
Categorical Knowledge

To perform utilitY.-based categorization, an intelligent
actor must expres; different dimensions or perspectives
of knowledge. First, she must be able to express cat­
egorical knowledge with some degree of modularity.
Categorical knowledge expresses facts about individ­
ual concepts in a given domain, i.e., it describes the
features and properties that characterize the concepts.
Second, the actor must represent categorical relations,
e.g, how one concept subsumes others. In particular,
the actor, when problem-solving, must decide which
concepts to use and at which levels of abstraction in
order to obtain a useful solution.
In artificial intelligence, abstraction hierarchies and
semantics nets (Lehmann, 1992) are graph-based for­
malisms that have been advocated for computer rep­
resentation of concepts and categorical knowledge.
They organize conceptual knowledge in levels of ab­
straction and make use of "inheritance" mechanisms
whereby concepts may share features and properties
with higher-level ones. Since feature information need
only be stored at the highest possible level of abstrac­
tion, maximum elegance and economy of storage is
achieved. These formalisms, however, are not easily
amenable to representing uncertainty in an elegant and
efficient manner.
In reasoning and decision making under uncertainty,
archies arose in discussions with Eric Horvitz.

167

specialized graph-based formalisms like influence di­
agrams (Howard & Matheson, 1981) have been ad­
vocated for computer representation of probabilistic
knowledge and decision models. These formalisms fo­
cus on the dependencies among the probabilistic vari­
ables. They encode probabilistic models as directed
graphs with the nodes representing the uncertain vari­
ables and the directed arcs denote possible probabilis­
tic dependence between variables. Each node encodes
a conditional probability distribution of that node's
variable given each combination of values of its direct
predecessors nodes. Various techniques have been de­
veloped over the last decade for probabilistic inference
and reasoning using this representation; see for exam­
ple Pearl (1988).
Pc-nets combine the formalisms of influence diagrams
with inheritance hierarchies by representing concepts
with influence diagrams and then linking these con­
ceptual diagrams in a hierarchy. By do so, pc-nets are
able to capture the best features of both formalisms
and to use them effectively in support of utility-based
categorization.
3

An Application

m

Automated

Machining

We will illustrate the use of pc-nets in utility-based
categorization with a real-world example of an auto­
mated machining problem. This is similar to an appli­
cation described by Agogino and Ramamurthi (1990).
Unattended or automated machining operations are
important parts of any intelligent manufacturing sys­
tem. It requires the automation of the human op­
erator's efforts to monitor and make appropriate ad­
justments to the state of the machine. An automated
machining system typically has sensors which acquire
data on (1) dimensions of the workpiece, (2) acous­
tic emission from the machining processes, (3) cutting
forces (dynamometer readings), and (4) electric cur­
rent (ammeter), etc. These data are then used to
determine the state of the machine and appropriate
action or actions are taken to ensure the continuous
operation of the plant so as to minimize production
cost, thereby maintaining competitiveness. The possi­
ble states of the machining process at various level of
abstraction are illustrated in Figure 2.
At the most abstract level, the state of the machin­
ing process is either "within variability limits" or "out
of variability limits." Refining the concept "out of
variability limits" are "tool failure," "sensor failure"
and "transient state." The latter occurs during entry
or exit of the cutting tool into the workpiece. Re­
fining "tool failure" are "tool chatter" which is typi­
cally characterized by an event in which an acoustic
emission signal increases dramatically in amplitude as
does the frequency content of the dynamometer. If left
unchecked, tool chatter can result in tool, workpiece or
machine damage. Remedies for this problem include

Poh and Fehling

168

Probabilistic Conceptual Network

4
4.1

--------

----

"'

oo

/ t "-, ,
I

'

�

t
l
t l
tool
wear chatter breakage
I

I

tf �

:

...

...

...

...

.......
.
.

I

tooi
failure
I
I

A

,

"

'

fiR��
., � 't-,'

_
_

I
I

...... ...

- ... ...

��

tr
'

,

'

acoustic dynamo'
ammeter
sensor
meter

I
I

I

;1

nt

�-

tool
entry

'

',

tOQl
eXIt

'
'

rl

ve cal ho zontal
chatter
cnatter

rti

Figure 2: Hierarchy for states of a machine
reducing the depth of cut or reducing the feed rate.
"Tool wear" is typically characterized by a gradual in­
crease in acoustic emissions, and by a gradual increase
in cutting force as measured by the dynamometer. A
tool that is worn out needs to be re-sharpened or re­
placed in order to achieve the desired surface finish
and dimensional tolerances. "Tool breakage" is typi­
cally characterized by an acoustic emission exhibiting
a hig� amplitude peak at the moment of tool fracture,
and followed by a sharp drop in signal amplitude to a
level below that of normal. It is also characterized by
a large rise in cutting forces, followed by a drop before
finally continuing at a value above the average. Tools
that are broken cannot perform any machining task
and must be replaced immediately.
This problem is interesting because under differing op­
erating conditions and situations, different levels of
abstraction in monitoring and reasoning may be de­
sired. For example, if the tool has been changed re­
cently, giving it a low prior probability that it will
fail soon, it may be more worthwhile to only moni­
tor at a more general level, i.e., "tool failure," "sensor
failure" and "transient state," rather than spent ex­
tra resources to differentiate the finer details. In other
words, the expected value of the information derived
from using more detailed concepts may not justify the
required additional computational resources. On the
other hand, if the tool has already been in used for
a long time, then it might be worth the extra effort
spent in monitoring and reasoning with more detailed
concepts, like for example at the level of "tool chat­
ter," "tool wear," "tool breakage," "sensor failure" and
"transient state." Also if the material currently being
machined is a difficult one, e.g., a high-carbon steel,
which is known to have caused occasional tool break­
age, then it may also be worthwhile to monitor at a
deeper level of detail. In another possible scenario,
suppose the some critical sensors are out of order, then
the only level of detail available might be at the most
abstract level whereby only two possible states are be­
ing monitored. The operator would then need to be
alerted to take any corrective action.

Definitions

A probabilistic conceptual network (pc-net) consists of
a probabilistic concept hierarchy (pc-hierarchy) con­
necting a set of probabilistic concept diagrams (pc­
diagrams).
Each node in the pc-hierarchy repre­
sents a concept, and the links in the hierarchy spec­
ify subsumption relations among the concepts thereby
organizing the concepts at various level of abstrac­
tion or specificity. Associated with each subsumption
link is a value indicating the conditional probability
that a concept holds given that its immediate super­
concept holds. Individually, each concept within the
pc-hierarchy is represented by a pc-diagram. We may
visualize a pc-net as a hierarchical organization of pc
diagrams.
A pc-diagram for a concept is a special probabilistic
influence diagram {pid) 2 representing the knowledge
about the probabilistic relations between the concept
and the features that characterize it. The concept is
represented as a deterministic node while the features
are represented by chance nodes. As a convention, we
direct arcs by default, from the concept to its feature
nodes. For each feature node F in the pc-diagram for
concept ck, we store a probability distribution of the
form
k
p(FICk, B (F))
where Bk {F) is the set of conditional predecessors
(possibly empty ) that excludes Ck. We shall assume
that background information e is used in all the prob­
ability distributions. We represent Ck as a determin­
istic node because we do not need the distribution
p(Fj--.Ck, Bk(F)). A pc-diagram for a concept pro­
vides information for discriminating that concept from
other concepts in a domain. Pc-diagrams allow knowl­
edge to be represented locally providing modularity in
the knowledge-base.
The value of a pc-net emanates from its ability to sup­
port utility-based categorization. As shown previously
in Figure 1, given a pc-net together, a conceptual cover
can be selected at some level of abstraction to con­
struct a categorization decision model corresponding
to that level of abstraction. We shall describe the pro­
cedures for model construction in Section 5.
Finally, pc-net uses an inheritance mechanism whereby
a concept may share information about features from
a concept higher up the hierarchy. It does so by tak­
ing advantage of a form of conditional independence
called subconcept independence3 which is not conve­
niently represented in ordinary influence diagram rep­
resentation. A feature is said to be subconcept inde­
pendent of a concept if knowledge about the feature
2 A pid is an influence diagram with only probabilistic
nodes and conditioning arcs.

3Section 6.1 compares subconcept independence with
"subset-independence" in similarity networks.

Probabilistic Conceptual Network

Feature

Description

AE-mag

acoustic emission magnitude

AAE-mag

change in acoustic emission magnitude

AE-freq

acoustic emission frequency

dyn-freq-x

cutting force frequency in x-direction

dyn-freq-y

cutting force frequency in y-direction

AE-mean

mean of the acoustic signal
change in the mean of the acoustic signal

AAE-mean
dyn-rms-x

cutting force in the x-direction

Adyn-rms-x

change in cutting force in the x-direction

dyn-rms-y

cutting force in the y-direction

Adyn-rms-y

change in cutting force in the y-direction

AE-peak

acoustic emission peak value

dyn-peak-x

peak cutting force in x-direction

dyn-peak-y

peak cutting force in y-direction

current

motor current

Table 1: Descriptions of features
does not affect the agent's belief about any of that
concept's subconcept. We will have more to say about
subconcept-independence in Section 4.5.
4.2

Automated Manufacturing Example

169

and the most specific subsumer of a set of concepts S =
{ C1,..., Cn} is denoted by �( C1 , ... , C,) or �(S).
p(C;ACj,e)
ci· we h avep(CiICi) Suppose C; �
p(Ci )
-9'
But C; � Cj implies that p(Ci 1\ Cj) = p(Cj)· There­
fore
(1)
·

In other words the subsumption probability is simply
the ratio of the prior probabilities of the concepts it
connects.
4.4

Feature Relations and Conceptual
Abstraction

Suppose we have already assessed a set of pc­
diagrams, we can combine them to produce a
more general super-concept. For example, given
the pc-diagrams for "tool chatter," "tool wear,"
and "tool breakage," we can obtain the pc-diagram
for "tool failure." In general, given Ck, set of
its most general subsumees �( ck)' and suppose
Bk(F) = UciE�(Ck)Bi(F) then p(F/Ck, Bk(F)) =
k
k
l::ciE�(ck) p(FJCj, Ck, B (F))p(Ci/Ck, B (F)). The
feature F is independent of Ck given any subcon­
cept Ci of Ck since once Ci is known to be true
then any information about ck will not have any
further effect on our belief on F. This implies
that (Fi/Ci, Ck, B k(F)) = p(Fi/Ci, Bk(F)). Like­
wise, Cj is independent of Bk(F) given Ck. Hence
p(F/Ck, Bk(F)) =
L p(F/Cj,Bk(F))p(Cj/Ck),
CjE�(Ck)

Figure 3: The pc-diagram for "tool chatter."
Figure 3 shows the pc-diagram "tool chatter." This
diagram comprises a deterministic node representing
"tool chatter" and a number of feature nodes whose
descriptions are given Table 1. An arc between two
feature nodes indicates that these two features may
not be conditionally independent given the concept
"tool chatter." For example, the arc between the node
"AE-mag" and the node "�AE-mag" indicates that
information about the current magnitude of acoustic
emission may provides information about the change
in magnitude of acoustictemission. The direction of
this arc could be reversed without any change in as­
sertion about possible dependency.
Figure 4 shows a fragment of the full pc-net for the
automated machining showing the concepts "tool fail­
ure," "tool chatter," "tool wear," "tool breakage,"
"sensor failure," and "transient state."
4.3

Probabilistic Subsumption Relations

We shall denote the fact C; is a subconcept of Cj by
C; � Cj. The set of the most general subsumees (i.e.
all the direct subconcepts) of Ck is denote by �(Ck) ,

which may be rewritten as
2:: p(F/Ci, Bi(F), Bk(F) \ Bi(F))p(Ci/Ck)·
CjE�(Ck)
But the set of conditioning features Bk(F) \ Bi(F) is
independent ofF given Cj. Hence p(F/Ck, Bk(F)) =

2::

CjE�(Ck)

p(Ci/Ck)p(F/Ci ,Bi(F)).

Hence if Ck is a concept in the pc-net and all the
pc-diagrams for the concepts in �( ck) has been as­
sessed, then the pc-diagram for ck may be derived
from those of its subconcepts. Formally, for any fea­
ture F, p(F/Ck, Bk(F))

L

CjE�(Ck)

where Bk(F)

=

p(Cj/Ck)p(F/Cj, Bi(F))

(2)

i(F)

U ci E �(Ck ) B

Equation (2) allows us to build the pc-net from bot­
tom up by propagating the probability distributions in
the pc-diagrams from the bottom of the hierarchy up
to the root of the hierarchy. This allows us to build

Poh and Fehling

170

---

---

�-,

\
\

p�
\
I
I
I

I
I

I
I
I
I
I

o
I
I
I
\
I

�
.

\
\
I
I
I

I

I
I
I

I

'
I
I

;4

'
I
I
I

I

Figure 4: A fragment of the pc-net for the automated machining problem
the pc-net by first constructing the pc-diagrams for
all the terminal or atomic concepts, and then the pc­
diagrams for the more general concepts may be derived
from the pc-diagrams below them. However, it is pos­
sible to simplify the pc-net by identifying subconcept
independence and take advantage of inheritance.
4.5

Feature Inheritance for
Subconcept-Independent Concepts

The principle of inheritance in pc-net is based on a
special type of independence that can hold among con­
cepts and features. Formally, we say that a feature F
is subconce pt independent of a concept C�: given B, if
and only if
(3)
for all feature values f ofF and for all subconcepts C;
of Ck. Intuitively, information about a feature that is
subconcept independent of a concept does not affect
the agent's belief about any of that concept's subcon­
cepts. An equivalent criterion for subconcept indepen­
dence is obtained using using Bayes' rule:

The last equation applies that for any pair of sub­
concepts C; and Cj of C�c, i.e., p(FjC;) = p(FICJ)·
Conversely, if the last equation holds then using
equation (2), p(FIC�:) = Lj p(CJICk)p(FICJ)
p(FIC;) Lj p(CjiCk)
Lj p(CjiCk)p(FIC;)

p(FjC;). Hence an equivalent criterion for subconcept
independence is:

We shall denote by F ..l�CkjB, the fact that F is sub­
concept independent of Ck given B. In cases where
the background knowledge is understood, the B may
be omitted. An interesting property about ..l� is that
once it has been established for a concept, it recur­
sively applies to all of its subconcepts (Poh, 1993).
That is,

The justification for the application of inheritance for
subconcept independent concepts for a feature is due
to equations (4) and (5). Since the probability dis­
tributions for the feature are identical, we need only
store them at the highest possible position.
To illustrate the idea of inheritance, consider the frag­
ment of the pc-net for "transient state," "tool exit"
and "tool entry" shown in Figure 4. The feature
"�rms current" is subconcept independent of "tran­
sient state." We do not need to explicitly store the
probability distributions for "�rms current" in the pc­
diagrams for "tool entry" and "tool exit." That is, we
may "omit" these probability distributions (and hence
the corresponding feature nodes) in their respective
pc-diagrams. When needed, the probability values are
filled in by inheriting them from "transient state."

Probabilistic Conceptual Network

5
5.1

171

Model Construction
Constructing Categorization Decision
Models

Figure 6: The categorization decision model

Figure 5: The categorization prob. influence diagram
We shall illustrate how a categorization decision model
may be constructed from the pc-net for the automated
machining problem. In this application, the prefer­
ence model may be expressed in the form v(Ak ,C;)
where Ak is an action that may be taken, like for ex­
ample, "reducing cutting speed", "reducing depth of
cut", etc. C; is any state of the machining operation
we have described earlier. v(Ak, C;) gives the utility
of the outcome by taking action Ak when the state of
the machining operation is C;.
Suppose the sensors report information on "AE­
mag," "AE-rms," "dyn-rms-x," "dyn-rms-y," and
"rms-current," and' our utility-based categorical rea­
soner described earlier, determines that the most ap­
propriate level of abstraction corresponds to the set of
concepts comprising "tool chatter," "tool wear," "tool
breakage," "sensor failure" and "transient state." We
can combine the respective pc-diagrams for these five
concepts to construct a categorization probabilistic in­
fluence diagram as shown in Figure 5. The graphical
structure of the combined categorization influence di­
agram is obtained by performing graphical union of
the individual pc-diagrams while treating each central
concept node as being the same node in each of the
individual pc-diagrams. Notice that the concept node
in the constructed diagram is now a probabilistic vari­
able (C) ranging over the five concepts used in its con­
struction. The conditional probabilities for each of the
feature nodes in the constructed diagram is obtain by
copying over their respective original values in the in­
dividual pc-diagrams. That is, for any feature F,
p(FIC = C;,B9(F)) = p(F;IC;,B;(F))
(7)
where Bg (F) is the set conditional predecessors of F
excluding C, in the constructed diagram.
The next step in the construction procedure is to com­
plete the diagram by turning it into a categorization
decision model as shown in Figure 6. This is done
by first, adding the decision and value node to reflect

the preference model described earlier. Next, infor­
mational arcs from the observed feature nodes to the
decision node are added. The completed categoriza­
tion influence diagram can now be solved using exist­
ing methods (Shachter, 1986).
5.2

Validity of the Constructions

An important characteristic of our decision model con­
struction procedure is that the final model so con­
structed must reflect as accurately as possible the state
of information originally asserted by the knowledge­
base and preference model. Our knowledge-base con­
tains assertions about concepts, their properties, and
the probabilistic relationships among them. Validity
of a probabilistic model construction depends on the
soundness of the construction procedure. Heckerman
(1991) suggests that soundness should be character­
ized by the preservation of the joint-distribution of the
variables involved across the construction. For pc-net,
it can be shown that if the pc-diagrams in a given con­
ceptual cover are mutually consistent, then the con­
struction is indeed sound (Poh, 1993).
6
6.1

Related Work
Probabilistic Similarity Networks

Probabilistic similarity network (Heckerman, 1991) is
a knowledge engineering tool for building probabilistic
influence diagrams. We shall briefly describe the sim­
ilarities and differences between pc-net and similarity
network here. A more comprehensive comparison is
available in (Poh, 1993). Both pc-net and similarity
networks are capable of building the same type of influ­
ence diagrams, but pc-net is able to do so at varying
levels of abstraction, whereas similarity network can
only do so at one level. Another major difference is
that pc-net is capable of representing categorical ab­
straction relations whereas similarity networks can't.
Another difference is that the probabilities in a pc-net
are assessed before categorical reasoning and model

172

Poh and Fehling

construction take place whereas in similarity networks,
all the knowledge maps are initially unassessed and are
carried out only after the global knowledge map has
been built.
Both pc-net and similarity network use some sort of
local influence diagrams for concept representation.
However, a local knowledge map in similarity network
is built based on a pair of concepts. There are also
differences between a pc-diagram and a hypothesis­
specific knowledge map {hs-map) in similarity net­
works. First, the concept node is included in the pc­
diagram, whereas, it is not part of the hs-map. Second,
a pc-diagram is always a connected graph whereas a
hs-map may not be. Finally, a pc-diagram has its
probabilities initially assessed whereas, a hs-map is
not.
The notion of subconcept independence in a pc-net
is analogous to subset independence used in conjunc­
tion with partitions in similarity networks. Similarity
networks use partitions to speed up assessment while
pc-net saves assessments and storage by using inheri­
tance mechanisms based on subconcept independence.
In pc-net terms, a partition for a feature in similarity
network can be viewed as an an abstracted concept
subsuming all the concepts in the partition. Further­
more, that feature is subconcept independent of the
abstracted concepts. Assessing the probability distri­
bution for the feature given the abstracted concept
and applying inheritance is equivalent to assessing the
probabilities within the partition.
6.2

Knowledge-Based Model Construction
Methods

Several approaches have been proposed for construc­
tion or building of influence diagrams. There ap­
proaches may be classified under two highly contrast­
ing methodologies. The first, known as the synthetic
approach ( Horvitz, 1991) starts with the empty influ­
ence diagram; nodes and arcs are added to the model
through some methods of inference based on simple
rules or relationships. These inferences are usually
driven by assertions about the world, goals, or utility
{Holtzman, 1989; Breese, 1987; Goldman & Charniak,
1990; Wellman, 1988). These approaches however,
usually do not have principled control over the degree
of abstraction or details in the model that they are
building other than using some heuristics. The second,
known as the reduction approach ( Horvitz, 1991) seeks
to custom-tailor comprehensive, intractable decision
problems to specific challenges at run time through a
pruning procedure that removes irrelevant distinctions
and dependencies (Heckerman & Horvitz, 1991).
The decision model construction approach based on
probabilistic conceptual networks developed in our re­
search does not commit to either of these two contrast­
ing approaches, but instead, employs mixed strategies.
The approach can be seen as synthetic to some ex­
tent in that it builds an influence diagram dynami-

cally at runtime. However, unlike the pure synthetic
approaches, the building blocks used by this approach
are not individual nodes and arcs, but rather modules
of localized influence diagrams. On the other hand,
the approach can be seen to be reducible in that mod­
ules of local influence diagram have been pre-assessed.
However, instead of pre-assessing a comprehensive in­
fluence diagram, pc-net does not commit to one large
influence diagram, but instead, is a comprehensive net­
works of related local probabilistic influence diagrams.
The approach here allows for reasoning about the re­
lationship among these local influence diagrams, and
combines only those that are relevant or are required
while discarding those not required in the decision
model it is building.
The advantage of our approach over that of the com­
prehensive model reduction approach, is that assess­
ing smaller and more focused local pc-diagrams is usu­
ally easier and more manageable as compared with at­
tempting to assess a huge comprehensive influence di­
agram. This local-to-global approach to constructing
large probabilistic influence diagrams has been demon­
strated with similarity networks.
The advantage of this approach over that of the com­
plete synthetic approach is that the construction pro­
cedure is controlled using well founded principles of
decision theory. We use a principled approach to rea­
son about the values of constructing different parts
of the model. The model being built can be custom­
tailored to the optimal level of abstraction and avoid
any unnecessary details. This is very important when
we consider computational or resource constraints.
7

Conclusion

Previous work on integrating uncertainty . and cate­
gorical knowledge representation has been done with
a broad range of emphases and purposes. Saffiotti
{1990) proposed a general framework for integrating
categorical and uncertainty knowledge. In particu­
lar, Shastri {1985) proposed a semantic-network-like
representation language for evidential reasoning using
the principle of maximum entropy. Similarly, Lin and
Goebel {1990) proposed a graphical scheme integrat­
ing probabilistic, causal and taxonomic knowledge for
abductive diagnostic reasoning. This latter formalism
has two types of links, namely "is-a" and "causal."
In classifier-based reasoning, term subsumption lan­
guages are being extended to accommodate plausible
inferences {Yen & Bonisson, 1990). More recently,
Leong {1992) proposed a network formalism using var­
ious kinds of links including "a kind of," temporal
precedence, qualitative probabilistic influence {Well­
man, 1988) and property relations ( "Context" ) . Many
of these formalisms have desirable features that we
need, but none has all.
Finally, by combining the formalisms of influence dia­
grams and abstraction hierarchies, pc-nets effectively

Probabilistic Conceptual Network

represent both categorical knowledge/relations and
uncertainty in a modular and compact way. It can
also support dynamic construction of a specific class
of decision model at varying levels of abstraction. We
have also demonstrated the applicability of pc-net to
real-world applications in automated machining.
Acknowledgements

We wish to thank Ross Shachter, Eric Horvitz and
the anonymous referees for their helpful comments and
suggestions on the content of this paper.
Reference

Agogino, A. M., & Ramamurthi, K. (1990). Real time
influence diagrams for monitoring and controling
mechanical systems. In Oliver, R. M., & Smith,
J. Q. (Eds.), Influence Diagrams, Belief Nets and
Decision Analysis, pp. 199-228. John Wiley.
Knowledge Representation and
Inference in Intelligent Decision Systems. Ph.D.

Breese, J. S. (1987).

thesis, Department of EES, Stanford University.
Fehling, M. R., & Breese, J. S. (1987). A compu­
tational model for decision-theoretic control of
problem solving under uncertainty. Technical
Memo 837-88-5, Rockwell International Science
Center, Palo Alto Laboratory, Palo Alto, CA.
Goldman, R. P., & Charniak, E. (1990). Dynamic con­
struction of belief networks. In Proceedings of the
6th Conference on Uncertainty in Artificial In­
telligence, pp. 90-97.

Beckerman, D. E. (1991).
works. MIT Press.

Probabilistic Similarity Net­

Beckerman, D. E., & Horvitz, E. J. (1991). Problem
formulation as the reduction of a decision model.
In Bonissone, P. P., Henrion, M., Kana!, L. N.,
& Lemmer, J. F. (Eds.), Uncertainty in Artificial
Intelligence 6, pp. 159-170. Elsevier Science.
Holtzman, S. (1989).
Addison-Wesley.

Intelligent Decision Systems.

Horvitz, E. J. (1987). Reasoning about beliefs and ac­
tions under computational resource constraints.
In Proceedings of th£; Third Workshop on Uncer­
tainty in Artificial Intelligence, pp. 429-439.
Computation and action under
bounded resources. Ph.D. thesis, Depts of Com­

Horvitz, E. J. (1990).

puter Science and Medicine, Stanford University.
Horvitz, E. J. (1991). Problem formulation and deci­
sions under scarce resources. In Working Notes of
the AAAI Workshop on Knowledge-Based Con­
struction of Decision Models.

Horvitz, E. J., Beckerman, D. E., Ng, K. C., & Nath­
wani, B. N. (1989). Heuristic abstraction in
the decision-theoretic pathfinder system. Report
KSL-89-24, Stanford University.

173

Horvtiz, E. J., & Klein, A. C. (1992). Utility-based ab­
straction for categorization. Technical Memoran­
dum 83, Rockwell International Science Center,
Palo Alto Laboratory.
Howard, R. A., & Matheson, J. E. (1981). Influence
diagrams. In Howard, R. A., & Matheson, J. E.
(Eds.), Readings on the principles and applica­
tions of decision analysis, Vol. 2, pp. 719-762,
1984. SDG, Menlo Park, California.
Lehmann, F. (Ed.). (1992). Semantic Networks in Ar­
tificial Intelligence. Pergamon Press.
Leong, T.-Y. (1992). Representing context-sensitive
knowledge in a network formalism: A prelimary
report. In Proceedings of the Eighth Confer­
ence on Uncertainty in Artificial Intelligence, pp.
166-173.
Lin, D., & Goebel, R. (1990). Integrating probabilistic,
taxonomic and causal knowledge in abductive di­
agnosis. In Proceedings of the 6th Conference on
Uncertainty in Artificial Intelligence, pp. 40-45.
Pearl, J. (1988). Probablistic Reasoning in Intelligent
Systems: Networks of Plausible Inference. Mor­
gan Kaufmann Publishers, San Mateo, CA.
Poh, K. L. (1993). Utility-based categorization. PhD
dissertation draft, Department of Engineering­
Economic Systems, Stanford University.
Poh, K. L., & Horvitz, E. J. (1993). Reasoning about
the value of decision-model refinement: methods
and applications. This volume.
Russell, S., & Wefald, E. (1991). Principles of metar­
easoning. Artificial Intelligence, 49, 361-395.
Saffiotti, A. (1990). A hybrid framework for represent­
ing uncertain knowledge. In AAAI-90, Proceed­
ings of the Eight National Conference on Artifi­
cial Intelligence, pp. 653-658.

Shachter, R. D. (1986). Evaluating influence diagrams.
Operations Research, 34(6), 871-882.
Shastri, L. (1985). Evidential reasoning in semantic
networks: A formal theory and its parallel im­
plementation. Ph.D. thesis, Department of Com­

puter Science, University of Rochester.
Smith, E. E., & Medin, D. L. (1981). Categories and
Concepts. Harvard University Press.
Wellman, M. P. (1988). Formulation of tradeoffs in
planning under uncertainty. Ph.D. thesis, Dept
of EECS, MIT .
Yen, J. , & Bonisson, P. P. (1990). Extending term sub­
sumption systems for uncertainty management.
In Proceedings of the 6th Conference on Uncer­
tainty in Artificial Intelligence, pp. 468-473.


