

that we developed, the dynamic network tool that we
designed and implemented to aid knowledge engineering

We present several techniques for knowledge
engineering of large belief networks (BNs) based

for

CPCS, and the Bayesian network algorithms that we

employed for this large, complex network.

on the our experiences with a network derived
from a large medical knowledge base. The noisy­
MAX, a generalization of the noisy-OR gate, is

used to model causal independence in a BN with

knowledge engineering or evaluation, challenging. The

multivalued variables. We describe the use of leak

development of CPCS necessitated the implementation of
algorithms that could make inference in BNs of this size

probabilities

to

enforce

the

closed-world

assumption in our model. We present Netview, a

more efficient. An example of this is a generalization of the

visualization tool based on causal independence
and the use of leak probabilities. The Netview

noisy-OR gate [Cooper 1986; Peng and Reggia 1987; Pearl

software

model causal independence. The

allows

knowledge

engineers

to

dynamically view subnetworks for knowledge
engineering, and it provides version control for
editing a BN. Netview generates sub-networks in
which leak probabilities are dynamically updated

1

The CPCS is one of the largest BNs in use at the current
time, and its sheer size makes most tasks, such as

1988] that is commonly used in binary valued networks to

CPCS BN contains nodes

that are multivalued, for example, disease nodes may have
four values (absent, mild, moderate, severe), consequently
we use a generalization of the noisy-OR gate called the

noisy-MAX. The specification of a complete conditional
m with sm values and n
predecessors requires the assessment of (sm -l)IJ�=I s;

to reflect the missing portions of the network.

probability matrix for a node

INTRODUCTION

probabilities, where

s;is

the

number

of

values

predecessor i (for a binary network this reduces to

of

2n ) In
.

Given the relative maturity of algorithm development in the

contrast, the causal independence assumption in the form of

Bayesian reasoning community, attention is now starting to
focus on applying these algorithms to real-world

a noisy-gate reduces this assessment task to

probabilities. thereby simplifying knowledge

applications.

and greatly reducing storage requirements.

The Quick Medical Reference-Decision

Ln(sm -l)s;

dcquisition

(QMR-DT) project seeks to develop practical
decision analytic methods for large knowledge-based

To aid in the editing and refinement of the

systems. The first stage of the project converted the

have developed a network visualization tool we named

Theoretic

Internist-1 knowledge base [Miller, Pople et al. 1982]

(QMR 's predecessor) into a binary, two-layered belief

CPCS BN, we

Netview. The Netview tool provides dynamic views of the

BN, and can generate subnetworks by taking advantage of

1991; Shwe,

the noisy-MAX and leak assumptions. For inference, the

Middleton et al. 199 1]. In the second stage of the QMR-DT

network, or subnetworks generated by Netview, are sent to
the IDEAL package [Srinivas and Breese 1989] for

network (BN) [Middleton, Shwe et al.

project we are creating a multilayer belief network with
mu1tiva1ued variables, and developing efficient inference
algorithms for the network. This paper will concentrate on
the knowledge engineering issues we faced when building a
large multilayered BN.
To create a large multilevel, multivalued BN we took
advantage of a rich knowledge base, the Computer-based

inference. Netview is a flexible tool which can be used in
any BN that uses noisy-gates, and is described in section

5.1.
Like the Internist- 1 -derived B N, the CPCS BN uses leak
probabilities [Henrion 1988] to represent the chance of an
event occurring when all of its modeled causes are absent.

We discuss our use of leak probabilities,

and the

Patient Case Simulation system (CPCS-PM), developed
over two years by R. Parker and R Miller [Parker and

modifications to the leak probabilities required by the

Miller 1987] in the mid-1980s as an experimental extension

dynamic network tool, in section 5.2.

of the Internist-! knowledge base.
This paper makes contributions both in knowledge
engineering and in algorithm development and
implementation for large BNs. We describe the CPCS BN

2

KNOWLEDGE BASE TO BELIEF NETWORK

The CPCS-PM system is a knowledge base and simulation
program designed to create patient scenarios in the medical

Knowledge Engineering for Large Belief Networks

sub-domain of hepatobiliary disease, and then evaluate
medical students as they managed the simulated patient's
problem. Unlike that of its predecessor lnternist-1, the
CPCS-PM knowledge base models the pathophysiology of
diseases th e intermediate states causally linked between
diseases and manifestations. The original CPCS-PM system
was developed in FranzLisp. Diseases and intermediate
pathophysiological states (IPSs) were represented as Lisp
frames [Minsky 1975].

485

5

and were mapped to probability values, as described in
next section. Frequency weights from the CPCS-PM
were mapped to probability values based on previous work
in probabilistic interpretations of Internist-1 frequencies.

the

-

To construct the BN we converted the CPCS-PM knowledge
base to CommonLisp and then parsed it to create nodes. We
r e pr esented diseases and IPSs as four levels of severity in
the CPCS BN-absent, mild, moderate, and severe.
Predisposing factors of a disease or IPS node were
represented as that node's predecessors, and findings and
symptoms of a disease or IPS node as the successors for that
node. In addition to the findings, CPCS contained causal
links between disease and IPS frames, we converted these
links into arcs in the BN. Frequency weigh t s [Shwe,
Middleton et al. 1991] from the CPCS-PM ranged from 0 to

We generated the CPCS BN automatically, we did manual
consistency checking using domain knowledge to edit the
network. Because the CPCS-PM knowledge base was not
designed with probabilistic interpretations in mind, we had
to make numerous minor corrections to remove artifactual
nodes, to make node values consistent and to confinn that
only mutually exclusive values were contained within a
node.
The resultant network has 448 nodes and 908 arcs (Figure
1). A t o tal of seventy four of the nodes in the network are
predisposing factors and required prior p robab ilities the
remaining nodes required leak probabilities assessed for
each of their values. We thus had to assess over 560
probabilities to specify the network fully.

Figure I. A small portion of the CPCS BN displayed in the Netview visualization program. The node ascending­
cholangitis in the third row shown in inverse has been selected by the user.

,

486

Pradhan, Provan, Middleton, and Henrion

While the CPCS-PM knowledge base is derived from the
Internist-! knowledge base it has been significantly

3

augmented by inclusion of the IPS states, and multivalued

2

representations of both diseases and manifestations of
disesase. The original

QMR-BN transformation of the

Internist-! knowledge base used only binary valued disease
and manifestation nodes. While conceptually simple, this

0

approach does not adequately reflect the potential variation
in presentation of disease manifestations, or the severity of

3

1

0

diseases.

Figure 2.

A node x with

predecessors D i• n,

NOISY-OR

ordered states

The noisy-OR is a simplified

BN representation that

respectively, or disease and manifestation variables
respectively [Peng and Reggia

1987].

variable

variables or predecessors

X

the

variables, and is typically described for a

which are interpreted as either cause and effect variables

that has

n

cause

•••

( 1)

P(X= 2! VI).

If there are multiple "manifestation" variables

j =1 ,.. .,l,

Consider an effect

D1, ,Dn· The noisy-OR can be used when

\tf having

probabilities required to calculate

probability matrix. The noisy-OR is defined over a set of
two level network partitioned into two sets of variables,

E

{0,1,2,3 }. The

shaded area represents the

requires far fewer parameters than the full conditional­
binary-valued

3

q

GENERALIZATION OF THE NOISY-OR

3.1

2

Aj,

P(Xi =xi I VI)=1- II(l-pii)

each D has

i:D;eV1

an activation probability p; being sufficient to produce the
effect in the absence of all other causes, and

(2)

the

probability of each cause being sufficient is independent of

1988].

the presence of other causes [Henrion

In this paper, we define variables using upper-case letters,

X is
ilx. If variable X is present it is denoted using the letter x;

letters.

The domain of possible values for variable

if it is absent, it is denoted using x .
The activation of a variable

X

by a predecessor variable D;

is independent of the value of D;.
assumption,

X is

conditional probability given by
other

Under the noisy-or

activated when D;

P;

is active,_with a

= P(x I d; {'·dk).
'

In

words, this activation probability deh otes the

probability when
inactive.

where Pij is the link probability on the arc from D; to

lJi is active and all other predecessors are

For a two-level noisy-OR network, we define a set V of
cause or disease variables, and a set W of effect or

manifestation variables. If there is a set VI of V of
predecessors of

X

e

W that are present, then since the D;

X will be false when all D; are false:

P(X=X I VI)= II P(D; =d;)
i:D;eV1

P(X =X I Vj)

=

BN

application, since we need to accommodate n-ary variables.

For example, CPCS BN disease and IPSs can take on values
such as absent, mild, moderate, and severe.
3.2

NOISY- MAX

Consider a generalization of the noisy-OR situation in
which each variable is allowed to have a finite discrete state
space (rather

than just a binary state s pace). This

generalization was first proposed by [Henrion

1988], but he

did not describe the algorithmic details. In developing this
generalization, we assume that we have a set

V of

predecessor variables D1, ... ,Dn. Consider first the case
where we have a variable

in VI are independent,

Xi

The simple noisy-OR is insufficient for the CPCS

and values that variables can take on using lower-case

for

then we obtain

X with a subset

present, with the predecessors indexed by

V1 of V that are

i,j, ,q.
...

The variable domains in CPCS BN are all partially ordered,

for example, {absent, mild, moderate, severe}, and it turns
out that such a partial ordering is necessary for all variable
domains. For the remainder of our work we assume that all
variables have ordered domains.
We now want to compute

II

(1- P;).
i:D;eV1

The value xis given by
In other words,

From this, it is simple to derive

domain values

P(X=xiVI)=l- II(l-p;).
i:D1eV1

x =

max(i,j, .
.

.

,q) [Henrion 1988].

X takes on as its value the maximum of the
of

its predecessors,

predecessors are all independent.

given

that

the

Knowledge Engineering for Large Belief Networks

487

V1)

This computation of P(X ==xI
can be viewed as setting
up a hypercube of dimensions i x j x · · x q and summing
·

the cells, each of which contains a probability value

fljk··q P;jk··q. As an example of the derivation of the general
formula, we consider the case of two predecessors D; and
{}_j. If these variables take on values i,j respectively, then
the

probability P(X =xI V1) ,

where

x = max(i, j) .

For

example, Figure 2 graphically depicts the conditional

probability matrix for D; and Dj, b oth of which have

ordered states {0, 1,2,3}. If x=2, then
consists of the shaded squares of the grid.

P(X=21D;.Dj)

Figure 3. Explicit representation

of the leak probability as a cause
of X.

In this multivalued noisy-MA X situation, the probabilities

that are being calculated in these hypercubes are cumulative

probabilities, that is,

P(X s; xI D s; d) .

For notational

convenience, we define the cumulative probability for a
variable

X that has a s ingle predecessor D with maximum
d as:

domain value

\f(x I d)= P(X s; xI D s; d) .
Under the generalized noisy-OR assumption, for a given
variable

X

with a set of

which each D;

q

D1, ... , Dq
d;, we know that

predecessors

has maximum value

for

4

LEAKS

As in any other knowledge representation scheme, the BN
representation suffers from incompleteness, in that it

typically cannot model every possible case. A leak variable

can be used to enforce the closed-world assumption [Reiter
1978]. The leak variable represents the set of causes that
are not modeled explicitly.

A leak probability is assigned as

the probability that the effect will occur in the absence of

of the cause s

D1 , ...,D n that are explicitly modeled. If
the leak variable is explicitly modeled, then it can be

any

treated like any other cause and can be depicted as such

=

IJ 'P(xld;),
i:D;eV1

In this representation, the leak node is always

assumed to be "on", that is
If

Note that using this transformation, we can define the

probability assigned to

3).

(Figure

i:D;E�

P(L=true) = 1.0.

the leak L with value l is factored into the calculation of

the unconditional probability for variable X, then we obtain

X taking on a particular value Xk :

P(X s; x) = P(L s; l)

TI [p;P(D; s; d;)+(1- P;)],

i:D,�V

Explicitly representing leak nodes in the

The unconditional probability assigned to a variable can be

derived in an analogous fashion. First, we nee d to derive

D;. assuming no
1994], this is given

the unconditional probability of variable
predecessors. As described in [Provan
by

P(X $. x) = P(L s; 1)

IJ[p;P(D; s; d;) +(1- P;)]P(x I V1).

i:D,eV1

P(XS:x) =

conditioning parents. The Netview knowledge engineering

tool, described in section 5, facilitates the maintenance and

editing of leak probabilities. Netview stores leak values

separately, as if they were explicit nodes, and then inserts

the leak values into the appropriate probability
exporting a network for inference in IDEAL.

5

The unconditional probability is given by

IJ[p;P(D; :S:d;)+(l-p;) ].

i:D;EV

The unconditional probability assigned to X taking on a
particular value x is:

CPCS BN would

almost double the size of the network, so leaks are
implicitly represented in the probability tables of a node's

5.1

tables when

TOOLS FOR KNOWLEDGE ENGINEERING
NETVIEW:

A TOOL FOR NETWORK

VISUALIZATION AND EDITING

Verification and refinement of the structure of the CPCS BN
is an important part of the QMR -Df project for two reasons.
First, because the

CPCS BN was generated from a pre­

existing knowledge base. Second, the effect of model
structure on network performance and accuracy is an
important aspect of the QMR -Df project.

During the knowledge engineering process, it became

V1)

Using this approach, the value P(xI
can be computed in
time proportional to the number of predecessors in V1. This
generalized noisy-MAX has been implemented in IDEAL.

obvious

that

available tools were not suitable for

visualizing and editing a network the size of
(Figure

1).

CPCS BN

In particular, most tools only permit a static

488

Pradhan, Provan, Middleton, and Henrion

view of the network, a limitation that made editing the

disease," and so on. A node may have any number of
semantic labels. Semantic labeling is a useful technique for

CPCS network very hard.

filtering nodes to focus attention during knowledge
by allowing knowledge engineers to focus on portions of

engineering. It is possible, say, to focus only on "gastric"
findings and diseases when dealing with the appropriate

the network. The program is implemented in Macintosh

domain expert. In the future we will also use the semantic

Netview was created to help knowledge engineering efforts

CommonLISP 2.01. The main features of Netview are
o

dynamic network layout

o

semantic labeling of nodes

o

version control

•

subnetwork generation and dynamic

o

labels in the dynamic layout algorithm to improve the
appearance of subnetwork views.
It is useful to keep track of modifications while editing the

BN. To facilitate this, Netview includes basic version

leak modification

control to store deleted and added arcs and nodes and

leak value editing

changes to probability tables. Arc and node additions and
removals between versions are displayed through the use of

Because of the causal independence assumptions implied
by the use of the noisy-MAX and noisy-0

different colors.

R gates,

knowledge engineers are can select smaller parts of the

5.2

CPCS BN for viewing. Netview allows the user to view all
ancestors, all predecessors, or all ancestors and
predecessors of selected nodes. For example, in Figure l
while the node

ascending-cholangitis is selected (inverse

color), we can use Netview's ability to show all successors
and predecessors of the selected node or nodes, resulting in
the subnetwork view shown in Figure 4 . Other options
include viewing nodes' Markov blanket, and immediate
successors or predecessors.
Netview uses a dynamic layout algorithm to display the
selected nodes. The knowledge engineer is able to move
rapidly between views by selecting nodes and choosing
viewing options, or by retrieving previously saved views.
Quickly viewing a node's predecessors allows rapid
assessment of leak probabilities.
In addition to subnetwork selection, Netview allows
semantic labeling of nodes, and filtering based on semantic
labels. For example, nodes in CPCS BN are labeled "lab
finding," "symptom," "sign," "disease," "IPS," "liver

5.2.1
The

SUBNETWORK GENERATION AND DYNAMIC
LEAK MODIFICATION

Subnetwork generation
Netview

program

is

used

only

for

network

visualization and editing; Netview saves files in IDEAL
format for inference. Because of the size of the CPCS BN it

is not always desirable to send the entire network to

IDEAL

for inference. If we are only interested in verifying a small
set of diseases we can generate a subnetwork including
only those diseases of interest and their associated findings,
IPSs and predisposing factors. When we run test cases

against a subnetwork we don't require the system to
compute the posterior probabilities of diseases that we are
not interested in.

5.2.2 Dynamic leak modification
Subnetworks we select from the full

CPCS

BN using

Netview can be exported to IDEAL for inference. It is

possible to select subsets of the larger CPCS

BN for

i n f e r e n ce

leaks .

due

to

the

presence

of

Figure 4. A subnetwork of the CPCS BN displayed in Netview. This view comprises all predecessors and
successors of the node ascending-cholangitis.

Knowledge Engineering for Large Belief Networks

Figure 6. Subnetwork creation. Node D3is removed from the network, the value of the leak node
updated to p based on the probability of D3•

489

/, p is
,

'

When a subnetwork is saved Netview updates the leak
probabilities to take into account the missing diseases. In
the CPCS BN the node hepatomegaly has parents shown in
figure 5, The leak probability for hepatomegaly is therefore
calculated based on this set of predecessors. In figure 4 a
subnetwork was selected based on the ancestors and
predecessors of the disease ascending-cholangitis. Conse­
quently, the only parent of hepatomegaly in the subnetwork
is ascending-cholangitis, its other parents are not included.
The transformation of leak probabilities required during
subnetwork creation is shown in Figure 6. The leak
probability must be updated from p to p'. This updating is
done in order to preserve the total probability mass. If the
value I of L is updated to a value l' for new leak L', we can
compute the updated leak node probability as

BN, and we are exploring how much the network
performance changes when the assumption is relaxed.
5.2.3 Information metrics

When subnetworks are created some information is lost as
parts of the network are excluded. A future area of research
is to use Netview to calculate the information Joss of a
subnetwork based on information metrics [Provan 1993],
and to compare differences in posterior probability between
the complete network and the subnetwork which has been
selected.

6

RELATED WORK

The generalization of the noisy-OR was first proposed in
[Henrion 1988], and the derivation and implementation
p' = P(L '5.lA D3 '5.d3)
described here follow that original proposal. Two related
= P(L '5.l)P(D3 '5.d3)
generalizations are described in [Srinivas 1993] and [Diez
1993]. The generalization of the noisy-OR by Srinivas is
=[p3P(D3 '5.d3)+(l- p3)]
different to this proposal, and is intended for a different
application. This generalization is for circuits (or other such
If we want to combine a set of Q nodes into a leak node,
devices) which can be either functional or non-functional.
where each node d1 in Q has link probability, then the new
In the case of medicine, findings can take on values such as
leak node probability is given by:
{absent, mild, moderate, severe}, in which case the binary
generalization of Srinivas is insufficient to deal with
p' =P(L'5.lAD1 '5.d1A···ADq '5.dq)
arbitrary n-ary variables. The noisy-MAX generalization in
D i ez 1993] is virtually identical to the one described here,
[
P(L '5./) fl P(Dt '5. d;)
and
we have derived our noisy-MAX independent of that in
i:D1eQ
[Diez 1993). Also, the proposal in [Diez 1993] is described
=P(L-5./) n[p;P(D;'5.d;)+(l-p;)].
within the context of learning models for OR-gates, and its
i:D1eQ
application to inference in Bayesian networks is not directly
apparent.
We prove in [Provan 1994] that if the network is
To our knowledge, there is no other tool which allows
hierarchical and there are no arcs between nodes at the
dynamic selection of subsets of Bayesian networks. There
same level of the hierarchy, then the leak updating is sound,
are several graphical tools for creating Bayesian networks,
that is, the probability assigned to X given the new set of
including IDEAL Edit, Ergo, Hugin [Andersen, Olesen et al.
predecessors is the same as the probability assigned to X
1989], and Demos [Morgan, Henrion et al. 1987]. But these
with the original predecessors. This proof holds if the
tools do not provide dynamic network layout and do not
subnetwork consists of a Markov blanket of a node, all
have features aimed at knowledge engineering large BNs.
predecessors and successors of a node, or all successors of
a node. The assumption for the proofs holds for the CPCS
7 CONCLUSION
=

��Figure 5. Parents of the node hepatomegaly.

In this paper we have presented several methods for
representing, and a software tool for managing, large BNs
based on our experience with the CPCS BN. The noisy-MAX
is a generalization of the noisy-OR gate for multivalued

490

Pradhan, Provan, Middleton, and Henrion

variables which reduces the complexity of the knowledge
acquisition task and storage requirements for a network.
Leak probabilities are used in the CPCS BN to model causes
other than those explicitly modeled in the network.

Middleton, B., Shwe, M. A., et al. (1991). Probabilistic
diagnosis using a reformulation of the Internist-1/QMR
knowledge base-11. Evaluation of diagnostic performance.
Methods of Information in Medicine, 30:256-67.

Based on the causal independence assumptions of the
noisy-MAX, and the use of leak probabilities we have
developed Netview, a tool for visualizing BNs based on the
dynamic layout of subnetworks, and which also provides
basic version control for editing networks. The creation of
subnetworks allows for more efficient knowledge
engineering, and for easier verification of the B N. We
describe a technique for updating leak probabilities based
on the excluded parents of a node in subnetworks.

Miller, R. A., Pople, H. E. J., et al. (1982). Internist-1: An
experimental computer-based diagnostic consultant for
general internal medicine. N Engl J Med, 307:468-476.

Recent advances in creating BNs from pre-existing data or
knowledge bases will result in networks that are larger and
more complex than those created manually. We believe that
the techniques described in this paper are important to
facilitate the management and verification of such
networks.
Acknowledgments

This work was supported by NSF Grant Project IRI9120330, and by computing resources provided by the
Stanford University CAMIS project, which is funded under
grant number LM05305 from the National Library of
Medicine of the National Institutes of Health.
The authors would like to thank K. C. Chang and R. Fung
for their graph layout algorithm on which NetView's layout
method is based, and R.Miller for access to the CPCS
knowledge base.
