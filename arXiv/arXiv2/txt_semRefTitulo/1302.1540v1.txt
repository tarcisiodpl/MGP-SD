

no restriction that a valid plan need have any sort of
compact (polynomial-size) representation.

We examine the computational complexity
of testing and finding small plans in prob­
abilistic planning domains with succinct rep­
resentations. We find that many problems
of interest are complete for a variety of com­
plexity classes: NP, co-NP, PP, NPPP, co­
NPPP, and PSPACE. Of these, the proba­
bilistic classes PP and NPPP are likely to
be of special interest in the field of uncer­
tainty in artificial intelligence and are deserv­
ing of additional study. These results suggest
a fruitful direction of future algorithmic de­
velopment.

These results are not directly applicable to the prob­
lem of finding good plans because they place no re­
strictions on the form of valid plans. It is possible, for
example, that for a given planning domain, the only
valid plans require exponential space (and exponential
time) to write down. Knowing whether or not such
plans exist is simply not very important.

INTRODUCTION

Recent work in artificial-intelligence planning has ad­
dressed the problem of finding effective plans in
domains in which operators have probabilistic ef­
fects (Kushmerick, Hanks, & Weld 1995; Draper,
Hanks, & Weld 1994; Dearden & Boutilier 1997;
Boutilier, Dearden, & Goldszmidt 1995; Boutilier,
Dean, & Hanks 1995). In probabilistic propositional
planning, operators are specified in a Bayes network
or an extended STRIPS-like notation, and the planner
is asked to determine a way of choosing operators to
achieve a goal configuration with some user-specified
probability. This problem is closely related to that of
solving a Markov decision process when it is expressed
in a succinct representation.
In previous work (Littman 1997; Mundhenk, Gold­
smith, & Allender 1996), we examined the complexity
of determining whether a valid plan exists; the prob­
lem is EXP-complete in its general form and PSPACE­
complete when we are limited to polynomial-depth
plans. For these results to hold, plans must be permit­
ted to be arbitrarily complicated objects, and there is

In the present paper, we consider the complexity of
a more practical and realistic problem-that of de­
termining whether or not a plan exists in a given re­
stricted form. The plans we consider take several pos­
sible forms that have been used in previous planning
work: totally ordered plans, partially ordered plans,
conditional plans, and looping plans. In all cases, we
limit our attention to plans that can be expressed in
size bounded by a polynomial in the size of the speci­
fication of the problem. This way, once we determine
that such a plan exists, we have some hope that we
can write it down in a reasonable amount of time.
In the deterministic planning literature, several au­
thors have addressed the computational complexity
of determining whether a valid plan exists, of deter­
mining whether a plan exists of a given cost, and
of finding the valid plans themselves under a vari­
ety of assumptions (Chapman 1987; Bylander 1994;
Backstrom & Klein 1991). These results provide lower
bounds (hardness results) for probabilistic planning,
since deterministic planning is a special case. In deter­
ministic planning, optimal plans can be represented by
a simple sequence of operators (totally ordered plan).
In probabilistic planning, good conditional plans will
often perform better than any totally ordered plan;
therefore, we need to consider the complexity of the
planning process for a richer set of plan structures.
The computational problems we look at are complete
for a variety of complexity classes ranging from NP to
PSPACE. Two results are deserving of special men-

Complexity of Probabilistic Planning

183

tion; first, the problem of evaluating a totally or­

In the fiat representation, the transition function t

dered plan in a succinctly represented planning do­

is represented by a collection of lSI

main (as might be described by a two-stage temporal

We do not treat this representation directly; see our

Bayes network (Boutilier, Dean, & Hanks 1995)) is
PP-complete. The class PP is closely related to #P1,
which has been recognized as an important complex­
ity class in computations involving probabilistic quan­
tities, such as the evaluation of Bayes networks (Roth
1996). Of course, probabilistic computations are cen­
tral to the area of uncertainty in artificial intelligence.
Second, the problem of determining whether a good
totally ordered plan exists for a succinctly represented

x

lSI matrices3.

extended technical report (Goldsmith, Li t tm an , &
Mundhenk 1997) for details on this type of problem.
In the succinct representation, straightforward prob­
ability matrices would be huge, so the transition
function must be expressed another way.

In artifi­

cial intelligence, two popular succinct representations
for probabilistic planning domains are probabilistic
state-space operators (PSOs) (Kushmerick, Hanks, &
Weld 1995) and two-stage temporal Bayes networks

planning domain is NPPP -complete. Whereas the class

(2TBNs) (Boutilier, Dearden, & Goldszmidt 1995).

NP

Although these representations differ in the type of

can be thought of as the set of problems solvable

by guessing the answer and checking it in polynomial

planning domains they can express naturally, they

time, the class

are computationally equivalent ; a planning domain

NPPP

can be thought of as the set of

problems solvable by guessing the answer and checking

expressed in one representation can be converted in

it using a probabilistic polynomial-time computation.

polynomial time to an equivalent planning domain ex­

It is likely that NPPP characterizes many problems of

pressed in the other with at most a polynomial increase

interest in the area of uncertainty in artificial intelli­

in representation size (Littman 1997).

gence; this paper and earlier work

(Mun dhenk,

Gold­

smith, & Allender 1996) give initial evidence of this.
1.1

to representations used in the complexity theory litera­

REPRESENTING DOMAINS

A planning domain

M

=

ture. In the circuit representation, the transition prob­

{S, s0, A, t, 9) is character­

ized by a finite set of states S, a finite set of operators
or actions

A.

an initial state so E S, and a set of goal

states 9 c; S.

The application of an action a in a

state s results in a probabilistic transition to a new
state s', according to the probability transition func­
'
tion t ( s, a, s ) .

The objective is to choose actions to

move from the initial state s0 to one of the goal states

with probability above some threshold ()2.

The

state

of the system is known at all times (fully observable)
and so can be used to choose the action to apply.
We are concerned with two main representations for
planning domains;

fiat

In this paper, we use a different succinct representa­
tion for planning domains that is more closely related

representations, which enu­

merate states explicitly, and succinct representations
(sometimes propositional, structured, or factored rep­
resentations), which view states as assignments to a set
of Boolean state variables. Compared to the size of the
representation, fiat domains typically have a polyno­
mial number of states and succinct domains have an
exponential number (though a "bad" succinct repre­
sentation can be as large as a flat one).
PP
1Toda (1991) showed that p#P =P , from which it fol­
P
lows that NP# =NPPP. Roughly speaking, #P is as pow­
erful as PP if used as an oracle.

21t is also possible to formulate the objective as one of
maximizing expected discounted reward (Boutilier, Dear­
den, & Goldszmidt 1995), but the two formulations are es­
sentially polynomially equivalent (Condon 1992) (the only
difficulty is that succinct domains may require discount
factors exponentially close to one for equivalence to hold).

abilities for an action

a,

t(s, a, s'),

are represented by a

circuit of simple logic gates that takes as input succinct
representations of s and s' and outputs a probability
value in binary representation4.
Planning domains in the PSO and 2TBN representa­
tions can be converted to the circuit representation
in polynomial time, but it is not clear how to con­
vert a circuit to a PSO or

2TBN

in polynomial time.

However, this conversion can be carried out by a PP
machine (the basic idea is used in the proof of The­
orem 2.1), so the circuit representation is equivalent
to PSOs and 2TBNs in any complexity class contain­
ing PP. Since the complexity results we report for the
circuit representation are all for complexity classes at
least as hard as PP, these completeness results apply

to PSOs and 2TBNs as well.

1.2

EXAMPLE DOMAIN

To help make these ideas more concrete, consider the
following simple probabilistic planning domain based
on the problem of building a sand castle at the beach.
There are a total of four states in the domain, de3We assume that the number of bits used to represent

the individual probability values isn't too large.

4This implies that the transition probabilities have at
most as many bits as the circuit representing the domain
has gates. There are other circuit-based representations
that can represent probabilities with an exponential num­
ber of bits (Mundhenk, Goldsmith, & Allender 1996).

184

Goldsmith, Littman, and Mundhenk
after

before
moat

1.00

Figure

1:

moat

castle

0.50

castle

0.25

Circuit representation for

erect-castle.

scribed by combinations of two Boolean state vari­
ables, moat and castle. The proposition moat sig­
nifies that a moat has been dug in the sand and the
proposition castle signifies that the castle has been
built. In the initial state, both moat and castle are
false, and the two states in which castle is true are
goal states.
There are two actions: dig-moat and erect-castle. Exe­
cuting dig-moat has two possible equiprobable effects,
"no op" (state does not change), and "moat" (moat
becomes true). The erect-castle action is more com­
plex. If moat is true, then the possible effects are
"castle" (probability 0.50), in which castle becomes
true, "no op" (probability 0.25), in which the state
doesn't change, and "collapse" (probability 0.25), in
which moat becomes false. On the other hand, if
moat is false when erect-castle is executed, then pos­
sible effects are "castle" (probability 0.25), in which
castle becomes true, and "no op" (probability 0.75),
in which the state doesn't change. The idea here is
that building a moat first protects the castle from be­
ing destroyed prematurely by the ocean waves.
To illustrate the circuit representation, Figure 1 gives
one possible circuit representation for the erect-castle
action. This circuit takes, as input, binary representa­
tions of the "before" state s and the "after" state s',
and outputs a binary representation of the probabil­
ity of reaching s' from s under the erect-castle action.
While this representation is not convenient for specify­
ing complex planning domains, more natural represen­
tations can be converted into this form automatically.
1.3

TYPES OF PLANS

We consider four basic classes of plans for probabilistic
domains: totally ordered, acyclic, looping, and par­
tially ordered. We illustrate examples from each of
these classes for the sand-castle domain in Figure 2. A
totally ordered plan is a sequence of actions that must

be executed in order. The plan terminates after the
final action in the plan has been executed, or whenever
a goal state is reached. For example, with probability
0.4375, the totally ordered plan in Figure 2(a)) suc­
cessfully builds a sand castle.
Acyclic plans generalize totally ordered plans to in­
clude conditional execution of actions. They are
roughly loop-free finite-state controllers for a planning
domain; they express a simple type of conditional plan
in which the next plan step to execute is a function of
the current step and an "effect label" that describes
the outcome of executing the current step. No step in
an acyclic plan may be repeated more than once during
plan execution. The acyclic plan in Figure 2(b) suc­
ceeds with probability 0.46875 and executes dig-moat
an average of 1. 75 times. Thus, it succeeds more often
and with fewer actions than the totally ordered plan
in Figure 2(a).

A partially ordered plan is a different way of gener­
alizing a totally ordered plan. It contains no loops
and no conditional branches, but can leave flexible the
precise sequencing of actions (Kushmerick, Hanks, &
Weld 1995). Figure 2(c) illustrates a partially ordered
plan for the sand-castle domain. The dashed arrows
indicate ordering constraints in contrast to solid ar­
rows, which indicate flow of controL There are two
distinct totally ordered plans consistent with the par­
tially ordered plan in Figure 2(c): dig-moat, dig-moat,
dig-moat, erect-castle, erect-castle and dig-moat, dig­
moat, erect-castle, dig-moat, erect-castle.

There are several possible interpretations for how the
performance of a partially ordered plan is measured.
The pessimistic interpretation is that the performance
of a partially ordered plan is equal to the performance
of the worst possible totally ordered plan consistent
with the partial order. This is closely related to the
standard interpretation in deterministic partial order
planning (McAllester & Rosenblitt 1991). The opti­
mistic interpretation of the performance of a partially
ordered plan is that it is the performance of the best
consistent totally ordered plan, and the average in­
terpretation is that it is the average over all possible
consistent orders.
Totally ordered, partially ordered, and acyclic plans
are all inherently finite horizon; plans terminate after
a polynomial number of actions. Looping plans gen­
eralize acyclic plans to the case in which plan steps
can be repeated (Smith & W illiamson 1995). This
type of plan is also referred to as a plan graph or pol­
icy graph (Kaelbling, Littman, & Cassandra 1995). A
looping plan can express an infinite-horizon strategy
because the plan will continue to execute as long as a
goal state is not reached (there is no a priori bound on

Complexity of Probabilistic Planning

.

(erect-castle)

_ .

(dig-moat)

(a) A total ly ordered plan.

. . · · ·

185

� •(erect-castle)
· ·

� •(erect-castle)
- ·

(c) A partially ordered plan.
"no op"

(erect-castle)

"no op"

(b) An acyclic (conditional) plan.
"collapse"

(d) A looping plan.
Figure 2: Example plans for the sand-castle domain.
the length of the sequence of actions chosen by such

a plan). For example, the looping plan in F igure 2(d)

does not terminate until it succeeds in building a sand

castle, which it will do with probability 1.0 eventually.
1.4

#PSPACE is the same as the class of polynomial­

space-computable functions (Ladner 1989).

For any complexity classes C and C' the class cc' con­

sists of those sets that are C- Turing reduc ible to sets in

C', i.e., sets that can be accepted with resource bounds

DECISION PROBLEMS

specified by C, using some problem in C' as a subrou­

Given a particular class of plans, we consider two com­

putational problems. The first is the plan-evaluation

problem; given a plan, a planning domain, and some
threshold (), does the given plan reach the goal with

probability at least B? The second problem is plan ex­
istence; given a planning problem and a threshold(), is

there a polynomial-size plan of the required form that
can reach the goal with probability at least B?

tine (oracle) with instantaneous output. For any class

C � PSPACE, it is the case that NPc�PSPACE, and

therefore PSPACEPSPACE=PSPACE; see Papadim­
itriou's (1994) textbook.

The complexity classes we consider satisfy the follow­

ing containment properties:
PC

_

1.5

COMPLEXITY BACKGROUND

standard results from complexity theory, we refer to
Papadimitriou's (1994) complexity te xtbook. In the

interest of completeness, in this section we give a short

description of the probabilistic and counting complex­
ity classes we use in this work.

f

such that,

for some nondeterministic polynomial-time bounded
machine N, the number of accepting paths of N on

equals

f(x).

x

Probabilistic polynomial time, PP, is the class of sets

A for which there exists a nondeterministic polynomial
time bounded machine N such that x E A if and only
if the number of accepting paths of N on x is greater
than its number of rejecting paths.

1.6

NPPP
co-NPPP � PSPACE � EXP.

SUMMA RY OF RESULTS

Table 1 summarizes our results, which are explained

in more detail in later sections. Table 2 summarizes a
set of results for flat domains; these are described in
our extended technical report (Goldsmith, Littman, &

Mundhenk 1997).

2

ACYCLIC PLANS

Given a planning domain M

P

=

•

{Q,qo, �,o,tr,w)

Q

=

(S, so,A,t,9), a

is an acyclic plan where

•

plan

and � are finite sets of plan steps and effects

labels, respectively,

For polynomial-space-bounded computations ,

PSPACE equals probabilistic PSPACE, and

� PP �

It is known that P is properly contained in EXP.

For definitions of complexity classes , reductions, and

The class #P is the class of functions

NP

co-NP

Qo E Q

is the initial plan step,

186

Goldsmith, Littman, and Mundhenk

Table 1: Complexity results for succinct representations.
plan evaluation

plan existence

PSPACE-complete
PP-complete
PP-complete
NpPP -complete
PP-complete
co-NPPP -complete

EXP-complete
PSPACE-complete
PSPACE-complete
NPPP -complete
NPPP -complete
NPPP -complete
NPPP -complete
NpPP -complete

unrestricted
polynomial-depth

looping
acyclic
totally ordered
partially ordered (optimistic)
partially ordered (average)
partially ordered (pessimistic)

reference
Littman (1997)
Littman (1997)
Section 3
Section 2
Section 2
Section 4
Section 4
Section 4

Table 2: Complexity results for flat representations.
unrestricted
polynomial-depth
looping
acyclic
totally ordered
partially ordered (optimistic)
partially ordered (average)
partially ordered (pessimistic)
•

6: Q

x

:E

function,
•

•

--+

Q is the (cycle free)

1r : Q --+ A is the
to actions, and

action mapping

plan evaluation

plan existence

PL-complete
PL-complete
PL-complete
NP-complete
(co-)NP-hard, in PP
co-NP-complete

P-complete
P-complete
P-complete
P-complete
NP-complete
NP-complete
NP-complete
NP-complete

state-tran sition

Proof

from plan steps

Let ¢> be a Boolean formula with n variables.
Define the planning domain M(¢>) with states
so, {0, 1}n, Bacc, Srej, one action a and transition proba­
bilities t( so, a, w) = 2- n, t(w, a, Sacc ) = 1 if w satisfies
¢>, and t( w, a, Brej)
1 if w does not satisfy ¢, for
wE {0, 1}n. Let Sacc be the only goal state. It is clear
that ¢> is in MAJSAT if and only if M(¢>) reaches the
goal state with probability at least 1/2 under the plan
that repeats action a twice.

w : S --+ :E is the transition mapping from states
of the planning domain to effects labels.

Note that the quantities Q, qo, :E, and 6 jointly specify
a deterministic finite-state automaton. Also, c5 may be
a partial function since some plan steps are final steps.
Let M be a planning domain and P be an acyclic plan.
Then M under P behaves as follows. Both M and P
are started "in parallel" in their initial states. Both
perform steps 1, 2,.. .. In step i ;:::: 1, let s be the
current state of M and q be the current plan step of P.
The current action is determined by the current state
q of P (i.e., the new state of M is s' with probability
t(s, 1r(q), s')) and P gets a translation of the new state
s' of M as an effects label (i.e., the new state of P is
6(q,w(s'))). If c5 is not defined on q, or s' is a goal
state, then the process stops.
Given these definitions, we can present our first com­
plexity result.
Theorem 2.1 The plan-evaluation problem for
acyclic and totally ordered plans is PP-complete.

To show PP-hardness, we give a reduction from
the PP-complete problem MAJSAT: given a Boolean
formula, do the majority of assignments satisfy it?

=

For membership in PP, note that a planning domain
M and an acyclic plan P induce a tree consisting of all
paths through M under P. This tree can be normal­
ized in a way that makes each path have equal proba­
bility, and an accepting leaf is reached with probabil­
ity at least 1/2 if and only if M reaches a goal state
with probability at least B. F inally, we can define a
polynomial-time probabilistic Turing machine that has
this tree as its computation tree.
•
The plan-existence problem is essentially equivalent to
guessing and evaluating a good plan, hence the prob­
lem is in NPPP. Hardness for NPPP can be shown us­
ing the techniques from a paper by Mundhenk, Gold­
smith, and Allender (1996). T he proof uses the idea
that every NPPP computation can be reduced to the

187

Complexity of Probabilistic Planning

problem of whether a succinctly described set of expo­

of N.

nentially many plan-evaluation problems contains one

This planning domain can be encoded succinctly, and

that is satisfied.

All accepting configurations reach goal states.

this encoding can be produced from N and
nomial time. Given a description of N and

Theorem 2.2 The plan-existence problem far acyclic
and totally ordered plans is NPPP -complete.
In the above results, we consider succinctly repre­
Suc­

cinctly represented plans are also quite useful.

A

s uccinct acyclic plan is an acyclic plan in which the
names of the plan steps are encoded in binary and a
polynomial-size circuit represents the state-transition
function 8. In addition, we require that the plan is at
most polynomially deep even though the total number
of steps in the plan might be exponential.
the proof technique used in Theorem

2. 1

Because

to succinct acyclic plans, analogous complexity results
plan, which is a plan in which the state-transition func­
tion 8 is probabilistic. These insights can be combined
to yield the following corollary.
Corollary 2. 1 The plan-evaluation problem for suc­
the plan-existence problem for s uccinct probabilistic
acyclic plans is NPPP -complete.

allow the state-transition functions to loop; this way,
looping plans can b e applied to infinite-horizon con­
trol. For looping plans, the complexity of plan exis­
tence and plan evaluation is quite different from the
acyclic case. Looping plan evaluation is very hard.
Theorem 3. 1 The plan-evaluation problem for loop­

Proof The plan-evaluation problem for fiat domains
en

states and a

a looping plan can be eval­

uated in probabilistic space O(log(cn)), which is to
say probabilistic space polynomial in the size of the
input. Since probabilistic PSPACE equals PSPACE,
this shows that the plan-evaluation problem for loop­
ing plans in succinct domains is in PSPACE.
It remains to show PSPACE-hardness.

M(x)

that the goal state is reached with probability

1

un­

der the "constant plan" (which repeatedly chooses the
only action) if and only if N on input x accepts.

•

Looping plan existence is not actually any harder than
looping plan evaluation, although it is still quite hard.
Theorem 3.2 The plan-existence problem for looping

Proof Hardness for PSPACE follows from the same
construction as in the proof of Theorem 3.1: either
the "constant plan" is fine, or it is not. No other plan

tion of the planning domain. Thus, it can be guessed
in polynomial time and checked in PSPACE. Because
NPPSPACE=PSPACE, the result follows.
Recall that the

•

unrestricted infinite-horizon plan­

existence problem is EXP-complete; this shows the
problem of determining unrestricted plan existence is
EXP-hard only because some domains require plans
that are larger than polynomial-size looping plans.

3.2

shows that plan existence is ?SPACE­

complete in deterministic domains also. This is closely
related to the PSPACE-completeness result of Bylan­
der (1994); the main difference is that our theorem ap­
plies to more succinct plans (a single action in a loop)
with more complex operator descriptions. Also, as the
proofs above show, PSPACE-hardness is retained even
in planning domains with only one action, so it is not
simply the conditional aspect of plans that makes them
hard to work with.

Let N be a

deterministic polynomial-space-bounded Turing ma­

input

that computation.) Because all transitions are deter­
ministic and only one action can be chosen, it follows

T heorem

ing plans is PSPACE-complete.

x,

(In fact, N' can even check whether c is a valid con­
figuration in the computation of N(x), by simulating

The problem is in PSPACE because the plan being

as with acyclic plans in the previous section, but we

chine. For any input

unique action), outputs the next configuration of N.

sought is no larger than the size of the succinct descrip­

To represent looping plans, we use the same notation

n,

words, N' on input c, a configuration of N (and a, the

yields a better result.

LOOPING PLANS

representation of size

produce a description of a Turing machine N'

plans is PSPACE-complete.

c inct probabilistic acyclic plans is PP -complete and

is in PL. For a planning domain with

x,

that computes the transition function for N. In other

generalizes

apply. The same holds true for a probabilistic acyclic

3

in poly­
one can,

in time polynomial in the size of the descriptions of N
and

sented planning domains but only flat plans.

x

x,

4

PARTIALLY ORDERED PLANS

construct a planning domain

that has as states all configurations of N on

A k-step partially ordered plan corresponds to a set of

only one action, and state transitions with

k-step totally ordered plans-all those that are consis­

probability 1 according to the configuration transitions

tent with the given partial order. The evaluation of a

x,

188

Goldsmith, Littman, and Mundhenk

partially ordered plan can be defined to be the evalua­
tion of the best, worst, or average member of the set of
consistent totally ordered plans; these are optimistic,
pessimistic, and average interpretations, respectively.
More formally, a partially ordered plan P is a directed
acyclic graph that has an action assigned to each node.
A totally ordered plan A = a1, ... , ak is consistent
with P if it satisfies the constraint that for all pairs
of nodes ai, aJ if ai is an ancestor of aJ in the partial
order, then i < j, i.e., ai comes before ai in the totally
ordered plan.
The plan-existence problem for partially ordered plans
under the optimistic interpretation asks whether­
given a domain M, a partially ordered plan P, and a
threshold 0-there is a totally ordered plan consistent
with P under which M reaches a goal state with prob­
ability at least B. Under the pessimistic interpretation,
we wish to know whether M reaches a goal state with
probability at least (;I under every consistent totally or­
dered plan. Under the average interpretation, we wish
to know whether M reaches a goal state with prob­
ability at least () averaged over all consistent totally
ordered plans.
The plan-existence problem for partially ordered plans
is identical to that for totally ordered plans. This is
because a totally ordered plan is a special kind of par­
tially ordered plan and its evaluation is unchanged un­
der the pessimistic, optimistic, or average interpreta­
tions. Conversely, the value of a partially ordered plan
under any interpretation is a lower bound on the value
of the best totally ordered plan.
Theorem 4.1 The plan-existence problem for par­
tially ordered plans is

NPPP -complete

under the pes­

simistic, o ptimistic and average interpretations.

The plan-evaluation problem for partially ordered
plans is different from that of totally ordered plans.
This is because a single partial order can encode an
exponential-size set of totally ordered plans, and eval­
uating the partially ordered plan involves figuring out
the best or worst member of this combinatorial set.
Theorem 4.2 The plan-evaluation problem for par­
tially ordered plans is

NPPP -complete

under the o p­

timistic interpretation, co-NPPP -complete under the
pessimistic interpretation, and PP -complete under the
average interpretation.

The proofs of the first two of these results are closely
related to the proof of Theorem 2.2. The average inter­
pretation problem can be shown to be in PP by com­
bining an argument showing how to average over con­
sistent totally ordered plans with the argument in the
proof of Theorem 2.1 showing how to evaluate a plan in

a succinct domain in PP. PP-hardness follows trivially
from Theorem 2.1, because totally ordered plans are a
special case of partially ordered plans and evaluating
totally ordered plans is PP-hard.
5

CONCLUSIONS

In this paper, we explored the computational complex­
ity of plan evaluation and plan existence in probabilis­
tic domains. We found that, in succinctly represented
domains, restricting the form of the policies under
consideration reduced the computational complexity
of plan existence from EXP-complete for unrestricted
plans to PSPACE-complete for polynomial-size loop­
ing plans to NPPP -complete for polynomial-size acyclic
plans.
The class NpPP promises to be very useful to re­
searchers in uncertainty in artificial intelligence be­
cause it captures the type of problems resulting from
choosing a good combinatorial structure and then eval­
uating its probabilistic behavior. This is precisely the
type of problem faced by planning algorithms in prob­
abilistic domains, and may capture important prob­
lems in other domains as well, such as constructing
good Bayes networks from data.
The basic structure of our results is that if plan eval­
uation is complete for some class C, then plan ex­
istence is typically NPc -complete. This same basic
structure holds in deterministic domains: evaluating a
totally ordered plan in a succinct domain is P-complete
(for some typical representations) and determining the
existence of a polynomial-size totally ordered plan is
NPP =NP-complete.
There are several significant plan representations that
we did not explicitly consider in this work. However,
the results we presented do provide a goal deal of in­
sight into complexity results for other representations.
For example, Draper, Hanks, & Weld (1994) devised a
representation for partially ordered conditional plans
for the C-BURIDAN system. In this representation, each
plan step generates an observation label as a function
of the probabilistic outcome of the step. Each step
also has an associated set of context labels dictating
the circumstances under which that step must be ex­
ecuted. A plan step is executed only if its context
labels are consistent with the observation labels pro­
duced in earlier steps. This type of plan can be ex­
pressed as a succinct acyclic plan; Corollary 2.1 can
be used to show that the plan-evaluation and plan­
existence problems for partially ordered conditional
plans in succinct domains are PP-complete and NPPP­
complete, respectively. Other important plan struc­
tures to which our results can be applied include uni­
versal plans or policies (Dearden & Boutilier 1997) and

Complexity of Probabilistic Planning

parallel plans ( Blum

& Furst 1997).

Notice that the results presented here also apply to
partially observable domains

1994;

Kaelbling, Littman,

( Draper,

Hanks,

& Weld

& Cassandra 1995); once

we limit our decision making to following finite-state
plans, it matters very little whether the true state of
the world is observable or not.

In many cases, the

complexity of optimally solving partially observable
Markov decision processes (Papadimitriou
lis

1987)

1992.

Condon, A.

& Tsitsik­

is much higher than that of searching for a

restricted controller or plan, so there is some hope of
building effective algorithms based on these ideas.

189

The complexity of stochastic

games. Information and Computation 96(2):203-224.

1997.

Dearden, R., and Boutilier, C.

Abstraction

and approximate decision-theoretic planning. Artifi­

cial Intelligence 89(1-2):219-283.

1994.

Draper, D.; Hanks, S.; and Weld, D.

Proba­

bilistic planning with information gathering and con­
tingent execution. In Proceedings of the AAAI Spring

Symposium on Decision Theoretic Planning,
Goldsmith, J.;

1997.

Littman, M.;

76-82.

and Mundhenk,

M.

The complexity of plan existence and eval­

uation in probabilistic domains.

Technical Report

The results in this paper support the intuition that

CS-1997-07, Department of Computer Science, Duke

searching for small plans is more efficient than search­

University.

ing for arbitrarily complicated plans.

From a prag­

matic standpoint, this suggests that exact dynamic­
programming algorithms, which are so successful in
flat domains, may not be as effective in succinct do­
mains; they do not focus their efforts on the set of
small plans.

Algorithm development energy, there­

Kaelbling, L. P.; Littman, M. L.; and Cassandra,
A. R.

1995.

Planning and acting in partially observ­

able stochastic domains. Technical Report CS- 96-0 8 ,
Brown University, Providence,

RI.

An algorithm for probabilistic planning.

problems in the class NPPP, as this class captures the

Intelligence 76(1-2):239-286.

essence of searching for small plans for probabilistic
domains. Heuristics for NPPP could lead to powerful
methods for solving a range of important uncertainty­
sensitive combinatorial problems.

1995.

Kushmerick, N.; Hanks, S.; and Weld, D. S.

fore, might fruitfully be spent devising heuristics for

Ladner, R.

1989. Polynomial

space counting prob­

lems. SIAM Journal on Computing
Littman, M. L.

1997.

Artificial

18:1087-1097.

Probabilistic propositional

planning: Representations and complexity. In Pro­

ceedings of the Fourteenth National Conference on

Acknowledgments

Artificial Intelligence. AAAI Press/ The MIT Press.

We gratefully acknowledge Andrew Klapper and Anne

McAllester, D., and Rosenblitt, D.

1991.

Systematic

Condon for helpful conversations on this topic.

nonlinear planning. In Proceedings of the 9th National

