

A major reason behind the success of prob­
ability calculus is that it possesses a num­
ber of valuable tools, which are based
on the notion of probabilistic indepen­
dence. In this paper, I identify a no­
tion of logical independence that makes
some of these tools available to a class of
propositional databases, called argument
databases. Specifically, I suggest a graph­
ical representation of argument databases,
called argument networks, which resemble
Bayesian networks. I also suggest an al­
gorithm for reasoning with argument net­
works, which resembles a basic algorithm
for reasoning with Bayesian networks. Fi­
nally, I show that argument networks have
several applications: Nonmonotonic rea­
soning, truth maintenance, and diagnosis.
1

INTRODUCTION

A major reason behind the success of probability cal­
culus is that it possesses a number of valuable tools,
which are based on the notion of probabilistic inde­
pendence [Pearl, 1988]. In this paper, I identify an
intuitive notion of logical independence that makes
some of these tools available to a special class of
propositional databases.
In particular, I identify in Section 2 a class of propo­
sitional databases, called argument databases, and
study some of their properties. In Section 3, I iden­
tify a notion of logical independence with respect to
argument databases and study its properties. In Sec­
tion 4, I suggest a graphical representation of argu­
ment databases, called argument networks, which re­
semble Bayesian networks. And in Section 5, I sug­
gest an algorithm for reasoning with argument net­
works, which resembles a basic algorithm for reason­
ing with Bayesian networks. Finally, I show in Sec­
tion 6 that argument networks have several applica­
tions: Nonmonotonic reasoning, truth maintenance,

and diagnosis. Proofs, omitted due to space limita­
tions, can be found in the full version of this paper.
2

ARGUMENT DATABASES

Logical independence, to be defined in Section 3, is
based on three notions: argument databases, argu­
ments, and conditional arguments, which are counter­
parts of probability distributions, probabilities, and
conditional probabilities. This section explores these
three notions in some detail.

Definition 1 Let .C and A be two propositional
languages over disjoint primitive propositions. An
argument database d with respect to (.C, A) is a set
of sentences a ::::> ¢>, where sentence a belongs to
language A, sentence <P belongs to languageC, and
database d does not entail any invalid sentence in
language A.1
Example 1 Let .C be a propositional language con­
from
primitive
structed
propositions
rain, sprinkler_on, weLgrass, and weLshoes. Let A
be another propositional language constructed from
primitive propositions a1, . . . , a6. The following is an
argument database with respect to (.C, A):
a1
a2
a3
d=
a4
as
a6

2.1

::::>
::::>
::::>
::::>
::::>
::::>

rain
sprinkler_on
( rain ::::> weLgrass)
( sprinkler_ on ::::> weLgrass)
wet_ grass
( weLgrass ::::> weLshoes).

Arguments

The same way that a probability distribution assigns
a unique probability to each sentence, an argument
database assigns a unique argument (up to logical
equivalence ) to every sentence:

1 Any

propositional database is an argument database

with respect to some

pair

(.C,A).

Argument Calculus and Networks

Definition 2 Let .6. be an argument database with
respect to (.C, A) and let ¢ be a sentence in .C.
The argument for sentence¢ with respect to database
.6., written .6.(¢), is the weakest sentence a in lan­
guage A that together with database .6. entails sen­
tence¢: .6. U {a} f=¢.2
Any sentence in A that entails .6.(¢) is called an ar­
gument for¢. Recall that .6.(¢) itself is the argument
for¢.
As we shall see later, the argument for a sentence is
closely related to the ATMS label of the sentence [Re­
iter and de Kleer, 1987]. In particular, I will show in
Section 6 that the prime implicants for the argument
.6.(¢) constitute the label for the sentence ¢.

Example 2 Consider Example 1. The argument for
weLgrass, .6.(weLgrass), is (a1 1\ as) V (a2 1\ a4 ) V
as. Moreover, each of a1 1\ as, a2 1\ a4, and as is an
argument for weLgrass.
Properties of argument databases are similar to prop­
erties of probability distributions:

Theorem 1 An argument database .6. satisfies:
1 . .6.(true) =true,
2. .6.(fal s e) =false,
3. .6.(¢ 1\ 1/J) = .6.(¢) 1\ .6.( 1/J), and
4. .6.(¢)= .6.( 1/J) when ¢= 1/J.

Note how true and false in argument calculus play
the roles of 1 and 0 in probability calculus.
Although the argument for a conjunction can be com­
puted from the arguments for its conjuncts, the ar­
gument for a disjunction cannot be computed from
the arguments for its disjuncts in general:

Theorem 2 .6.(¢) V .6.( 1/J) f= .6.(¢ V 1/J), but
.6.(¢ v 1/J) �.6.(¢) v .6.( 1/J).
Example 3 Consider the argument database
{ as :J ( rain :J weLgrass)}. The argument for -.rain
is false, the argument for weLgrass is false, but the
argument for -.rain V weLgrass is as.
.
The role that conjunction and disjunction play in ar­
gument calculus is dual to the role they play in prob­
ability calculus. In probability calculus, the prob­
ability of a disjunction can be computed from the
probabilities of the disjuncts when the disjuncts are
logically disjoint. However, to compute the proba­
bility of a cqnjunction one has to appeal to the no­
tion of conditional probability unless the conjuncts
2Sentence

a is weaker than sentence j3 if j3 entails
The argument for a sentence is unique up to logical
equivalence.
a.

421

are independent. In argument calculus, however, the
argument for a conjunction can be computed from
the arguments for the conjunctss, but to compute
the argument for a disjunction one has to appeal to
the notion of conditional argument unless the con­
juncts are independent. Conditional arguments and
independence shall be discussed next.

2.2

Conditional arguments

The obvious way to update the argument for 1/J after
observing some sentence ¢ in .C is to compute the
argument for 1/J with respect to the extended database
.6. U {¢ }. This computation gives the argument for
¢ :J 1/J with respect to the database .6.. But this
argument includes the argument for--.¢, which should
not count because ¢ has been observed. When the
argument for --.¢ is subtracted from the argument for
¢ :J 1/J, we get the conditional argument for 1/J given
¢.

Definition 3 The conditional argument for 1/J given
¢, written .6.( 1/J I¢), is
.6.( 1/J I¢) d;J .6.(¢ :J 1/J) A--..6.(--.¢).
Example 4 Consider the argument database
{ a1 :J rain}. The argument for -.rain :J weLgrass
is a1, which is also the argument for -.rain. The
conditional argument for weLgrass given -.rain is
a1 1\ --.a1 = false. Therefore, although there is an
argument for -.rain :J weLgrass, there is no argu­
ment for weLgrass given -.rain.
Although conditional arguments play a central role
in defining logical independence, a related class of ar­
guments, called sufficient arguments, plays a central
role in computing arguments.

Definition 4 A sufficient argument for 1/J given¢,
written .6.(¢ ---> 1/J), is an argument that satisfies
.6.( 1/J I¢) F= .6.(¢---. 1/J) F= .6.( 1/J :J¢).
A sufficient argument for 1/J given¢ is "sufficient" for
computing the argument for ¢ :J 1/J once the argu­
ment for--.¢ is computed:

Theorem 3 (Disjunction Rule) .6.(¢
.6.(¢---> 1/J) v .6.(--.¢).

:J

1/J) =

Example 5 Consider the argument database
{ a7 :J -.rain, as :J ( rain :J weLgrass)}. The argu­
ment for rain :J weLgrass is a3 V a7 and the argu­
ment for weLgrass given rain is as 1\ --.a7. It follows
that as is a sufficient argument for weLgrass given
rain. Therefore, disjoining as with the argument for
-.rain gives the argument for rain :J weLgrass.
3The equivalence !:;.( ¢> 1\ 1/J) = !:;.( ¢>) 1\ !:;.( 1/J) holds even
when the conjuncts ¢> and 1/J are not logically disjoint.
This is because logical conjunction is idempotent; that is,
a 1\ a:: a for all a, which is not true of numeric addition
since a + a =P a in general.

422

Darwiche

+

F igure 1: (A stands for 4> and B stands for 1/J ). The change that occurs to the argument for B as a result of observing
A. From left to right, the above shaded areas are: the argument for B, the negative influence of A on B, the positive
influence of A on B, and the conditional argument for B given A.

3

INDEPENDENCE

The notion of logical independence is based on the re­
lation between arguments and conditional arguments.
Consider Figure 1, for example, which depicts the
relation between the argument for '¢ and the condi­
tional argument for '¢ given ¢. The two arguments
are incomparable in general. The decrease in the ar­
gument for '¢ after observing ¢ is called the negative
influence of ¢ on '¢. And the increase in the argu­
ment for '¢ after observing ¢ is called the positive
influence of¢ on '¢. The positive influence of¢ on '¢
is the disjunction of all arguments for ¢ :> '¢ that are
neither arguments for ..., ¢ nor arguments for '¢. And
the negative influence of ¢ on '¢ is the disjunction of
all arguments for '¢ that are also arguments for -,¢.
More formally:

Before I state the definitions formally, let me intro­
duce some notation. The symbol i denotes a literal, i
or -,i, where i is a primitive proposition. The symbol
f denotes a conjunction of literals i, where i belongs
to I. And the symbol i denotes a disjunction of lit­
erals i, where i belongs to I.

Definition 6 An argument database fl. finds propo­
sitions I +independent from propositions J, written +lndtl.(I, J), precisely when no J has a posi­
tive influence on any i. And fl. finds propositions I
-independent from J, written -Indtl.(I, J), precisely
when no J has a negative influence on any i.
Corollary 1 +lndtl.(I, J) iff A(i If) I= fl.( f) and
-Indtl.(I, J) iff A(i) I= fl.(i I f).

Definition 5 The positive influence of¢ on'¢, writ­
ten A(¢"-''¢), is A(¢:>'¢) 1\ -,A(-,¢) 1\ -,A('¢). The
negative influence of ¢ on '¢ is A('¢ 1\ -,¢).

Example 7 Consider Example 1. sprinkler_on is
+independent of rain, but is -dependent on razn.
Moreover, weLshoes is +dependent on rain.

Example 6 Consider the argument database:

From here on, I will discuss +independence only.

...,rain
weLgrass
( rain :> weLgrass)
The negative influence of rain on weLgrass is a5/\ a7
because this will be subtracted from the argument
for weLgrass when rain is observed. The positive
influence of rain on weLgrass is a3/\-,a5/\-,a7 because
this will be added to the argument for weLgrass when
rain is observed.
When A(¢,...,.'¢) = false, we say that ¢ has no pos­
itive influence on '¢. And when fl.('¢ 1\ -,¢) = false,
we say that ¢ has no negative influence on '¢.
Below are two definitions of independence that are
based on positive and negative influence. According
to the first definition, a set of propositions I is inde­
pendent from another set J precisely when no infor­
mation about propositions J has a positive influence
on any information about propositions I. Accord­
ing to the second definition, I is independent from J
precisely when no information about J has a negative
influence on any information about I.

There is also a notion of conditional +independence
in argument calculus. It can be defined in terms of
conditional influence, but the following is a simpler
definition in terms of conditional arguments.

Definition 7 An argument database A finds propo­
sitions I +independent from J given K, written
+Indtl.(I, K, J), precisely when
fl.(i I R 1\ f) I= A(i IR).
Example 8 In Example 1, weLshoes is +indepen­
dent of rain given weLgrass.
There are several characterizations of conditional
+independence in terms of arguments, conditional ar­
guments, and sufficient arguments. Following is one
of these characterizations.

Theorem

4

+ lndtl.(I, K, J) iff

A(k :> iv J)

:=

A(I( :>i) V fl.(k

:>

J).

Argument Calculus and Networks

3. any node in g is +independent from its nonde­

Of most importance among the properties of condi­
tional +independence are the graphoid axioms [Pearl,
1988]:.

Theorem 5 Conditional +independence satisfies
the following properties:
(a) +Inda( I, K,J ) iff +Inda(J , K, I), and
(b) +Inda(I, K, J) and +Inda(L, K U I, J) iff
+Inda( I U L, K, J).
4

ARGUMENT NETWORKS

An argument network is a graphical representation of
an argument database. Figure 2 depicts an argument
network, which represents the database of Example 1.
Figure 3 depicts another argument network.
An argument network has two components: a di­
rected acyclic graph and a set of tables. Every node
in an argument network has a table associated with
it. The table has two columns, each corresponding
to a state of the associated node. The table also
has a number of rows, each corresponding to a state
of the node's parents. A table entry at row <P and
column 'lj; is an argument for <P :> 'lj;. For exam­
ple, the top left entry of the table associated with
Node weLgrass, aa V a4 V a5, is an argument for
rain 1\ sprinkler_on :> weLgrass.
Following is the formal definition of an argument net­
work in which the symbol io denotes the parents of
node i.

Definition 8 An argument network is
{C, A, g, Q), where
1.

a tuple

C and A are propositional languages over dis­
joint primitive propositions,

2. g is a directed acyclic graph over the primitive

propositions of language C, and

3. Q maps each pair ( io,i ), where i is a node in
g, into an argument in A such that Q( {o, i) 1\

Q(io, -,i) = fals e.

Definition 9 The database corresponding to argu­
ment network {C, A, g, Q) is
{Q(io,i)

:>

(io

:>

i) Ii is a node in Q}.

An argument network graphically explicates many
of the independences in its corresponding database.
The following two theorems elaborate on this and
other features.

Theorem 6 Let {C, A, g, Q) be an argument net­
work and let .6. be its corresponding database. Then

423

scendents given its parents.

The first result above says that the database cor­
responding to an argument network does not entail
any invalidj sentence in the language A. The sec­
ond result says that Q(io,i ) is entailed by the con­
ditional argument .6.(i I io) and entails the argument
.6.(io :> i). The third result is most interesting be­
cause it shows that some independences, which are
part of the definition of a Bayesian network, are prop­
erties of an argument network. Together with Theo­
rem 5, this result leads to the following consequential
theorem.

Theorem 7 Let {C, A, g, Q) be an argument net­
work and let I,J, K be disjoint sets of nodes in Q.
If K d-separates I fromJ , then +Inda (I, K, J) .
The criterion of d-separation is a topological test that
is not defined here, but can be found elsewhere [Pearl,
1988].
5

COMPUTING ARGUMENTS

A basic algorithm for computing probabilities in
Bayesian networks is the well known po/ytree algo­
rithm [Pearl, 1988; Peot and Shachter, 1991]. Al­
though this algorithm applies to singly connected
networks,4 it can be extended to multiply con­
nected networks [Horvitz et a/., 1989; Pearl, 1988;
Suermondt and Cooper, 1988; Peot and Shachter,
1991]. In this section, I present a similar algorithm for
computing arguments in singly connected networks,
which can be extended to compute arguments in mul­
tiply connected networks [Darwiche, 1992].
Given an observation 8 , the algorithm computes the
argument .6.(8 :> i) for each literal i. From such ar­
guments, one computes the argument for the negated
observation -,8 using .6.( -,8 ) = .6.(8 :> i) 1\ .6.(8 :> -,i).
Then one computes the conditional argument for i
given 8 using .6.{i I 8 ) = .6.(8 :> i ) 1\ ..,_6.(-,8 ). In
the following theorem, which states the algorithm,
the symbol ioj denotes the parents of node i except
parent j, io denotes the children of node i, and ioj
denotes the children of node i except child j

Theorem 8 Let {C,A,Q, Q) be an argument net­
work and let .6. be its corresponding database. Let
8 be a state of some leaf nodes in g, where each node
has only one parent. If i is a non-observed node in
Q, then .6.(8 :> i ) equals 1r;(i ) V .X;{i ), where

1 . .6. is an argument database,
2. the argument Q(io,i ) is a sufficient argument

fori given io, and

4 A singly connected network has only one undirected
path between any two nodes.

424

Darwiche

R

notR

s

dl

false

d2

WG
R,S
R,notS
notR,S
notR,notS

d3 ord4ord5
d3 ord5
d4ord5
d5

notS
false

notWG
false
false
false
false

F igure 2: An argument network. The symbols R, S, WG, and WS stand for rain, sprinkler_on' weLgrass ' and wet shoes'
_
respectively.
-

.X;(i)
1rj.i(])
Ak.i(i)
o

def
=

d!.f

v Ak.;(i),

d!.f

1rj (]) v

v

kEjoi

.Xk.j (]),

Q(-,i, -, k), if 8 f: k; and
o

o

o

1\ .xk(...,k) v 1\ Q(koi "...,i, ..,A:) v
k

there. is one parent pe; node ( the network is a tree),
the time of the algonthm and the size of all argu­
ments constructed are linear in both the number of
nodes in the network and the number of children per
node.

kEio

v

1rj.k(...,]),

otherwise.
The polytree algorithm is usually explained in terms
of a �essage-passing paradigm in which the pair
_ called the message from node j
(7rj.i(J), 7rj.i(...,J)) 1s
to its child i and the pair (.Xk.i(i), Ak.i(...,i)) is called
the message from ';lode k to its parent i. The compu­
_ of the algonthm is then a sequence of message
tatiOn
exchanges between nodes in which each node receives
and sends one message to each neighbor. Therefore,
the number of messages exchanged during the com­
putation is twice the number of arcs in the network
which, for singly connected networks, is one less tha�
the number of nodes.
Beyo?d it� message-passing behavior, the polytree
algonthm IS well known for its time complexity. The­
orem 9 below shows a similar time complexity for the
alg<;>r�_ thm of Theore� 8, assuming that constructing
_ ( or conJunction) of I elements requires
a di�JunctiOn
I umts of space and I units of time.

Theorem 9 A non-observed node with n > 0 par­
ents and m > 0 children consumes (n + 2)2n+l +2m
space units and a similar number of time units when
it sends a child message, and consumes (n + 1 )2n+1 +
4(m + 2) space units and a similar number of time
units when it sends a parent message.
The theorem shows that the time and space con­
sumed by the algorithm is manageable if the num­
ber of parents per node is small. In particular, when

6

APPLICATIONS OF
ARGUMENT NETWORKS

In this section, I discuss three applications of ar­
gu�ent networks: Nonmonotonic reasoning, truth
mamtenance, and diagnosis. In nonmonotonic rea­
soning, I show how to compute what needs to be re­
tracted from a database in order to resolve a conflict
with an observation. In truth maintenance, I show
how to compute the label of a sentence [Reiter and
de Kleer, 1987] from its argument. And in diagnosis,
I show how to compute the kernel diagnoses [de Kleer
et al., 1992] of an observation from the argument for
the negated observation.
All three applications are isomorphic at some level of
abstr�ction. Moreover, in all of them, we end up ex­
pressmg some argument in its prime implicant form.
Following is a review of the notion of a prime impli­
cant and the connected notion of a prime implicate.

Definition 10 A conjunctive clause is a conjunc­
tion of literals. An implicant for sentence '1/J is
a satisfiable conjunctive clause that entails '1/J. A
prime implicant for '1/J is a weakest implicant for
'lfj. A disjunctive clause is a disjunction of literals.
An implicate of sentence '1/J is an invalid disjunctive
clause that is entailed by '1/J. A prime implicate of '1/J
is a strongest implicate of '1/;.
6.1

Nonmonotonic reasoning

When our beliefs are represented by a propositional
database, we are often interested in answering two

Argument Calculus and Networks

notC
false

I

notB
falSe

c

I

B
falSe

�J 9
�

false

no'tE
C,B false
C,notB ok(Y)
notC, B ok Y
notC,notB okY

��

E
ok(Y)
false
false
false

E,D
E,notD
notE,D
notE,notD

/

notF
false
false
false
ok(Z)

notA
false

I

425

A
false

D
A
notA

false

ok(X)

ok(Z)
ok(Z)
ok(Z)
false

Figure 3: An argument network representing the circuit on the right corner. This network assumes a. particular fault
model of digital gates: If a gate is OK, it produces the right output; but if the gate is not OK, it may or may not produce
the right output.

types of questions. First, does sentence <P follow from
the database? And second, if ¢ follows from the
database, and if we observe -,¢, then what should
be removed from the database such that the conflict
is resolved? Both of these questions can be answered
by appealing to the notion of an argument.
In particular, suppose that we have a database r =
{ <Pt, . . . , <Pn} that is constructed from language C. To
answer the above questions, we introduce a primi­
tive proposition a; to represent the identity of each
sentence ¢; in the database - the argument lan­
guage A is constructed from these primitive propo­
sitions. We then construct the argument database
� = { a1 :J </>1, ..., an :> <P n}. For example, the
database
raw
sprinkler_on
rain :> weLgrass
f=
sprinkler_on :> weLgrass
weLgrass
weLgrass :> weLshoes.
gets represented by the argument database:
a1
a2
aa
�=
a4
as
a6

J
:>
:>
:>
:>
J

rain
sprinkler_on
rain :> weLgrass
sprinkler o n :> weLgrass
weLgrass
weLgrass :J weLshoes.
_

The argument network of this database was given in
Figure 2.
The database r entails some sentence ¢ precisely
when� U {a1/\ . . . /\an} f=¢. And this holds precisely

when at 1\ ... 1\ an entails the argument�(¢), which
can be tested in time proportional to the size of the
argument�(¢).
When the observation <P is inconsistent with the
database r, one is usually interested in retracting a
set of sentences from the database r to make it consis­
tent with the observation¢. There is often more than
one set of sentences that can achieve this, and the
prime implicants for the negated argument -,�(-,¢)
characterize all of them. In particular, the negative
literals of a prime implicant for -,�(-,¢) correspond
to a minimal set of sentences that must be retracted,
and its positive literals correspond to a minimal set of
sentences that must not be retracted, in order for the
database r to become consistent with the observation
¢.

Example 9 Consider the database r above and its
corresponding argument database �. We want to
know whether r entails wet_ grass. We can answer
this question by answering another question: Does
� U {at, ..., a6} entail weLgrass? To answer this
question, we compute the argument for weLgrass and
test whether a1 1\ . . . 1\ a6 entails it. The argument for
weLgrass was computed in Example 2 to be ( at/\aa)V
(a2/\a4)Vas. This argument is entailed by at/\.../\a6.
Therefore, f entails weLgrass. Now, suppose that we
observe -, weLgrass, which contradicts the database
r. What should be retracted from r to resolve this
contradiction? To answer this question, we compute
the prime implicants for-,�( -, weLgrass) , which turn

426

Darwiche

out to be:

...,a1 A...,a2A-,as

...,a1 A ...,a4A-,as

Example 10 Consider the argument database rep­
resented by the argument network in Figure 3:

..,aa A ...,a2A-,as

OK(X) AA
OK(X)A-,A
OK(Y)ABAC
OK(Y)A(-,B V -,C)
OK(Z)A(D V E)
OK(Z)A(...,DA...,E)

-,aa A ...,a4A-,as.

Each one of these implicants characterize a minimal
set of sentences that must be retracted from r in or­
der to resolve the conflict with the given observation.
For example, the first implicant says that if we re­
move rain, sprinkler_on and weLgrass from f, then
-, weLgrass will no longer be inconsistent with the
resulting r:
rain :::> weLgrass
sprinkler_on :::> weLgrass
weLgrass :::> weLshoes.
The fourth implicant, however, says that if we re­
move rain :::> weLgrass, sprinkler_on :::> weLgrass,
and weLgrass from r, then -, weLgrass will no longer
be inconsistent with the resulting r:
ram
sprinkler_on
wet_grass :::> weLshoes.
And so on.

6.2

Truth maintenance

The basic task of an assumption-based truth mainte­
nance system, also called a clause management sys­
tem ( CMS) [Reiter and de Kleer, 1987], is to compute
labels of sentences. Roughly speaking, the label for
a sentence is a set of "minimal" arguments for that
sentence. More formally, we have the following defi­
nitions [Reiter and de Kleer, 1987]:

Definition 11 A minimal support for sentence ¢
with respect to database � is a prime implicate of
� U { ..., ¢} that is not an implicate of�.
Definition 12 The A -label of sentence ¢ with re­
spect to database � is the set of all conjunctive
clauses a such that a belongs to language A and -,a
is a minimal supports for¢ with respect to �.
The relation between the A-label of a sentence and
its argument is a corollary of the following theorem.

Theorem 10 Let � be an argument database with
respect to (C, A ). The sentence a is a prime impli­
cant for �(A) precisely when a belongs to language
A and -,a is a minimal support for sentence ¢ with
respect to database �.
As the following corollary shows, the A-label of a sen­
tence is simply its argument put in a prime implicant
form.

Corollary 2 Let� be an argument database with re­
spect to (C,A). The A-label of sentence ¢ with re­
spect to database � is the set of prime implicants for
argument �(A).

:::>
:::>
:::>
:::>

:::>
:::>

D
-,D
E
-,E

F
-,F

The argument for the sentence -, AA B A C :::> F
is (OK(X) V OK(Y)) A OK(Z). The prime impli­
cants of this argument are OK(X) A OK(Z) and
OK(Y)A OK(Z), each of which is an argument for
-,A ABA C :::> F. Moreover, by Corollary 2, these
prime implicants constitute the label for the sentence
-,AABAC :::>F.

6.3

Diagnosis

The basic task of a kernel-diagnosis system is to com­
pute the kernel diagnoses of an observation with re­
spect to some database. Roughly speaking, a kernel
diagnosis of an observation is a "strongest" possible
consequence of the observation. More formally, we
have the following definition [de Kleer et a/., 1992]:

Definition 13 The A-kernel diagnoses of sentence
¢ with respect to database Ls: are the pnme imp/icants
for the conjunction of all the prime implicates (that
belong to language A) of database � U {¢}.
The relation between kernel diagnoses and arguments
is a corollary of the following theorem.

Theorem 11 The conjunction of all the prime im­
plicates of database � that belong to language A is
equivalent to the strongest sentence that belongs to
language A and is entailed by database �.
Corollary 3 Let� be an argument database with re­
spect to (C,A). The A-kernel diagnoses of sentence
¢ with respect to database � are the prime implicants
for the negated argument ...,�( -, ¢).
Example 11 Consider the database in Example 10.
And suppose we observe -,AABACA-,F, which is
unexpected given that all gates are OK. Suppose fur­
ther that we want to compute the kernel diagnoses
of this observation. According to Corollary 3, we
must first compute the argument for the negated ob­
servation. The negated observation in this case is
-, AABAC :::> F, and its argument was computed in
Example 10: ( OK(X) V OK(Y)) A OK(Z). Negat­
ing this argument, we get (-,OK(X) A -,QK(Y)) V
-,QK(Z). The prime implicants of this sentence are
-,QK(X) A -,QK(Y) and -,QK(Z). That is, either
gates X and Y are not OK, or that gate Z is not
OK. Each of these is a kernel diagnoses of the obser­
vation ..., AABACA...,F.

Argument Calculus and Networks

CONCLUSION

In this paper, I have identified a logical notion of
independence that resembles probabilistic indepen­
dence. I have also presented independence-based
tools to represent and reason with a class of propo­
sitional databases that has several applications. The
suggested tools have successful counterparts in the
probabilistic literature.
ACKNOWLEDGEMENT

This work was supported in part by grants from
the Air Force Office in Scientific Research, AFOSR
90 0136, and the National Science Foundation, IRI9200918.
