

The currently most efficient algorithm for infer­
ence with a probabilistic network builds upon a
triangulation of a network's graph. In this paper,
we show that pre-processing can help in finding
good triangulations for probabilistic networks,
that is, triangulations with a minimal maximum
clique size. We provide a set of rules for step­
wise reducing a graph. The reduction allows us
to solve the triangulation problem on a smaller
graph. From the smaller graph's triangulation, a
triangulation of the original graph is obtained by
reversing the reduction steps. Our experimental
results show that the graphs of some well-known
real-life probabilistic networks can be triangu­
lated optimally just by pre-processing; for other
networks, huge reductions in size are obtained.

1

Introduction

The currently most efficient algorithm for inference with a
probabilistic network is the junction-tree propagation al­
gorithm that builds upon a triangulation of a network's
moralised graph [1, 2]. The running time of this algorithm
depends on the triangulation used. In general, it is hard to
find a triangulation for which this running time is minimal.
As there is a strong relationship between the running time
of the algorithm and the maximum of the triangulation's
clique sizes, for real-life networks triangulations are sought
for which this maximum is minimal. The minimum of the
maximum clique size over all triangulations of a graph is
a well-studied notion, both by researchers in the field of
probabilistic networks and by researchers in graph theory
and graph algorithms. In the latter field of research, the no­
tion of treewidth is used to denote this minimum minus one.
Unfortunately, computing the treewidth of a given graph is
an NP-complete problem [3].
When solving hard combinatorial problems, pre-process­
is often profitable. The basic idea is to reduce the size

ing

{frankvde,linda}®cs.uu.nl

of the problem under study, using relatively little compu­
tation time and without losing optimality. The smaller,
and presumably easier, problem is subsequently solved. In
this paper, we discuss pre-processing for triangulation of
probabilistic networks. We provide a set of rules for step­
wise reducing the problem of finding a triangulation for a
network's moralised graph with minimal maximum clique
size, to the same problem on a smaller graph. Various al­
gorithms can then be used to solve the smaller problem.
Given a triangulation of the smaller graph, a triangulation
of the original graph is obtained by reversing the reduction
steps. Our reduction rules are guaranteed not to destroy op­
timality with respect to maximum clique size. Experiments
with pre-processing revealed that our rules can effectively
reduce the problem size for various real-life probabilistic
networks. In fact, the graphs of some well-known networks
are triangulated optimally just by pre-processing.
In this paper, we do not address the second phase in the pre­
processing approach outlined above, that is, we do not ad­
dress actually constructing triangulations with a minimal or
close to minimal maximum clique size. Recent research re­
sults indicate, however, that for small graphs optimal trian­
gulations can be feasibly computed. Building upon a vari­
ant of an algorithm by Amborg, Corneil, and Proskurowski
[3], K. Shoikhet and D. Geiger performed various exper­
iments on randomly generated graphs [4]. Their results
indicate that this algorithm allows for computing optimal
triangulations of graphs with up to I 00 vertices.
The paper is organised as follows. In Section 2, we review
some basic definitions. In Section 3, we present our pre­
processing rules. The computational model in which these
rules are employed, is discussed in Section 4. In Section
5, we report on our experiments with well-known real-life
probabilistic networks. The paper ends with some conclu­
sions and directions for further research in Section 6.

2

Definitions

The currently most efficient algorithm for probabilistic in­
ference operates on a junction tree that is derived from a

UAI2001

BODLAENDER ET AL.

triangulation of the moralisation of the digraph o f a proba­
bilistic network. We review the basic definitions involved.
Let G
(V, A) be a directed acy clic graph. The moral­
isation of G is the undirected graph M(G) obtained from
G by adding edges between everypair ofnon-adjacent ver­
t i ces that have a common successor (vertices v and w have
a common s ucc essor if there is a vertex x with ( v, x) E A
a nd (w, x) E A), and then dropping the arcs' directions.
=

Let G
(V, E) be an undirected graph. A set of vertices
W � V is called a clique in G if there is an edge between
every pair of disjoint vertices from W; the cardinality of
W is the clique's size. For a set of vertices W � V, the
subgraph induced by W is the graph G[WJ = (W, (W x
W) n E); for a single vertex v, we write G- v to denote
G[V - {v}]. The graph G is triangulated if it does not
contain an induced subgraph that is a simple cycle of length
at least four. A triangulation of G is a triangulated graph
H (G) that contains G as a sub graph. The treewidth of the
triangulation H (G) of G is the maximum clique size in
H (G) minus 1. The treewidth of G, denoted r (G), is the
minimum treewidth over all triangulations of G.
=

graph H is a minor of a graph G if H can be obtained
from G by zero or more vertex deletions, edge deletions,
and edge contractions (edge c ontra cti on is the operation
that replaces two adjacent vertices v and w by a single ver­
tex that is connected to all neighbours of v and w). It is
well known (see for example [5]), that the treewidth of a
minor of Gis never larger than the treewidth of G itself.

A

of an undirected graph G = (V, E) is a
bijection V t-t {1, . . . , jVI}. For v E V and a linear or­
dering f of G- v, we denote by (v;f) the linear ordering
F of G that is obtained by addingv at the beginning off,
that is,f'(v)
1 and, for all w =/= v, F(w)
f(w) + 1.
A linear ordering f is a perfect elimination scheme for G
if, for each v E V, its higher ordered neighbours form a
clique, that is, if every pair of distinct verti ces in the set
{wE V I {v, w} E E and f(v) < f(w)} is adjacent. It is
well known (see for example [6]), that a graph is triangu­
lated if and only if it allows a perfect elimination scheme.

A linear ordering

=

33

of maximal cliques in G and, for each vertex v, the set
= { i I v E Vi} c ons titu tes a connected subtree ofT.
It is well known (see for example [6]), that a graph is trian­
gulated if and only if it has a junction tree.

Tv

3

Safe reduction rules

Pre-processing a probabilistic network for triangulation
builds upon a set of reduction rules. Th ese rules allow for
stepwise reducing a network's moralised graph to another
graph with fewer vertices. The steps applied during the re­
duction can be reversed, thereby enabling us to compute a
triangulation of the original graph from a triangulation of
the smaller graph. In this section, we discuss the various
rules; a discussion ofthe computational method in which
these rules are employed, is deferred to Section 4.
During a graph's reduction, we maintain a stack of elimi­
nated vertices and an integer low that gives a lower bound
for the treewidth of the original graph. Application of a re­
duction rule serves to modify the current graph G to G' and
to possibly update low to low'. We say that the rule is safe
if max(r(G), low)
m ax(r(G') , low'). By applying safe
rules, therefore, we have as an invariant that the treewidth
of the original graph equals the maximum ofthe treewidth
ofthe reduced graph and the value low. In the sequel, we
assume that the original moralised graph has at least one
edge and that low is initialised at 1.
=

Our first reduction rule applies to simplicial vertices. A
vertex v is simplicial in an undirected graph G if the neigh­
bours ofv form a clique in G.
Lemma 1 Let

G

be an undirected graph and let v be a

simplicial vertex in

G with degree d ;::: 0. Then,

=

For a graph G and a linear ordering f of G, thereis a unique
minimal triangulation H (G) of G that has f forits perfect
elimination scheme. This triangulation, which we term the
fill-in given j, can be constructed by, fori
1, ... , !VI,
turning the set of higher numbered neighbours of f-1 (i)
into a clique. The maximum clique size minus 1 of this
fill-in is called the treewidth of f. The treewidth of a lin­
ear ordering of a triangulated graph equals the maximum
number of higher numbered neighbours of a vertex [ 6].
=

To conclude, a junction tree of an undirected graph G =
(V, E) is a tree T = (I, F), where every node i E I
has associated a vertex set Vi, such that the following two
properties hold: the set {Vi I i E I} equals the set

•
•

r(G)

=

max(d,r(G- v));

(v; f) of G of minimum
G - v of
treewidth at most max(d, r(G- v)).
there is a linear ordering

treewidth, where f is a linear ordering of

Proof. Since G contains a clique of size d + 1, we have
that r(G) ;::: d. We further observe that r(G) ;::: r(G - v),
because G - v is a minor of G. We therefore have that
r(G) ;::: max(d, r(G- v )) . Now, let f be a linear ordering
of G-v of treewidth k:::; max(d, r(G- v)). Let H be the
fill-in of G- v given f. Adding vertex v and its (formerly)
incident edges to H yields a graph H' that is still triangu­
lated: as every pair of neighbours of vis adjacent, v cannot
belong to a simple (ch ordless ) cycle of length at least four.
The maximum clique size of H' therefore equals the maxi­
mum ofd+1andk+l. Hence,r(G) � max(d,r(G-v)),
from which we conclude the first property stated in the
lemma. To prove the second property, we observe that the
linear ordering (v; f) is a perfect elimination scheme for
H', as removal of v upon computing the fill-in of H' does
0
not create any additional edges.

34

UAI2001

BODlAENDER ET AL.

Our first reduction rule, illustrated in Figure

1,

now is:

Reduction Rule 1: Simplicial vertex rule

G if there is a neighbour w of v such that all other neigh­
bours of v form a clique in G. Figure 2 illustrates the basic
idea. As we allow other neighbours of v to be adjacent to
simplicial vertices are also almost simplicial.

Letv be a simplicial vertex of degree d � 0.
Removev.
Set low to max(/ow, d).

w,

·

From Lemma 1 we have that the simplicial vertex rule is
safe. The second property stated in the lemma further pro­
vides for the rule's reversal when computing a triangulation
of the original graph from one of the reduced graph.

�
·

.
·
·..

·.

.

·

....

..: .··

·
.

x

.

· · · · · · · · : :•
w

-=edge
=edge or non-edge

Figure 2: An almost simplicial vertex.

·

.·
·

.

. . .

....

.

v

�

Figure 1: The simplicial vertex rule.

Because the digraph G of a probabilistic network is
moralised before it is triangulated, it is likely to give rise
to many simplicial vertices. We consider a vertex v with
outdegree zero in G. Since all neighbours of v have an arc
pointing into v, moralisation will connect every two neigh­
bours that are not yet adjacent, thereby effectively turning v
into a simplicial vertex. The simplicial vertex rule wiii thus
remove at least all vertices that have outdegree zero in the
network's original digraph. As every directed acyclic graph
has at least one vertex of outdegree zero, at least one reduc­
tion will be performed. As the reduced graph need not be
the moralisation of a directed acyclic graph, it is possible
that no further reductions can be applied.
/
The digraph G of a probabilistic network may also include
vertices with indegree zero and outdegree one. These ver­
tices will always be simplicial in the moralisation of G.
We consider a vertex v with indegree zero and a single arc
pointing into a vertex w. In the moralisation of G, w and
its (former) predecessors constitute a clique. As all neigh­
bours ofv belong to this clique, v is simplicial.
A special case of the simplicial vertex rule applies to ver­
tices of degree 1; it is termed the twig rule, after [7].
Reduction Rule la: Twig rule

Letv be a vertex of degree 1.
Removev.
The twig rule is based upon the observation that vertices of
degree one are always simplicial. Another special case is
the islet rule that serves to remove vertices of degree zero.
We would like to note that many heuristic triangulation al­
gorithms, such as the algorithm described in [8], remove
simplicial vertices.
Our second reduction rule applies to almost simplicial ver­
tices. A vertex v is almost simplicial in an undirected graph

Let G be an undirected graph and let v be an
almost simplicial vertex in G with degree d � 0. Let G' be
the graph that is obtained/rom G by turning the neighbours
ofv into a clique and then removing v. Then,

Lemma 2

•
•

r(G') :-:; r(G) and r(G) :-:; max(d, r(G'));
the linear ordering (v; f) of G, with f a linear or­
dering ofG' oftreewidth at most max(d,r(G')), has
treewidth at most max(d, r(G')).

Let w be a neighbour of v such that the other
neighbours of v form a clique. As we can obtain G' from
G by contracting the edge {v, w } , G' is a minor of G. We
therefore have that r(G') :-:; r(G). Now, let f be a linear
ordering ofG' of treewidthk :-:; max(d, r(G')). Let H be
the fill-in ofG' given f. If we add v and its (formerly) adja­
cent edges to H, thenv is simplicial in the resulting graph
H1• Using Lemma l, we find that r(H') max(k, d). The
D
two properties stated in the lemma now follow.
Proof.

=

Our second reduction rule, illustrated in Figure 3, is:
Reduction Rule 2: Almost simplicial vertex rule

Let v be an almost simplicial vertex of degree d � 0.
If low � d, then
add an edge between every pair of non-adjacent
neighbours of v;
removev.
Building upon Lemma 2 we find that the almost simpli­
cial vertex rule is safe. Suppose that we have G and
low before, and G' and low1 after application of the rule.
Then, r(G') :-:; r(G), r(G) :-:; max(d,r(G')), and
d :-:; low = low1• We conclude that max(r(G),low)
max(r(G'),low1). Examples can be constructed, unfortu­
nately, that show that the rule is not safe for low < d.
=

Figure 3: The almost simplicial vertex rule.

35

BODLAENDER ET AL.

UAI2001

A special case of the almost simplicial vertex rule applies

Lemma 3 Let G be an undirected graph and let v, w be

to vertices of degree two. A vertex of degree two is, by def­

two vertices of degree three having the same set of neigh­
bours. Let G' be the graph that is obtained from G by
turning the set of neighbours ofv into a clique and then
removingv and w. Then,

inition, almost simplicial and we can therefore replace it by
an edge between its neighbours, provided that the original
graph has treewidth at least two. The resulting rule, illus­
trated in Figure 4, is called the series rule, after [7].

•

Reduction Rule 2a: Series rule

•

Let v be a vertex of degree 2.
If low � 2, then
add an edge between the neighbours of v, if
they are not already adjacent;

·
... ·

v

..
......

·

Now, let

in of G1 given

·. . .

. .

.

· ·

be a vertex of degree 3 such that at least

··

·.
···

.

.
.

..
.

·

.

.

.·

.

......

f))

of G,
0

From Lemma 3 we have safeness of the buddy rule, which
is illustrated in Figure 6.

.·

..

�
·

·

.

.

·

w

be vertices of degree 3 having the same

add an edge between every pair of non­

.
.

.

.

. ..

:. .

·

adjacent of neighbours of v;
removev;

� �

removew.
··

Figure 5: The triangle rule.
As the series and triangle rules are special cases of the al­

most simplicial vertex rule, both are safe.
If the twig and islet rules cannot be applied to a non-empty
undirected graph, then the graph has treewidth at least two.
We can then set low to max.(low, 2). Note that from this ob­
servation we have that the islet and twig rules suffice for re­
ducing any graph of treewidth one to the empty graph. The

islet, twig and series rules suffice for reducing any graph of
treewidth two to the empty graph. So, if low ;::: 2 for a given
non-empty graph and the islet, twig and series rules cannot
be applied, then we know that the graph has treewidth at
least three. We can then set low to max{low, 3).
As for treewidths one and two, there is a set of rules that

:·.... ::

···

·

·

··

.

.

··

·.

..

.
· .·

.

V

·

.

.

.

.

.

....

.. .

•

•

.. ·

..

w

Figure 6: The buddy rule.
The cube rule, presented schematically in Figure 7, is
slightly more complicated. The subgraph shown on the left
is replaced by the one on the right; in addition, low is set
to max( low, 3). Vertices v,

w

and

x

in the subgraph may

be adjacent to other vertices in the rest of the graph; the
four non-labeled vertices cannot have such 'outside' edges.
Due to space limitations we do not provide a lemma from
which safeness of the rule can be seen; the proof of safe­
ness, however, is similar to the proofs given above.

This set of rules was first identified by S.

Arnborg and A. Proskurowski [7). The islet, twig, series
and triangle rules are among the set of six. The two other
rules are of interest to us, not just because they provide for
computing optimal triangulations for graphs of treewidth
three, but also because they give new reduction rules.

.. ·

.

suffice for reducing any graph of treewidth three to the
empty graph.

their (formerly)

H, then both are simplicial in the result­

If low ;::: 3, then

removev.
.
·

By

set of neighbours.

adjacent neighbours of v;

·.

f. If we add v and w with

The properties stated in the lemma now follow.

Letv,

add an edge between every pair of non­

·

w.

Reduction Rule 3: Buddy rule

If low � 3, then

�

and

v

therefore, equals the maximum of 3 and the treewidth off.

two of its neighbours are adjacent.

··

be the neighbours of

ing graph. The treewidth of the ordering (v; (w;

Reduction Rule 2b: Triangle rule

·

y and z

adjacent edges to

Another special case is the triangle rule, shown in Figure 5.

v

x,

G'. So, G' is a minor of G. We find that r(G1) :-::; r(G).
f be a linear ordering of G' and let H be the fill­

: :I

Figure 4: The series rule.

Let

Let

contracting the edges { v, x} and { w, y} in G, we obtain

.. :::�
...

the linear ordering (v; (w; f)), with f a linear or­
dering ofG' oftreewidth at most max(3, r(G')), has
treewidth at most max(3, r(G')).

Proof.

remove v.

··

r(G') :-::; r(G) and r(G) :-::; max(3, r(G'));

Figure 7: The cube rule.

BODLAENDER ET AL.

36

The sub graph in the left hand side of the

cube rule

is not

UAI2001

2. If a reduction rule can be applied to G', it is executed,

very likely to occur in the moralisation of a probabilistic

modifying G' accordingly. Each vertex thus removed

network's digraph, but it is not impossible. The main rea­

is pushed onto the stack S; if prescribed by the rule,

son for our interest in the rule is that it is one of the six

the lower bound

rules that suffice for reducing graphs of treewidth three to

until the reduction rules are no longer applicable.

low � 3 for a given non-empty
islet, twig, series, triangle, buddy and cube

the empty graph. So, if
graph and the

rules

cannot be applied, then we know that the graph has

treewidth at least four. We can then set
To conclude this section, Figure

low to max (low, 4).

The figure depicts how application of our reduction rules
serves to reduce the fragment to a single vertex. In fact, the
moralised graph of the

entire

ALARM network is thus re­

duced to the empty graph, which indicates that our reduc­
tion rules provide for constructing an optimal triangulation.

This step is repeated

3. If no rule can be applied and low

< 4, then

low

is

increased by I. The reduction is continued at step 2.
4. L et G' be the graph

that results after execution of the

previous steps. Using an exact or heuristic algorithm,

8 shows a fragment of the

well-known ALARM network, along with its moralisation.

low is updated.

G' is triangulated.

5.

Let H be the triangulation that results from step 4. For
H, a perfect elimination scheme f is constructed.

6. Until S is empty, the top element

v

and f is replaced by (v; f).

is popped from S

7. Let f' be the linear ordering resulting from the previ-

ous step. The fill-in of M(G) given f' is constructed.
The steps I through

3 describe the reduction of the graph
In step 4, the graph that re­

of a probabilistic network.

sults after reduction is triangulated. For this purpose, vari­

ous different algorithms can be used. If the algorithm em­
ployed is

exact,

that is, if it yields a triangulation of min­

imal treewidth, then our method yields an optimal trian­
gulation for the original moralised graph. For many real­
life networks, the combination of our reduction rules with
an exact algorithm results in an optimal triangulation in
reasonable time.
Figure 8: A fragment of the ALARM network and the re­

duction of its moralisation.

4

implements

We argued that application of our rules may reduce a net­
work's moralised graph to the empty graph. The computa­
tional method complements this reduction by its reversal,
thereby providing for the construction of a triangulation of
minimal treewidth. For networks that cannot be triangu­
lated optimally just by pre-processing, our rules are com­
bined with an algorithm that serves to find an optimal or
close to optimal triangulation of the reduced graph.
The computational method takes for its input the directed
acyclic graph G of a probabilistic network; it outputs a tri­
angulation of the moralisation of G. The method uses a
stack S to hold the eliminated vertices in the order in which
they were removed during the graph's reduction. Moreover,

low

maintains a lower bound for the treewidth

of the original moralised graph; it is initialised at 1. The
method now amounts to the following sequence of steps:
I. The moralisation M (G) of G is computed and G' is

initialised at M(G).

triangulation algo­

we will argue in the next section, however, these heuris­

pre-processing of probabilistic networks for triangulation.

the value

heuristic

moralised graph then is not guaranteed to be optimal. As

The reduction rules described in the previous section are

computational method that

not be feasibly computed, a

rithm can be used. The treewidth yielded for the original

Computational method

employed within a

If after reduction a graph of consider­

able size remains for which an optimal triangulation can­

tic algorithms tend to result in better triangulations for the
graphs that result from pre-processing than for the original
graphs. If, after executing the steps I through 3, the re­
duced graph is empty, we can construct a triangulation of
minimal treewidth for the moralised graphjust by reversing
the various reduction steps, and further triangulation is not
necessary. This situation occurs, for example, if the origi­
nal graph is already triangulated or has treewidth at most 3.
The ALARM network gives another example: its moralised
graph has treewidth four and is reduced to the empty graph.
In step

2 of our computational method, each of the reduc­

tion rules is investigated to establish whether or not it can
be applied to the current (reduced) graph G'. As soon as
an applicable rule is found, it is executed. When analysing
the computational complexity of our method, it is readily
seen that investigating applicability of the various reduc­
tion rules is the main bottleneck, as all other steps (except
for the triangulation in step

4) take linear time [6].

Investigating applicability of the islet,

twig and series rules

takes a total amount of computation time that is linear in
the number of vertices. To this end, we maintain for each

BOPLAENDER ET AL.

UAI2001

37

network

vertex an integer that indicates its degree; we further main­

before
moralisation

tain lists of the vertices of degree zero, one, and two. The

buddy, triangle and cube rules

lVI

can also be implemented to

WILSON

take overall linear time, for example using techniques from
[9]. More straightforward implementations, however, will

ALARM

VSD

also be fast enough for moderately sized networks.

OESOPHAGUS

For the simplicial vertex and almost simplicial vertex rules,
efficient implementation is less straightforward. To inves­

MUNIN

OESOPHAGUS+

ICEA
PATHFINDER

tigate whether or not a vertex is simplicial, we must verify
that each pair of its neighbours are adjacent. For this pur­
pose, we have to use a data structure that allows for quickly
checking adjacency, such as a two-dimensional array. For
a vertex of degree d, investigating

O(d2) time. In

a graph with

n

simpliciality

then takes

vertices, we may

have

to

O(n) times. Each such check
O(ne) time, where d(v) is the
de.

check for simplicial vertices
costs

OCL v d(v)2)

gree of vertex v

=

and e

denotes the number of edges m the

graph. The total time spent on investigating applicability
of the

simplicial vertex rule

is therefore

O(n2e). As

the

treewidth of the moralised graph of a real-life probabilistic

network is typically bounded, we can refrain from checking
simpliciality for vertices of large degree, giving a running
time of

O(n2)

in practice. For the almost

simplicial vertex

rule, similar observations apply.

Table l:

IAI

21
37
38
42
67
1003

23
44
51

57

117
1244

after
moralisation

lVI

lEI

37
38
42
67
!003

194
1662

21

27
62
61
68

89

!54

89

215

109

192

l09

211

The sizes of the digraphs of the various networks

and of their moralisations.

PR-2
PR-3
PR-4

PR-l U {series}
PR-2 U {triangle, buddy, cube}
S UPR-3

With each of these sets of rules, the moralisations of

the networks' graphs were reduced until the rules were
no longer applicable.

T he table reports the sizes of the
It reveals, for example, that

resulting reduced graphs.
the set of rules

P R-3 suffices for reducing the moralised

graphs of the WILSON and OESOPHAGUS networks to the
empty graph;

with the additional simplicial vertex rule,

the moralised graphs of the ALARM and VSD networks are
also reduced to the empty graph. These four networks are

5

therefore triangulated optimally just by pre-processing. We

Experimental results

would like to note that addition of the almost simplicial ver­

T he computational method outlined in the previous section
implements our method of pre-processing probabilistic net­

tex rule to PR-4 did not result in any further reductions.
For the OESOPHAGUS+, MUNIN, ICEA and PATHFINDER

works for triangulation. We conducted some experim ents

networks, we further studied the effect of pre-processing

results of these experiments are reported in this section.

algorithms. Table

with the method to study the effect of pre-processing. The

The experiments were conducted on eight real-life prob­
abilistic networks in the field of medicine: the WILSON
network for the diagnosis of Wilson's liver disease; the

well-known

ALARM network for

anaesthesia monitoring;

the VSD network for the prognosis of ventricular septal de­
fect in infants; the OESOPHAGUS network for the staging
of oesophageal cancer and the extended OESOPHAGUS+

network for the prediction of response to treatment; the
well-known MUNIN network for the interpretation of elec­
tromyographic findings; the ICEA network for the predic­
tion of coverage by antibiotics of pathogens causing pneu­
monia· and the well-known PATHFINDER network for the

�

diagn sis of lymphatic disease. The sizes of the digraphs
of these networks and of their moralisations, expressed in
terms of the

number of vertices and the number of arcs and

edges, respectively, are given in Table I.
The effects of employing various different sets of pre­
processing rules on the eight networks under study are sum­
marised in Table

S
P R-1

2. T he sets employed are denoted:

{simplicial vertex}
{islet, twig}

y

on the treewidths yielded b various heuristic triangulation

3 summarises the results obtained with
maximum cardinality search (denoted MCS) [10] and with

the

perfect-triangulation and minimal-triangulation vari­
breadth-first search (denoted LEX_p

ants of lexicographic

and LEX_M, respectively) [11]. We ran the three heuris­
tic algorithms on the original moralisations of the four net­
works and on the reduced graphs after employing the sets
of rules P R-1 through PR-4. The table reveals that, for
the MUNIN and ICEA networks, the heuristic algorithms
tend to yield a smaller treewidth from the reduced graphs
than from the original moralisations.

The table in addi­

tion shows that the further reduced a graph, the less com­
putation time is spent by the algorithms. As the time spent
on pre-processing is negligible, these results indicate that
pre-processing a probabilistic network is profitable, not just
with respect to the quality of the triangulation yielded but
also with respect to the computation time spent.
In our experiments we observed that the treewidths found
by the heuristic algorithms depend to a large extent on the
vertex with which the computation is started. To investigate
the effect of the starting vertex, we ran the three heuristic
algorithms a number of times every time starting with
,

different vertex. Table

a

4 summarises the results, indicating

BODLAENDER ET AL.

38

network

before

pre-pro

pre-pro

pre-pro

pre-pro

withS

with PR-1

with PR-2

lVI

WILSON
ALARM
VSD
OESOPHAGUS
OESOPHAGUS+
MUNIN

21
37
38
42
67
1003
89
109

ICEA
PATHFINDER

UA12001

lEI

27
62

61
68
194
1662
215
211

lVI

6
7
16
5
28
449

64
14

lEI

8
II

21
8
125
826
176
49

lVI

lVI

lEI

II
30
22
22
46
819
85
68

4
13

17
55
45
48
173
1478
211
170

12
12
31
367
66
37

lEI

pre-pro

pre-pro

with PR-3

with PR-4

lVI

6
28

0
5
6

28
28
144

0
28
175
59

736
181
112

17

lEI

0
10
14
0
135
471
170
63

lVI

lEI

0
0
0
0
26
175
59
14

0
0
0
0
121
471
170
49

Table 2: The effects of employing different sets of reduction rules.

lVI

lEI

67
46
31

194
173
144

28
26

135
121

MUNIN_O

1003

MUNIN_1

819
367
175

network

CPU time spent

computed treewidth

MCS

LEX_F

LEX..M

MCS

LEX_p

LEX..M

10
10
10
10

11

10

11
11

10
10

10

10
10

0.04
0.02
0.01
0.01

0.25
0.13
0.06

11
11

0.04
0.02
0.01
0.01
0.01

0.01

1662
1478
736
471

10
10
10
9

16
16
10
8

16
16
10

35.78
23.12
4.78
0.37

330.90
216.29

8

28.60
17.99
1.68
0.29

89
85
66
59

215

15
15
16

14
14
15

13
13
13

0.12
0.11
0.09

0.14

211
181
170

15

13

0.08

0.72
0.65
0.42
0.33

PATHFINDER_O

109

PATHFINDER_ I

7
7

7
7

PATHFINDER3

68
37
17

211
170
112

14
7

0.13
0.09
0.08

0.07
0.02
0.01
0.00

PATHFINDERA

14

0.05
0.02
0.01
0.00
0.00

0.35
0.15
0.05
0.01
0.01

OESOPHAGUS+ _0
OESOPHAGUS+ _1
OESOPHAGUS+.2
OESOPHAGUS+3
OESOPHAGUS+A

MUNIN...2
MUNIN3
ICEA_O
ICEA_l
ICEA..2
ICEA.J

PATHFINDER..2

63
49

7
7

7
7
7

7
7
7

7
7

0.00

0.05
0.04

30.16
3.29

Table 3: The effect of pre-processing on the treewidths yielded by the three heuristic triangulation algorithms.

network

lVI

lEI

67
46

LEX_p

MCS

rEX..M

min

average

max

min

average

max

min

average

max

194
173

10
10

31
28

144
135

to
10

13
15
15
15

121

10

15

11
11
11
11
11

12.8
12.8
12.7

26

12.1
12.2
11.9
12.1
11.8

16
16
16
16
16

10
10
10
10
10

12.0
12.1
11.8
11.6
11.6

14
14
13
13
13

1003
819
367
175
89
85
66
59

1662
1478
736
471

10
10
10
9

15.1

16
16
10
8

23.3
23.7
22.1
13.8

56
57
50

16
16
10

22.1
22.0

56
56

9.7

26
24
25
15

49

8

20.7
12.1

50
30

215
211
181
170

15
15
16
15

19.8
18.7
19.3
19.5

22
22
22
22

14
14
15

23
23
23
23

13
13

14

19.1
18.9
18.9
18.6

13
13

16.3
16.2
16.3
16.4

20
20
20
20

211
170
112
63

PATHFINDER_4

14

49

7
7
7
7
7

7.2
7.6
7.5
7.4
7.6

8

PATHFINDER_3

109
68
37
17

7
7
7
7
7

8.0
7.6
7.6
7.5
7.4

9
9
9
9
9

7
7
7
7
7

7.6
7.2
7.2
7.1
7.1

8
8
8
8
8

OESOPHAGUS+_0
OESOPHAGUS+_I
OESOPHAGUS+...2
OESOPHAGUS+.3

OESOPHAGUS+A
MUNIN_O
MUNJN_l
MUNIN...2
MUNIN3
ICEA_O
ICEA_ I
ICEA..2
ICEA3
PATHFINDER_Q
PATHFINDER_!
PATHFINDER...2

15.6
14.8

8
8
8
8

12.6
12.6

Table 4: Some statistics for the three heuristic triangulation algorithms.

UAI2001

per graph the minimum and maximum treewidth found and

form better. Some of our reduction rules are safe also with

the average treewidth over all possible starting vertices. We

respect to minimum overall state space. Other rules, how­

would like to note that, using integer linear programming

ever, are safe only under additional constraints on their ap­

techniques on the most reduced graph, we found the exact

plication. We plan to further investigate pre-processing for

treewidth of the PATHFINDER network to be 6.

finding triangulations with minimum overall state space.

6

Conclusions and further research

When solving hard combinatorial problems, pre-processing
is often profitable.

Based upon this general observation,

we designed a computational method that provides for pre­
processing of probabilistic networks for triangulation. Our
method exploits a set of rules for stepwise reducing the
problem of finding a triangulation of minimum treewidth
for a network's moralised graph to the same problem on a

Acknowledgements. The research of the first author was partly
supported by EC contract IST-1999-14186: Project ALCOM-FT
(Algorithms and Complexity - Future Technologies). The re­
search of the last two authors was partly supported by the Nether­
lands Computer Science Research F oundation with financial sup­
port from the Netherlands Organisation for Scientific Research.

