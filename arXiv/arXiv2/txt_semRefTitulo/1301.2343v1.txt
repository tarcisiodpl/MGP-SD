
Efficient planning plays a crucial role in
model-based reinforcement learning. Traditionally, the main planning operation is a
full backup based on the current estimates of
the successor states. Consequently, its computation time is proportional to the number of successor states. In this paper, we
introduce a new planning backup that uses
only the current value of a single successor
state and has a computation time independent of the number of successor states. This
new backup, which we call a small backup,
opens the door to a new class of model-based
reinforcement learning methods that exhibit
much finer control over their planning process
than traditional methods. We empirically
demonstrate that this increased flexibility allows for more efficient planning by showing
that an implementation of prioritized sweeping based on small backups achieves a substantial performance improvement over classical implementations.

1. Introduction
In reinforcement learning (RL) (Kaelbling et al., 1996;
Sutton & Barto, 1998), an agent seeks an optimal control policy for a sequential decision problem in an initially unknown environment. The environment provides feedback on the agent’s behavior in the form
of a reward signal. The agent’s goal is to maximize
the expected return, which is the discounted sum of
rewards over future timesteps. An important performance measure in RL is the sample efficiency, which
refers to the number of environment interactions that
is required to obtain a good policy.
Many solution strategies improve the policy by iteratively improving a state-value or action-value function,
which provide estimates of the expected return under
a given policy for (environment) states or state-action

pairs, respectively. Different approaches for updating
these value functions exist. In terms of sample efficiency, one of the most effective approaches is to estimate the environment model using observed samples
and to compute, at each time step, the (action-)value
function that is optimal with respect to the model estimate using planning techniques. A popular planning
technique used for this is value iteration (VI) (Sutton,
1988; Watkins, 1989), which performs sweeps of backups through the state or state-action space, until the
(action-)value function has converged.
A drawback of using VI is that it is computationally very expensive, making it infeasible for many
practical applications. Fortunately, efficient approximations can be obtained by limiting the number of
backups that is performed per timestep. A very effective approximation strategy is prioritized sweeping (Moore & Atkeson, 1993; Peng & Williams, 1993),
which prioritizes backups that are expected to cause
large value changes. This paper introduces a new
backup that enables a dramatic improvement in the
efficiency of prioritized sweeping.
The main idea behind this new backup is as following.
Consider that we are interested in some estimate A
that is constructed from a sum of other estimates Xi .
The estimate A can be computed using a full backup:
X
Xi .
A←
i

If the estimates Xi are updated, A can be recomputed
by redoing the above backup. Alternatively, if we know
that only Xj received a significant value change, we
might want to update A for only Xj . Let us indicate
the old value of Xj , used to construct the current value
of A, as xj . A can then be updated by subtracting this
old value and adding the new value:
A ← A − xj + Xj .
This kind of backup, which we call a small backup, is
computationally cheaper than the full backup. The

Planning by Prioritized Sweeping with Small Backups

trade-off is that, in general, more memory is required
for storing the estimates xi associated with A. In planning, where the X estimates correspond to state-value
estimates and A corresponds to a state or state-action
estimate, this is not a serious restriction, because a
full model is stored already. The additional memory
required has the same order of complexity as the memory required for storage of the model.
The core advantage of small backups over full backups is that they enable finer control over the planning process. This allows for more effective update
strategies, resulting in improved trade-offs between
computation time and quality of approximation of
the VI solution (and hence sample efficiency). We
demonstrate this empirically by showing that a prioritized sweeping implementation based on small backups yields a substantial performance improvement over
the two classical implementations (Moore & Atkeson,
1993; Peng & Williams, 1993).
In addition, we demonstrate the relevance of small
backups in domains with severe constraints on computation time, by showing that a method that performs one small backup per time step has an equal
computation time complexity as TD(0), the classical
method that performs one sample backup per timestep.
Since sample backups introduce sampling variance,
they require a step-size parameter to be tuned for
optimal performance. Small backups, on the other
hand, do not introduce sampling variance, allowing
for a parameter-free implementation. We empirically
demonstrate that the performance of a method that
performs one small backup per time step is similar to
the optimal performance of TD(0), achieved by carefully tuning the step-size parameter.

2. Reinforcement Learning Framework
RL problems are often formalized as Markov decision
processes (MDPs), which can be described as tuples
hS, A, P, R, γi consisting of S, the set of all states; A,
s′
the set of all actions; Psa
= P r(s′ |s, a), the transition
probability from state s ∈ S to state s′ when action
a ∈ A is taken; Rsa = E{r|s, a}, the reward function
giving the expected reward r when action a is taken
in state s; and γ, the discount factor controlling the
weight of future rewards versus that of the immediate
reward.
Actions are selected at discrete timesteps t = 0, 1, 2, ...
according to a policy π : S × A → [0, 1], which defines
for each action the selection probability conditioned
on the state. In general, the goal of RL is to improve
the policy in order to increase the return G, which is

the discounted cumulative reward
Gt = rt+1 + γ rt+2 + γ 2 rt+3 + ... =

∞
X

γ k−1 rt+k ,

k=1

where rt+1 is the reward received after taking action
at in state st at timestep t.
The prediction task consists of determining the value
function V π (s), which gives the expected return when
policy π is followed, starting from state s. V π (s) can
be found by making use of the Bellman equations for
state values, which state the following:
X ′
V π (s) = Rs + γ
Pss V π (s′ ) ,
(1)
s′

P
P
′
s′
.
where Rs = a π(s, a)Rsa and Pss = a π(s, a)Psa
Model-based methods use samples to update estimates
′
of the transition probabilities, P̂ss , and reward function, R̂s . With these estimates, they can iteratively
improve an estimate V of V π , by performing full backups, derived from Equation (1):
X ′
V (s) ← R̂s + γ
P̂ss V (s′ ) .
(2)
s′

In the control task, methods often aim to find the optimal policy π ∗ , which maximizes the expected return.
This policy is the greedy policy with respect to the optimal action-value function Q∗ (s, a), which gives the
expected return when taking action a in state s, and
following π ∗ thereafter. This function is the solution
to the Bellman optimality equation for action-values:
X ′
s
Q∗ (s, a) = Rsa + γ
Psa
max
Q∗ (s′ , a′ ) . (3)
′
s′

a

The optimal value function is related to the optimal action-value function through:
V ∗ (s) =
maxa Q∗ (s, a).
Model-based methods can iteratively improve estimates Q of Q∗ by performing full backups derived from
Equation (3):
X ′
s
Q(s, a) ← R̂sa + γ
P̂sa
max
Q(s′ , a′ ) ,
(4)
′
s′

a

′

′

s
s
where R̂sa and P̂sa
are estimates of Rsa and Psa
, respectively.

Model-free methods do not maintain an model estimate, but update a value function directly from samples. A classical example of a sample backup, based on
sample (s, r, s′ ) is the TD(0) backup:
V (s) ← V (s) + α (r + γV (s′ ) − V (s)) ,
where α is the step-size parameter.

(5)

Planning by Prioritized Sweeping with Small Backups

3. Small Backup
This section introduces the small backup. We start
with small state-value backups for the prediction task.
Section 3.3 discusses small action-value backups for
the control task.
3.1. Value Backups
In this section, we introduce a small backup version
of the full backup for prediction (backup 2). In the
introduction, we showed that a small backup requires
storage of the component values that make up the current value of a variable. In the case of a small value
backup, the component values correspond to the values of successor states. We indicate these values by
the function Us : S × S → IR. So, Us (s′ ) is the value
estimate of s′ associated with s.
Using Us , V (s) can be updated with only the current
value of a single successor state, s′ , as demonstrated
by the following theorem. The three backups shown
in the theorem form together the small backup.
Theorem 3.1 If the current relation between V (s)
and Us is given by
X ′′
V (s) = R̂s + γ
(6)
P̂ss Us (s′′ ) ,
s′′

then, after performing the following backups:
tmp ←
V (s) ←
′

Us (s ) ←

V (s′ )
V (s) +

(7)
′
γPss [V

′

′

(s ) − Us (s )]

tmp ,

(8)
(9)

relation (6) still holds, but Us (s′ ) is updated to V (s′ ).
Proof Backup (8) subtract the component in relation
(6) corresponding to s′ from V (s) and adds a new component based on the current value estimate of s′ :
′

′

V (s) ← V (s) − γ P̂ss Us (s′ ) + γ P̂ss V (s′ ) .
Hence, relation (6) is maintained, while Us (s′ ) is updated. Note that V (s′ ) needs to be stored in a temporary variable, since backup (8) can alter the value of
V (s′ ) if s′ = s.
3.2. Value Correction after Model Update
Theorem 3.1 relies on relation (6) to hold. If the
model gets updated, this relation now longer holds.
In this section, we discuss how to restore relation (6)
in a computation-efficient way for the commonly used
model estimate:
′
P̂ss

←

R̂s

←

′
Nss /Ns
Rssum /Ns

(10)
,

(11)

where Ns counts the number of times state s is vis′
ited, Nss counts the number of times s′ is observed as
successor state of s, and Rssum is the sum of observed
rewards for s.
Theorem 3.2 If currently, the following relation
holds:
X ′′
P̂ss Us (s′′ ) ,
V (s) = R̂s + γ
s′′

′

and a sample (s, r, s ) is observed, then, after performing the backups:
′

′

Ns ← Ns + 1; Nss ← Nss + 1
(12)
h
i
V (s) ← V (s)(Ns − 1) + r + γUs (s′ ) /Ns . (13)
the relation still holds, but with updated values for R̂s
′′
and P̂ss .
Proof (sketch) Backup (13) updates V (s) by computing a weighted average of V (s) and r + γUs (s′ ).
The value change this causes is the same as the value
change caused by updating the model and then performing a full backup of s based on Us .
Algorithm 1 shows pseudo-code for a general class of
prediction methods based on small backups. Surpisngly, while it is a planning method, R̂s is never explicitly computed, saving time and memory. Note that the
computation per time step is fully independent of the
number of successor states. Members of this class need
to specify the number of iterations (line 8) as well as
a strategy for selecting state-successor pairs (line 9).
Algorithm 1 Prediction with Small Backups
1: initialize V (s) arbitrarily for all s
2: initialize Us (s′ ) = V (s′ ) for all s, s′
′
3: initialize Ns , Nss to 0 for all s, s′
4: loop {over timesteps}
5:
observe transition (s, r, s′ )
′
′
6:
Ns ← Nsh + 1; Nss ← Nss + 1
i
7:

8:
9:
10:
11:
12:
13:
14:

V (s) ← V (s)(Ns − 1) + r + γ Us (s′ ) /Ns
loop {for a number of iterations}
′
select a pair (s̄, s̄′ ) with Ns̄s̄ > 0
tmp ← V (s̄′ )
′
V (s̄) ← V (s̄) + γNs̄s̄ /Ns̄ · [V (s̄′ ) − Us̄ (s̄′ )]
Us̄ (s̄′ ) ← tmp
end loop
end loop

3.3. Action-value Backups
Before we can discuss small action-value backups, we
have to discuss a more efficient implementation of the

Planning by Prioritized Sweeping with Small Backups

full action-value backup. Backup (4) has a computation time complexity of O(|S||A|). A more efficient implementation can be obtained by storing statevalues, besides action-values, according to V (s) =
maxa Q(s, a). Backup (4) can then be implemented
by:
X
Q(s, a) ← R̂sa + γ
V (s′ )
(14)
s′

V (s) ← max
Q(s, a) .
′
a

(15)

The combined computation time of these backups is
O(|S| + |A|), a considerable reduction.
Backup (14) is similar in form as the prediction
backup. Hence, we can make a small backup version of
it similar to the one in the prediction case. The theorems below are the control versions of the theorems for
the prediction case. They can be proven in a similar
way as the prediction theorems.
Theorem 3.3 If the current relation between Q(s, a)
and Usa is given by
X
s′′
Q(s, a) ← R̂sa + γPsa
Usa (s′′ ) ,
(16)
s′′

then, performing the following backups:
′

s
Q(s, a) ← Q(s, a) + γPsa
[V (s′ ) − Usa (s′ )]
Usa (s′ ) ← V (s′ ) ,

maintains this relation while updating Usa (s′ ) to V (s′ ).
Theorem 3.4 If relation (16) holds and a sample
(s, a, r, s′ ) is observed, then, after performing backups
′

′

s
s
← Nsa + 1; Nsa
← Nsa
+1
h
i
Q(s, a) ← Q(s, a)(Nsa − 1) + r + γUsa (s′ ) /Nsa ,

Nsa

relation (16) still holds, but with updated values for
s′′
R̂sa and P̂sa
.
A small action-value backup is a finer-grained version
of backup (14): performing a small backup of Q(s, a)
for each successor state is equivalent (in computation
time complexity and effect) as performing backup (14)
once. While in principle, backup (15) can be performed after each small backup, it is not very efficient to do so, since small backups make many small
changes. More efficient planning can be obtained when
backup (15) is performed only once in a while.
In Section 4, we discuss an implementation of prioritized sweeping based on small action-value backups.

3.4. Small Backups versus Sample Backups
A small backup has in common with a sample backup
that both update a state value based on the current
value of only one of the successor states. In addition,
they share the same computation time complexity and
their effect is in general smaller than that of a full
backup.
A disadvantage of a sample backup, with respect to a
small backup, is that it introduces sampling variance,
caused by a stochastic environment. This requires the
use of a step-size parameter to enable averaging over
successor states (and rewards). A small backup does
not introduce sampling variance, since it is implicitly
based on an expectation over successor states. Hence,
it does not require tuning of a step-size parameter for
optimal performance.
A second disadvantage of a sample backup is that it affects the perceived distribution over action outcomes,
which places some restrictions on reusing samples. For
example, a model-free technique like experience replay
(Lin, 1992), which stores experience samples in order
to replay them at a later time, can introduce bias,
which reduces performance, if some samples are replayed more often than others. For small backups this
does not hold, since the process of learning the model
is independent from the backups based on the model.
This allows small backups to be combined with effective selection strategies like prioritized sweeping.

4. Prioritized Sweeping with Small
Backups
Prioritized sweeping (PS) makes the planning step of
model-based RL more efficient by using a heuristic (a
‘priority’) for selecting backups that favours backups
that are expected to cause a large value change. A priority queue is maintained that determines which values
are next in line for receiving backups.
There are two main implementations:
one by
Moore & Atkeson (1993) and one by Peng & Williams
(1993) 1 . All PS methods have in common that they
perform backups in what we call update cycles. By adjusting the number of update cycles that is performed
per time step, the computation time per time step can
be controlled. Below, we discuss in detail what occurs
in an update cycle for the two classical PS implementations.
1

We refer to the version of ‘queue-Dyna’ for stochastic
domains, which is different from the version for deterministic domains.

Planning by Prioritized Sweeping with Small Backups

4.1. Classical Prioritized Sweeping
Implementations

answer is to put states in the priority queue and to
perform backup (15) for the top state.

In the Moore & Atkeson implementation the elements
in the queue are states and the backups are full value
backups. In control, a full value backup is different
from backup (2). Instead, it is equivalent (in effect and
computation time) to performing backup (14) for each
action, followed by backup (15). Hence, the associated
computation time has complexity O(|S||A| + |A|).

The priority associated with a state is based on the
change in action-value that has occurred due to small
backups, since the last value backup. This priority assures that states with a large discrepancy between the
state value and action-values, receive a value backup
first.

An update cycle consists of the following steps. First,
the top state is removed from the queue, and receives
a full value backup. Let s bet the top state and ∆Vs
the value change caused by the backup. Then, for
all predecessor state-action pairs (s̄, ā) a priority p is
computed, using:
s
p ← Ps̄ā
· |∆Vs | .

(17)

If s̄ is not yet on the queue, then it is added with
priority p. If s̄ is on the queue already, but its current priority is smaller than p, then the priority of s̄ is
upgraded to p.
The Peng & Williams implementation differs from the
Moore & Atkeson implementation in that the backup
is not a full value backup. Instead, it is a backup
with the same effect as a small action-value backup,
but with a computational complexity of O(|S| + |A|).
So, it is a cheaper backup than a full backup, but its
value change is (much) smaller. The backup requires a
state-action-successor triple. Hence, these triples are
the elements on the queue. Predecessors are added to
the queue with a priorities that estimate the actionvalue change.
4.2. Small Backup implementation
A natural small backup implementation might appear to be an implementation similar to that of Peng
& Williams, but with the main backup implemented
more efficiently. The low computational cost of a small
backup, however, allows for a much more powerful implementation. The pseudo-code of this implementation is shown in Algorithm 2. Below, we discuss some
key characteristics of the algorithm.
The computation time of a small backup is so low,
that it is comparable to the priority computation in
the classical PS implementations. Therefore, instead
of computing a priority for each predecessor and performing a backup for the element with the highest priority in the next update cycle, we can perform a small
backup for all predecessors. This raises the question
of what to put in the priority queue and what type of
backup to perform for the top element. The natural

One surprising aspect of the algorithm is that it does
not use the function Usa , which forms an essential part
of small action-value backups. The reason is that due
to the specific backup strategy used by the algorithm,
Usa (s′ ) is equal to V (s′ ) for all state-action pairs (s, a)
and all successor states s′ . Hence, instead of using
Usa , V can be used, saving memory and simplifying
the code.
Table 1 shows the computation time complexity of
an update cycle for the different PS implementations.
The small backup implementation is the cheapest one
among the three.

Moore & Atkeson
Peng & Williams
small backups

top-element
backups
O(|S||A| + |A|)
O(|S| + |A|)
O(|A|)

other
O(Pre )
O(Pre )
O(Pre )

Table 1. Computation time associated with one update cycle for the different PS implementations. Pre indicates the
number of predecessors, state-action pairs that transition
to the state whose value has just been updated.

5. Experimental Results
In this section, we evaluate the performance of a minimal version of Algorithm 1, as well as the performance
of Algorithm 2.
5.1. Small backup versus Sample backup
We compare the performance of TD(0), which performs one sample backup per time step, with a version
of Algorithm 1 that performs one small backup per
time step. Specifically, its number of iterations (line
8) is 1, and the selected state-successor pair (line 9) is
the pair corresponding to the most recent transition.
Their performance is compared on two evaluation
tasks, both consisting of 10 states, laid out in a circle. State transitions only occur between neighbours.
The transition probabilities for both tasks are generated by a random process. Specifically, the transition
probability to a neighbour state is generated by a random number between 0 and 1 and normalized such that

Planning by Prioritized Sweeping with Small Backups

Algorithm 2 Prioritized Sweeping with Small Backups
1: initialize V (s) arbitrarily for all s
2: initialize Q(s, a) = Qprev (s, a) = V (s) for all s, a
s′
3: initialize Nsa , Nsa
to 0 for all s, a, s′
4: loop {over episodes}
5:
initialize s
6:
repeat {for each step in the episode}
7:
select action a, based on Q(s, ·)
8:
take action a, observe r and s′
s′
s′
9:
Nsa ← Nsa + 1; Nsa
← Nsa
+1

10:
Q(s, a) ← Q(s, a)(Nsa − 1)+ r + γV (s′ ) /Nsa

Each time a transition is observed and the corresponding backup is performed, the root-mean squared
(RMS) error over all states is determined. The average
RMS error over the first 10.000 transitions, normalized with the initial error, determines the performance.
Figure 1 shows this performance, averaged over 100
runs. The standard error is negligible: the maximum
standard error in the first task was 0.0057 (after normalization) and in the second task 0.0007. Note that
the performance for d = 0 is equal to the performance
for α = 1, as it should, by definition. The normalized
performance for α = 0 is 1, since no learning occurs in
this case.

p ← |Q(s, a) − Qprev (s, a)|
if s not on queue or p > current priority s,
then promote s̄ to p
for a number of update cycles do
remove top state s̄′ from queue
for all b: Qprev (s̄′ , b) ← Q(s̄′ , b)
tmp ← V (s̄′ )
V (s̄′ ) ← maxb Q(s̄′ , b)
∆V ← V (s̄′ ) − tmp
s̄′
for all (s̄, ā) pairs with Ns̄ā
> 0 do
s̄′
Q(s̄, ā) ← Q(s̄, ā) + γNs̄ā /Ns̄ā · ∆V
p ← |Q(s̄, ā) − Qprev (s̄, ā)|
if s̄ not on queue or p > current priority
s̄, then promote s̄ to p
end for
end for
s ← s′
until s is terminal
end loop

These experiments demonstrate three things. First,
the optimal step-size can vary a lot between different
tasks. Second, selecting a sub-optimal step-size can
cause large performance drops. Third, a small-backup,
which is parameter-free, has a performance similar to
the performance of TD(0) with optimized step-size.
Since the computational complexity is the same, the
small backup is a very interesting alternative to the
sample backup in domains with tight constraints on
the computation time, where previously only sample
backups where viable. Keep in mind that a sample
backup does require a model estimate, so if there are
also tight constraints on the memory, a sample backup
might still be the only option.

11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:

the sum of the transition probabilities to the left and
right neighbour is 1. The reward for counter-clockwise
transitions is always +1. The reward for clockwise
transitions is different for the two tasks. In the first
task, a clockwise transition results in a reward of -1;
in the second task, it results in a reward of +1. The
discount factor γ is 0.95 and the initial state values are
0.
For TD(0), we performed experiments with a constant
step-size for values between 0 and 1 with steps of 0.02.
In addition, we performed experiments with a decaying, state-dependent step-size, according to
α(s) =

1
d · (Ns − 1) + 1

,

(18)

where Ns is the number of times state s has been visited, and d specifies the decay rate. We used values of
d between 0 and 1 with steps of 0.02. Note that for
d = 0, α(s) = 1, and for d = 1, α(s) = 1/Ns .

5.2. Prioritized Sweeping
We compare the performance of prioritized sweeping with small backups (Algorithm 2) with the
two classical implementations of Moore&Atkeson and
Peng&Williams on the maze task depicted in the top
of Figure 2. The reward received at each time step
is -1 and the discount factor is 0.99. The agent can
take four actions, corresponding to the four compass
directions, which stochastically move the agent to a
different square. The bottom of Figure 2 shows the
relative action outcomes of a ‘north’ action. In free
space, an action can result in 15 possible successor
states, each with equal probability. When the agent is
close to a wall, this number decreases.
To obtain an upper bound on the performance, we
also compared against a method that performs value
iteration (until convergence) at each time step, using
the most recent model estimate.
As exploration strategy, the agent select with 5% probability a random action, instead of the greedy one. On
top of that, we use the ‘optimism in the face of uncertainty’ principle, as also used by Moore & Atkeson.
This means that as long as a state-action pair has not
been visited for at least M times, it’s value is defined as

Planning by Prioritized Sweeping with Small Backups

normalized RMS error

1
0.8

TD(0), constant step−size
TD(0), decaying step−size
small backup

0.6
0.4
0.2
0
0

0.2

0.4

α/d

0.6

0.8

1

0.8

1

normalized RMS error

1
0.8

TD(0), constant step−size
TD(0), decaying step−size
small backup

two classical implementations. The results also show
that the Peng & Williams method performs considerably worse than the one of Moore & Atkeson in the
considered domain. This can be explained by the different backups they perform. The effect of the backup
of Peng & Williams is proportional to the transition
1
. In contrast,
probability, which in most cases is 15
the Moore & Atkeson method performs a full backup
each update cycle. While the small backup implementation also uses backups that are proportional to the
transition probability, it performs a lot more backups
per update cycle. Specifically, a number that is proportional to the number of predecessors. In general,
this number will increase when the stochasticity of the
domain increases.

0.6
0.4
0.2
0
0

0.2

0.4

α/d

0.6

Figure 1. Average RMS error over the first 10.000 observations, normalized by the initial error, for different values
of the step-size parameter α, in case of constant step-size,
or different values of the decay parameter d, in case of decaying step-size. The top graph corresponds with the first
evaluation task; the bottom graph with the second.

some optimistically defined value (0 for our maze task),
instead of the value based on the model estimate. We
optimized M for the value iteration method, resulting
in M = 4, and used this value for all methods.

S
G

1
1
1
1
1

1
1
1
1
1

1
1
1
1
1

1
1
1
1
1

0
0
3
1
1

0
0
3
1
1

1
1
1
2
0

1
1
1
2
0

1
1
1
2
0

0
0
1
01
0
1
01

2
2
2
4
1
0

1
1
1
2
01

We performed experiments for 1, 3, 5 and 10 update
cycles per time step. Figure 3 shows the average return
over the first 200 episodes for the different methods.
The results are averaged over 100 runs. The maximum
standard deviation is 0.1 for all methods, except for the
method of Peng & Williams, which had a maximum
standard deviation of 1.0.

Figure 2. Above, the maze task, in which the agent must
travel from S tothe G. Below, transition probabilities
1
) of a ‘north’ action for different positions of the agent
(· 15
(indicated by the circle) with respect to the walls (black
squares).

The computation time per update cycle was about the
same for the three different PS implementations, with
a small advantage for the small backup implementation, which shows that the O(Pre ) computation (see
Table 1) is dominant in this task. The computation
time per observation of the value iteration method was
more than 400 times as high as a single update cycle.

6. Discussion

PS with small backups turns out to be very effective.
With only a single update cycle, the value-iteration
result can be closely approximated, in contrast to the

Prioritized sweeping can be viewed as a generalization
of the idea of replaying of experience in backward order (Lin, 1992), which by itself is related to eligibility
traces (Sutton, 1988; Watkins, 1989; Sutton & Singh,
1994). What all these techniques have in common is
that new information (which can be value changes, but
at its core all value changes originate from new data) is
propagated backwards. Whereas backward replay and
eligibility traces use the recent trajectory for backward

Planning by Prioritized Sweeping with Small Backups

makes new, more efficient, update strategies possible.
In addition, small backups can be useful in domains
with very tight time constraints, offering a parameterfree alternative to sample backups, which were up to
now often the only feasible option for such domains.

−50

avg. return over first 200 episodes

−52
−54
−56
−58
−60

